Group {
 name BinaryBuddy1
 help "In mathematics and computer programming, an operator is a character that represents a specific mathematical or logical action or process.\n\nApplies a operator or two with a threshold, getting applied to eahc pixel\n"
 selected true
 addUserKnob {20 binaryBuddy l "Binary Buddy"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION BinaryBuddy
 addUserKnob {41 channels t "The binary effect is only applied to these channels. \nIf you set this to something other than all or none, you can use the checkboxes on the right to select individual channels." T Merge2.Achannels}
 addUserKnob {41 presets t "<b>• default:</b> resets all knobs to original stat\n<b>• alpha to 1:</b> any pixel above the value of 0 will become 1 in the alpha channel.\n<b>• core alpha to 1:</b> any pixel a value of 1 will be kept, anything below 1 will be made 0.\n<b>• transparent alpha to 1:</b> any pixel higher then 0.0001 and below 1 will be made 1, everything else will be made 0." T Menu1.presets}
 addUserKnob {4 math01 l operator t "In mathematics and computer programming, an operator is a character that represents a specific mathematical or logical action or process.\n\n<b>A is referring to the pixel values.</b>\n\n• <b> < </b> Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true. <b>(A < B) is true.</b>\n\n• <b> <= </b>Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.<b>(A <= B) is true.</b>\n\n• <b> == </b>Checks if the values of two operands are equal or not, if yes then condition becomes true. <b>(A == B) is not true.</b>\n\n• <b> != </b>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.<b>(A != B) is true.</b>\n\n• <b>>=</b>Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.<b>(A >= B) is not true.</b>\n\n• <b>> </b>Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.<b>(A > B) is not true.</b>" M {< <= == != >= > "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 math01 >
 addUserKnob {7 value01 l "" t "threshold of the operation value" -STARTLINE}
 value01 0.5
 addUserKnob {41 add t "adds another operation to the first one." T Menu.add}
 addUserKnob {4 math02 l operator t "In mathematics and computer programming, an operator is a character that represents a specific mathematical or logical action or process.\n\n<b>A is referring to the pixel values.</b>\n\n• <b> < </b> Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true. <b>(A < B) is true.</b>\n\n• <b> <= </b>Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.<b>(A <= B) is true.</b>\n\n• <b> == </b>Checks if the values of two operands are equal or not, if yes then condition becomes true. <b>(A == B) is not true.</b>\n\n• <b> != </b>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.<b>(A != B) is true.</b>\n\n• <b>>=</b>Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.<b>(A >= B) is not true.</b>\n\n• <b>> </b>Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.<b>(A > B) is not true.</b>" +DISABLED M {< <= == != >= > "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {7 value02 l "" t "threshold of the operation value" -STARTLINE +DISABLED}
 addUserKnob {26 space00 l "" +STARTLINE T "\t"}
 addUserKnob {4 exportOption l export t "Options to export a expression nodes with these settings.\n\n<b>• bake binary buddy:</b> bakes this nodes values into a expression.\n<b>• alpha to 1:</b> any pixel above the value of 0 will become 1 in the alpha channel.\n<b>• core alpha to 1:</b> any pixel a value of 1 will be kept, anything below 1 will be made 0.\n<b>• transparent alpha to 1:</b> any pixel higher then 0.0001 and below 1 will be made 1, everything else will be made 0.\n<b>• operator info:</b> information about operators and functions" M {"bake binary buddy" "alpha to 1" "core alpha to 1" "transparent alpha to 1" "operator info" "" "" "" "" "" "" "" "" "" "" "" ""}}
 exportOption "operator info"
 addUserKnob {22 export -STARTLINE T "#John Toth\n\nimport nuke\n\n# Defining shortcuts\nn = nuke.thisNode()\n\n\nnuke.root().end()\n\n    #--------------------------------------------------------------------------------------------------\n    # nake binart buddy (shuffle)\n    #--------------------------------------------------------------------------------------------------\n#defining if channels is using other then \"rgba or only alpha\" (this si the binary code)\ndef binaryBuddy(expression, channels, add, math01, value01, math02, value02):\n    if add == 1:\n        expression\['channel0'].setValue(channels + '.red')\n        expression\['expr0'].setValue('r ' + str(math01) + ' ' + str(value01) + ' && r ' + str(math02) + ' ' + str(value02))\n        expression\['channel1'].setValue(channels + '.green')\n        expression\['expr1'].setValue('g ' + str(math01) + ' ' + str(value01) + ' && g ' + str(math02) + ' ' + str(value02))\n        expression\['channel2'].setValue(channels + '.blue')\n        expression\['expr2'].setValue('b ' + str(math01) + ' ' + str(value01) + ' && b ' + str(math02) + ' ' + str(value02))\n        expression\['channel3'].setValue(channels + '.alpha')\n        expression\['expr3'].setValue('a ' + str(math01) + ' ' + str(value01) + ' && a ' + str(math02) + ' ' + str(value02))\n    else:\n        expression\['expr0'].setValue('r ' + str(math01) + ' ' + str(value01))\n        expression\['expr1'].setValue('g ' + str(math01) + ' ' + str(value01))\n        expression\['expr2'].setValue('b ' + str(math01) + ' ' + str(value01))\n        expression\['expr3'].setValue('a ' + str(math01) + ' ' + str(value01))\n\n    #--------------------------------------------------------------------------------------------------\n    # export options\n    #--------------------------------------------------------------------------------------------------\ndef expression():\n    # Create Expression node\n    expression = nuke.nodes.Expression()\n    expression.setSelected(False)\n    expression.setXpos(x_pos + 100)\n    expression.setYpos(y_pos - 14)\n    expression.setInput(0, None)\n\n    \n    #knobs to add\n    tab = nuke.Tab_Knob ('custom', 'Custom',)\n    slider01 = nuke.Double_Knob ('value01', 'value')\n    slider02 = nuke.Double_Knob ('value02', 'value')  \n    \n    # Set default expression values only if export == 0\n    if export == 0:\n        #check if channels us using somethign other then 'rgba' & 'alpha'\n        if channels != 'rgba' and channels != 'alpha':       \n            # Create Shuffle node\n            shuffle = nuke.nodes.Shuffle()\n            shuffle\['in'].setValue(channels)\n            shuffle\['label'].setValue('<b>\[value in]</b> &rarr; \[value out]')\n            shuffle.setXpos(x_pos + 100)\n            shuffle.setYpos(y_pos - 100)\n            shuffle.setInput(0, None)\n            binaryBuddy(expression, channels, add, math01, value01, math02, value02)\n            expression.setInput(0, shuffle)\n            expression\['label'].setValue('baked binary')\n        else:\n            binaryBuddy(expression, channels, add, math01, value01, math02, value02)\n            expression\['label'].setValue('baked binary')\n\n    \n    if export == 1:\n        expression\['label'].setValue('alpha to 1')\n        expression\['expr3'].setValue('a > value01 ? 1 : 0')\n        \n        #add knobs\n        expression.addKnob(tab)\n        expression.addKnob(slider01)\n        slider01.setRange(0, 1)\n        slider01.setValue(0)\n        \n\n    if export == 2:\n        expression\['label'].setValue('core alpha to 1')\n        expression\['expr3'].setValue('a > value01 ? 1 : 0')\n        \n        #add knobs\n        expression.addKnob(tab)\n        expression.addKnob(slider01)\n        slider01.setRange(0, 0.999999)\n        slider01.setValue(0.999999)\n        \n    if export == 3:\n        expression\['label'].setValue('transparent alpha to 1')\n        expression\['expr3'].setValue('a > \[value value01] && a < \[value value02]')\n        \n        #add knobs\n        expression.addKnob(tab)\n        expression.addKnob(slider01)\n        slider01.setRange(0, 1)\n        slider01.setValue(0)\n        expression.addKnob(slider02)\n        slider02.setRange(0, 1)\n        slider02.setValue(1)\n        \n    currentNodes = nuke.allNodes()\n    \n    # select new nodes\n    \[n.knob(\"selected\").setValue(n not in currentNodes) for n in nuke.allNodes()]\n    \n    # move node graph\n    expression.knob(\"selected\").setValue(True)\n    nuke.zoomToFitSelected()\n    expression.knob(\"selected\").setValue(False)\n        \n    #--------------------------------------------------------------------------------------------------\n    # defining shortcuts\n    #--------------------------------------------------------------------------------------------------\n\n# Position of nodes to when exported\nx_pos = n.xpos() + 150\ny_pos = n.ypos() + 150\n\n# Gathering node information\nchannels = n\['channels'].value()\n\nmath01 = n\['math01'].value()\nvalue01 = n\['value01'].getValue()\n\nadd = int(n\['add'].getValue())\n\nmath02 = n\['math02'].value()\nvalue02 = n\['value02'].getValue()\n\nexport = int(n\['exportOption'].getValue())\n\n\n\n    #--------------------------------------------------------------------------------------------------\n    # create\n    #--------------------------------------------------------------------------------------------------\n\n\n#export 1-3 from function and 4 solo to make sure not to create expression node\nif export == 0 or export == 1 or export == 2 or export == 3:\n    expression()\nelse:\n    stickynote = nuke.createNode('StickyNote', inpanel=False)\n    stickynote.setXpos(x_pos + 100)\n    stickynote.setYpos(y_pos - 14)\n    stickynote\['note_font'].setValue('DejaVu Sans')\n    stickynote\['label'].setValue(\"\"\"<left><br><br>There are several classifications of operators and each of them can have one or more operands, a specific data that is to be manipulated.<br><br>• <b>Assignment Operator:</b> This refers to the \"=\" (equals) sign and assigns a variable. A variable is the framework of the information.<br>• <b>Arithmetic Operators:</b> These include \"+\" (addition), \"-\" (subtraction), \"*\" (multiplication), \"/\" (division), \"//\" (integer division), \"Mod\" (Modulo) and \"^\" (exponentiation).<br>• <b>Boolean Operators:</b> These make use of \"And\" (logical conjunction), \"AndAlso\" (short circuit And), \"OrElse\" (short circuit Or), \"Or\" (logical inclusion), \"Not\" (negation) and \"Xor\" (logical inclusion). These symbols are also known as logical operators.<br>• <b>Relational Operators:</b> These include \">\" (greater than), \"<\" (lesser than), \">=\" (greater than or equal to), \"<=\" (lesser than or equal to), \"==\" (equal to), \"<>\" (not equal to), and \"Is\" (comparing references). These symbols are used to evaluate variables.<br>• <b>Bitwise Operators:</b> These are used in manipulating bits of a binary value and are not always used in programming. These include the symbols \"Not\" (bitwise negation), \"Xor\" (bitwise exclusive or), \"And\" (bitwise and), and \"Or\" (bitwise or).\"\"\")\n\n\n    currentNodes = nuke.allNodes()\n    \n    # select new nodes\n    \[n.knob(\"selected\").setValue(n not in currentNodes) for n in nuke.allNodes()]\n    \n    # move node graph\n    stickynote.knob(\"selected\").setValue(True)\n    nuke.zoomToFitSelected()\n    stickynote.knob(\"selected\").setValue(False)\n\n\n\n\n\n"}
 addUserKnob {26 ""}
 addUserKnob {41 maskChannelMask l mask t "Enables the associated mask channel to the right. Disabling this checkbox is the same as setting the channel to none. \n\n\n\nThe channel to use as a mask. By default, the filter effect is limited to the non-black areas of this channel." T Merge2.maskChannelMask}
 addUserKnob {6 inject t "Copies the mask input to the predefined mask.a channel. Injecting the mask allows you to use the same mask further downstream." -STARTLINE}
 addUserKnob {6 invert t "Inverts the use of the mask channel, so that the merge is limited to the non-white areas of the mask.\n" -STARTLINE}
 addUserKnob {6 fringe t "When enabled, only apply the effect to the edge of the mask. \nWhen disabled, the effect is applied to the entire mask." -STARTLINE}
 addUserKnob {7 mix t "Dissolves between the original image at 0 and the full effect at 1."}
 mix 1
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Binary Buddy</font><font color=#747474> v1.1"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "overview of the node" +STARTLINE T "<br><strong>•</br><b> Binary Buddy</b> applies a operator or<br>two with a threshold, getting applied to<br>each pixel\n<br></b><i>\n<br><strong>•</br> \nIn mathematics and computer programming,<br>an operator is a character that represents a<br>specific mathematical or logical action or process.\n</i></i>\n<br><br><b>\n<a href=\"https://johntothvfx.com\" style=\"color:#777;\">John Toth <b>© 2016 <br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">Tool Demo</a>\n" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message(\"Coming Soon\")" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\nversion_number = \"1.1.1\"\ncontext = \"Color/Math\"\nmodified_date = \"7th February 2024\"\ndeveloper = \"John Toth © 2016\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- applies an operator with a threshold to every pixel.\n<br></i><b> v 1.1 </b><i>\n- hardalpha has been renamed to binarybuddy\n- channels was added\n- operators with threshold values has been added\n- presets added\n- export options added\n\"\"\"\nthank_you = \"\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    #f\"<b>Thank You:</b><br>\{thank_you\}<br>\{enter\}\"\n    f\"\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)\n"}
}
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x23232301
  label "<center>Don't Touch\n\n"
  note_font "Source Code Pro Light"
  note_font_size 40
  note_font_color 0xee453cff
  xpos -244
  ypos -1392
  bdwidth 185
  bdheight 288
 }
 Input {
  inputs 0
  name mask
  label "\[value number]"
  xpos -370
  ypos -1432
  number 1
 }
 Dot {
  name Dot5
  note_font_size 35
  note_font_color 0xffffff
  xpos -336
  ypos -1086
 }
 Input {
  inputs 0
  name Input
  label "\[value number]"
  xpos -538
  ypos -1432
 }
 Dot {
  name Dot1
  note_font_size 35
  note_font_color 0xffffff
  xpos -504
  ypos -1326
 }
set N1c098a00 [stack 0]
 Dot {
  name Dot6
  note_font_size 35
  note_font_color 0xffffff
  xpos -666
  ypos -1326
 }
 Shuffle {
  in {{{parent.Merge2.Achannels}}}
  name Shuffle4
  label "<b>\[value in]</b> &rarr; \[value Merge2.Achannels]"
  xpos -700
  ypos -1292
 }
 Expression {
  expr0 "parent.add ? r \[value parent.math01] parent.value01 && r \[value parent.math02] parent.value02 :  r \[value math01] parent.value01"
  expr1 "parent.add ? g \[value parent.math01] parent.value01 && g \[value parent.math02] parent.value02 :  g \[value math01] parent.value01"
  expr2 "parent.add ? b \[value parent.math01] parent.value01 && b \[value parent.math02] parent.value02 :  b \[value math01] parent.value01"
  channel3 {-rgba.red -rgba.green -rgba.blue rgba.alpha}
  expr3 "parent.add ? a \[value parent.math01] parent.value01 && a \[value parent.math02] parent.value02 :  a \[value math01] parent.value01"
  name Expression
  label binary
  xpos -700
  ypos -1216
 }
 Shuffle {
  out {{{parent.Merge2.Achannels}}}
  name Shuffle2
  label "<b>\[value in]</b> &rarr; \[value Merge2.Achannels]"
  xpos -700
  ypos -1148
 }
 Dot {
  name Dot3
  note_font_size 35
  note_font_color 0xffffff
  xpos -666
  ypos -1086
 }
push $N1c098a00
 Merge2 {
  inputs 2+1
  operation copy
  Achannels alpha
  Bchannels none
  output {{{Achannels}}}
  inject {{parent.inject}}
  invert_mask {{parent.invert}}
  fringe {{parent.fringe}}
  mix {{parent.mix}}
  name Merge2
  label "mix: \[value mix] (\[value bbox])"
  xpos -538
  ypos -1102
 }
 Output {
  name Output1
  xpos -538
  ypos -946
 }
 NoOp {
  inputs 0
  name Menu
  knobChanged "grp = nuke.thisGroup()\ntk = nuke.thisKnob()\n\nif tk.name() == \"add\" and tk.value() == True:\n    grp.knob('math02').setEnabled(True)\n    grp.knob('value02').setEnabled(True)\nelse:\n    grp.knob('math02').setEnabled(False)\n    grp.knob('value02').setEnabled(False)"
  label "Do Not Touch"
  xpos -192
  ypos -1240
  addUserKnob {20 menu l Menu}
  addUserKnob {6 add +STARTLINE}
 }
 NoOp {
  inputs 0
  name Menu1
  knobChanged "n = nuke.thisGroup()\nindex = n.knob('presets').getValue()\n\n\n\n\n#########################################################\ndef default():\n\n            n\[\"math01\"].setValue(5)\n            n\[\"value01\"].setValue(0.5)\n            int(n\[\"add\"].setValue(0))\n            n\[\"math02\"].setValue(0)\n            n\[\"math02\"].setEnabled(False)\n            n\[\"value02\"].setValue(0)\n            n\[\"value02\"].setEnabled(False)\n\n#########################################################\n#reset\nif index == 0:\n            default()\n\n#########################################################\n#reset\nif index == 1:\n            default()\n\n            n\[\"math01\"].setValue(5)\n            n\[\"value01\"].setValue(0)\n            int(n\[\"add\"].setValue(0))\n            n\[\"math02\"].setValue(0)\n            n\[\"math02\"].setEnabled(False)\n            n\[\"value02\"].setValue(0)\n            n\[\"value02\"].setEnabled(False)\n\n#########################################################\n#reset\nif index == 2:\n            default()\n\n            n\[\"math01\"].setValue(5)\n            n\[\"value01\"].setValue(0.99999)\n            int(n\[\"add\"].setValue(0))\n            n\[\"math02\"].setValue(0)\n            n\[\"math02\"].setEnabled(False)\n            n\[\"value02\"].setValue(0)\n            n\[\"value02\"].setEnabled(False)\n\n#########################################################\n#reset\nif index == 3:\n            default()\n\n            n\[\"math01\"].setValue(5)\n            n\[\"value01\"].setValue(0)\n            int(n\[\"add\"].setValue(1))\n            n\[\"math02\"].setValue(0)\n            n\[\"math02\"].setEnabled(True)\n            n\[\"value02\"].setValue(1)\n            n\[\"value02\"].setEnabled(True)"
  label Presets
  xpos -190
  ypos -1168
  addUserKnob {20 User}
  addUserKnob {4 presets t "<b>• default:</b> resets all knobs to original stat\n<b>• alpha to 1:</b> any pixel above the value of 0 will become 1 in the alpha channel.\n<b>• core alpha to 1:</b> any pixel a value of 1 will be kept, anything below 1 will be made 0.\n<b>• transparent alpha to 1:</b> any pixel higher then 0.0001 and below 1 will be made 1, everything else will be made 0." M {default "alpha to 1" "core alpha to 1" "transparent alpha to 1" "" "" "" "" "" "" "" "" "" "" ""}}
 }
end_group
