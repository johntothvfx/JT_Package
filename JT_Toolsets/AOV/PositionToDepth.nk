Group {
 inputs 2
 name PositionToDepth1
 help "Generates a depth pass using the position information."
 onCreate "n = nuke.thisNode()\n\nif n.knob('usePositionAlpha').value() == 1:    \n    n\['antialiasing'].setEnabled(False)\nelse:\n    n\['antialiasing'].setEnabled(True)"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\n\n\nif k.name() == 'inputChange':\n    classList = \['Camera','Camera2','Camera3','Axis','Axis2','Axis3','Group','Light','Light2','Light3','Light4','DirectLight','Spotlight','Environment','Gizmo','NoOp','Dot']\n\n    if n.input(1) is not None:\n        if n.input(1).Class() not in classList:\n           n.setInput(1, None)\n"
 tile_color 0x119911ff
 selected true
 addUserKnob {20 positionToDepth l "Position To Depth"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION PositionToDepth
 addUserKnob {1 output l INVISIBLE +INVISIBLE}
 output "\[expr \{\[numvalue depthOut] ? \"Z\" : \"1/z\" \}]"
 addUserKnob {41 channels t "Select your position channel that you want to use to generate a depth channel." T Shuffle1.in}
 addUserKnob {26 space001 l "" -STARTLINE T "   "}
 addUserKnob {4 positionInfo l "" t "Select what kind of position information you are using.\n\n<b>• World space</b> - is the coordinate system for the entire scene. Its origin is at the center of the scene. The grid you see in 3D is in the world space.\n\n<b>• Camera space</b> -  is the coordinate system from the camera's point of view.\n" -STARTLINE M {world camera "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {41 out l output t "The effect is rendered into these output channels. \nIf you set this to something other than none, you can use the checkboxes on the right to select individual channels." T Merge2.Achannels}
 addUserKnob {26 space002 l "" +STARTLINE T "\t"}
 addUserKnob {4 depthOut l depth t "The depth generated will be either:\n\n<b>• (1/z) Normalize depth</b> - values between 0-1. <br><i>it is Nuke's default format.</i>\n\n<b>• (Z) Real World Units</b> -  is distance from camera<br> <i>(e.g CG renders).</i>" M {"normalized (1/z)" "real world units (Z)" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 depthOut "real world units (Z)"
 addUserKnob {6 antialiasing l "antialiasing edge" t "This will give you a unpremultiplied depth output. \n\n<b>Note:</b> please be aware this is only for the edges." +STARTLINE}
 addUserKnob {41 usePositionAlpha l "use position as alpha" t "Set whether your input image has an alpha or not.\nWhen enabled, Position to Depth will use the selected position channel to generate an alpha channel to premultiply the result.\n\n<b>Note:</b> The antialisaing edge feature is disabled and is not taken into account.\n" T menu.usePositionAlpha}
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Position to Depth</font><font color=#119911> v1.1"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "overview of the node" +STARTLINE T "<br><strong>•</br> \n<b>Position to Depth</b> - generates a depth pass<br>using the position channel.</b>\n\n<br><br>\n<i>\n<b>• (1/z) Normalize depth</b> -\nvalues between 0-1, <br>it is Nuke's default format.\n<br>\n<b>• (Z) Real World Units</b> -  is distance from camera<br> (e.g CG renders).\n\n\n</i><br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#119911;\">John Toth <b>© 2020 <br>\n\n"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#119911\">Tool Demo</a>\n" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message(\"Coming Soon\")" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#119911\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\nversion_number = \"1.2.1\"\ncontext = \"AOV\"\n\n\ndate = \"30th January\"\nyear = \" 2024\"\n\ndeveloper = \"John Toth © 2020\"\nsite = \"<a href='https://johntothvfx.com'> <span style='color:#BBBBBB'>\"\n\n\n\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- generates a depth pass using the position data\n<br></i><b> v 1.1 </b><i>\n- user interface updated to match the package in this set\n- information tab was re-written\n- output channel was added\n- input world/camera space is now selectable\n- anti-aliasing was added for the edges\n\"\"\"\n\n\n\n\n\nthankyou = \"\"\"- Daniel Velikov for the help of the calculation of the conversion from position to depth\n\"\"\"\n\n\n\"\"\"Do not touch section below\"\"\"\nheader = \"Version Log:\"\nDLM = \"<b>Date Last Modified: </b>\" + date + year\n\nSPACE = \" \"\nENTER = \"<br><br>\"\nUPPER = \"<b>\"\nLOWER = \"</b>\"\n\n\n\nnuke.message(UPPER + header + ENTER + \"Name: \" + LOWER + name + \"<br>\" + UPPER + \"Version Number: \" + LOWER + version_number + \"<br>\" + UPPER + \"Context: \" + LOWER + context + ENTER + DLM + log + \"</i>\" + \"<br>\" + \"<b>Thankyou:</b><br>\" + thankyou + \"<br>\" + UPPER + site + developer + ENTER + \"</a>\") \n\n\n"}
}
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x23232301
  label "<center>Don't Touch\n\n"
  note_font "Source Code Pro Light"
  note_font_size 40
  note_font_color 0xee453cff
  xpos 649
  ypos -183
  bdwidth 243
  bdheight 149
 }
 Input {
  inputs 0
  name Input
  label "\[value number]"
  xpos 290
  ypos -196
 }
 Dot {
  name Dot6
  note_font_size 35
  note_font_color 0xffffff
  xpos 324
  ypos -54
 }
set N3472f980 [stack 0]
 Dot {
  name Dot2
  xpos -186
  ypos -54
 }
 Shuffle {
  in none
  name Shuffle1
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos -220
  ypos -8
 }
 Dot {
  name Dot5
  note_font_size 35
  note_font_color 0xffffff
  xpos -186
  ypos 54
 }
set N3366dd50 [stack 0]
 Dot {
  name Dot4
  note_font_size 35
  note_font_color 0xffffff
  xpos -79
  ypos 54
 }
set N3473fac0 [stack 0]
 Dot {
  name Dot9
  note_font_size 35
  note_font_color 0xffffff
  xpos 38
  ypos 54
 }
 Expression {
  temp_name0 maxR
  temp_expr0 r==0?r:r/r
  temp_name1 maxG
  temp_expr1 g==0?g:g/g
  temp_name2 maxB
  temp_expr2 b==0?b:b/b
  channel0 {rgba.red -rgba.green -rgba.blue none}
  expr0 0
  expr1 0
  expr2 0
  expr3 max(maxR,maxG,maxB)
  name Expression11
  label "generate alpha of position"
  xpos 4
  ypos 488
 }
push $N3472f980
 Dot {
  name Dot7
  note_font_size 35
  note_font_color 0xffffff
  xpos 324
  ypos 498
 }
set N3369fcf0 [stack 0]
 Expression {
  expr3 "red == 0 && green == 0 && blue == 0 ? 0 : 1"
  name Expression3
  label "invert antialising alpha"
  xpos 180
  ypos 488
  disable {{parent.antialiasing}}
 }
 Dot {
  name Dot3
  note_font_size 35
  note_font_color 0xffffff
  xpos 214
  ypos 618
 }
 Switch {
  inputs 2
  which {{parent.menu.usePositionAlpha}}
  name Switch3
  xpos 4
  ypos 614
 }
 Dot {
  name Dot8
  note_font_size 35
  note_font_color 0xffffff
  xpos 38
  ypos 858
 }
push $N3366dd50
push $N3473fac0
 Expression {
  expr0 "Camera_INPUT.world_matrix.0 * r + Camera_INPUT.world_matrix.1 * g +Camera_INPUT.world_matrix.2 * b + Camera_INPUT.world_matrix.3 "
  expr1 "Camera_INPUT.world_matrix.4 * r + Camera_INPUT.world_matrix.5* g + Camera_INPUT.world_matrix.6 * b + Camera_INPUT.world_matrix.7"
  expr2 "Camera_INPUT.world_matrix.8 * r + Camera_INPUT.world_matrix.9 * g + Camera_INPUT.world_matrix.10 * b + Camera_INPUT.world_matrix.11"
  channel3 alpha
  expr3 "Camera_INPUT.world_matrix.12 * r + Camera_INPUT.world_matrix.13 * g + Camera_INPUT.world_matrix.14 * b + Camera_INPUT.world_matrix.15"
  name Expression13
  label "Camera to world conversion"
  selected true
  xpos -113
  ypos 128
 }
 Dot {
  name Dot1
  note_font_size 35
  note_font_color 0xffffff
  xpos -79
  ypos 210
 }
 Switch {
  inputs 2
  which {{!positionInfo}}
  name Switch2
  xpos -220
  ypos 206
 }
 Add {
  channels rgb
  value {{-Camera_INPUT.world_matrix.3} {-Camera_INPUT.world_matrix.7} {-Camera_INPUT.world_matrix.11} 0}
  name Add1
  xpos -220
  ypos 254
 }
 ColorMatrix {
  matrix {
      {{Camera_INPUT.world_matrix.0} {Camera_INPUT.world_matrix.1} {Camera_INPUT.world_matrix.2}}
      {{Camera_INPUT.world_matrix.4} {Camera_INPUT.world_matrix.5} {Camera_INPUT.world_matrix.6}}
      {{Camera_INPUT.world_matrix.8} {Camera_INPUT.world_matrix.9} {Camera_INPUT.world_matrix.10}}
    }
  invert true
  name ColorMatrix1
  xpos -220
  ypos 302
 }
 Multiply {
  channels {-rgba.red -rgba.green rgba.blue none}
  value -1
  name Multiply1
  xpos -220
  ypos 350
 }
 Expression {
  channel0 rgb
  expr0 blue
  channel1 none
  channel2 none
  name Expression5
  label "position to depth \n(cam)"
  xpos -220
  ypos 434
 }
 Expression {
  channel0 rgb
  expr0 1/r
  channel1 none
  channel2 none
  name Expression1
  label "1/z conversion"
  xpos -220
  ypos 488
  disable {{parent.depthOut}}
 }
 Copy {
  inputs 2
  from0 -rgba.alpha
  to0 -rgba.alpha
  channels alpha
  name Copy1
  xpos -220
  ypos 842
 }
 Premult {
  name Premult1
  xpos -220
  ypos 892
 }
 Expression {
  expr0 "isinf(r) || isnan(r) ? 0 : r"
  expr1 "isinf(g) || isnan(g) ? 0 : g"
  expr2 "isinf(b) || isnan(b) ? 0 : b"
  channel3 alpha
  expr3 "isinf(a) || isnan(a) ? 0 : a"
  name Expression4
  label "infinity/nan To Black"
  xpos -220
  ypos 968
 }
 Shuffle {
  green red
  blue red
  alpha red
  out {{{parent.Merge2.Achannels}}}
  name Shuffle2
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos -220
  ypos 1108
 }
push $N3369fcf0
 Merge2 {
  inputs 2
  operation copy
  Achannels rgb
  Bchannels none
  output {{{Achannels}}}
  name Merge2
  label "mix: \[value mix] (\[value bbox])"
  xpos 290
  ypos 1106
  disable {{"\[string match -nocase \"none\" \[value Shuffle1.in] ] ? 1 : 0"}}
 }
 Output {
  name Output1
  xpos 290
  ypos 1274
 }
 Input {
  inputs 0
  name camera
  label "\[value number]"
  xpos 510
  ypos -196
  number 1
 }
 Axis2 {
  display off
  selectable false
  name Camera_INPUT
  tile_color 0xffff
  xpos 520
  ypos -90
  addUserKnob {20 User}
  addUserKnob {7 focal}
  focal {{"\[exists parent.input1] > 1 ? 0 : \[value \[topnode parent.input1].focal] "}}
  addUserKnob {7 haperture}
  haperture {{"\[exists parent.input1] > 1 ? 0 : \[value \[topnode parent.input1].haperture]"}}
  addUserKnob {26 ""}
  addUserKnob {7 winroll}
  winroll {{"\[exists parent.input1] > 1 ? 0 : \[value \[topnode parent.input1].winroll]"}}
  addUserKnob {30 wintranslate}
  wintranslate {{"\[exists parent.input1] > 1 ? 0 : \[value \[topnode parent.input1].win_translate.u]"} {"\[exists parent.input1] > 1 ? 0 : \[value \[topnode parent.input1].win_translate.v]"}}
  addUserKnob {30 winscale}
  winscale {{"\[exists parent.input1] > 1 ? 0 : \[value \[topnode parent.input1].win_scale.u]"} {"\[exists parent.input1] > 1 ? 0 : \[value \[topnode parent.input1].win_scale.v]"}}
 }
 NoOp {
  inputs 0
  name menu
  knobChanged "grp = nuke.thisGroup()\ntk = nuke.thisKnob()\n\nif tk.name() == \"usePositionAlpha\" and tk.value() == True:\n    grp.knob('antialiasing').setEnabled(False)\nelse:\n    grp.knob('antialiasing').setEnabled(True)\n"
  xpos 730
  ypos -94
  addUserKnob {20 User}
  addUserKnob {6 usePositionAlpha l "use position as alpha" t "Set whether your input image has an alpha or not.\nWhen enabled, Depth to Deep will use the selected depth channel to generate an alpha channel\n" +STARTLINE}
 }
end_group
