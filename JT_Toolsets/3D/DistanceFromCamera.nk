Group {
 name DistanceFromCamera1
 help "Extracts the distance value between 2 points in 3D space, otherwise known as Depth or Z."
 onCreate "import nuke\n\nclass KnobSwitcher:\n    def __init__(self, node):\n        self.node = node\n        self.switch_labels = \[\"calculate using translate\", \"calculate using world matrix\"]\n        self.expressions = \[\n            '''operation ? 1 / sqrt(pow(target_axis.world_matrix.3 - cam_axis.world_matrix.3, 2) + pow(target_axis.world_matrix.7 - cam_axis.world_matrix.7, 2) + pow(target_axis.world_matrix.11 - cam_axis.world_matrix.11, 2)) : sqrt(pow(target_axis.world_matrix.3 - cam_axis.world_matrix.3, 2) + pow(target_axis.world_matrix.7 - cam_axis.world_matrix.7, 2) + pow(target_axis.world_matrix.11 - cam_axis.world_matrix.11, 2))''',\n            '''operation ? 1 / sqrt(pow(input0.translate.x - input1.translate.x, 2) + pow(input0.translate.y - input1.translate.y, 2) + pow(input0.translate.z - input1.translate.z, 2)) : sqrt(pow(input0.translate.x - input1.translate.x, 2) + pow(input0.translate.y - input1.translate.y, 2) + pow(input0.translate.z - input1.translate.z, 2))'''\n        ]\n\n    def switch(self):\n        # Get the Group node itself\n        knob = nuke.thisKnob()\n        node = nuke.thisNode()\n        \n        nodeLabel = knob.label()\n        mode = int(nodeLabel == self.switch_labels\[0])\n        \n        # Set the knob label\n        new_label = self.switch_labels\[mode]\n        if node.knob('label').value().strip() != new_label:\n            knob.setLabel(new_label)\n        \n        # Toggle the expression\n        depth_knob = node.knob('depth')\n        current_expression = depth_knob.getValue()\n        new_expression = self.expressions\[mode]\n        if current_expression != new_expression:\n            depth_knob.setExpression(new_expression)\n        \n        # Update the Group node's label\n        current_label = node.knob('label').value().strip()\n        if mode == 0:\n            # Ensure \"(World Matrix)\" is added only once\n            if not current_label.startswith(\"(World Matrix)\"):\n                new_label = f\"(World Matrix)\\n\{current_label\}\" if current_label else \"(World Matrix)\"\n                if current_label != new_label:\n                    node.knob('label').setValue(new_label)\n        else:\n            # Remove \"(World Matrix)\" if it is at the beginning\n            if current_label.startswith(\"(World Matrix)\"):\n                # Remove \"(World Matrix)\" and any leading newline if it was present\n                new_label = current_label\[len(\"(World Matrix)\"):].lstrip('\\n').strip()\n                if current_label != new_label:\n                    node.knob('label').setValue(new_label)"
 knobChanged "k = nuke.thisKnob()\nn = nuke.thisNode()\n\nif k.name() == 'inputChange':\n    # Define allowed classes and numbered variations\n    base_classes = \['Camera', 'Axis', 'DirectLight', 'SpotLight', 'PointLight', 'Environment', 'EnvironmentLight']\n    allowed_classes = set(base_classes + \[f'\{bc\}\{i\}' for bc in base_classes for i in range(1, 11)] + \['Group', 'NoOp', 'Gizmo', 'Dot'])\n    \n    # Check and filter inputs\n    for i in range(2):\n        input_node = n.input(i)\n        if input_node and input_node.Class() not in allowed_classes:\n            n.setInput(i, None)\n"
 tile_color 0x9c0000ff
 label "(World Matrix)"
 selected true
 addUserKnob {20 DistancefromCameraTab l "Distance From Camera"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION DistanceFromCamera
 addUserKnob {4 operation l math t "\n• Z <i>(Real World Units)</i> -  is distance from camera<br> (e.g CG renders).\n\n•  (1/z) <i>Normalize depth</i>\nvalues between 0-1,it is Nuke's default format.\n" M {Z 1/z "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {22 switch l "calculate using translate" t "Toggle Functionality:\n\n<b>World Matrix Mode:</b> When the node is set to use the world matrix, the label will display \"(World Matrix)\" for better clarity and visibility. This mode uses the world matrix for calculations, which is beneficial when multiple axis nodes are interacting with each other. The world matrix provides accurate results in such complex scenarios.\n\n<b>Translate Mode:</b> When the node is not set to world matrix, it defaults to using translation values for calculations. This mode is simpler and may be sufficient for less complex setups." -STARTLINE T "KnobSwitcher(nuke.thisNode()).switch()\n"}
 addUserKnob {41 depth t "Calculates the distance between two points\n" T Math.depth}
 addUserKnob {7 offset t "Offset the calculated value between the 2 points" R -100 100}
 addUserKnob {26 ""}
 addUserKnob {7 result l <b>result t "Output result based on the settings above."}
 result {{"depth  + offset"}}
 addUserKnob {20 info l Info}
 addUserKnob {26 versions l "" t "Node version info, for more information look at version log" +STARTLINE T "<br><font size='5'>Distance From Camera </font><font color=#CD0000> v1.3"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "Overview of the node" +STARTLINE T "<br><strong>•</br> <b>Distance From Camera</b> calculates the<br> distance between two points.\n\n\n</i><br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#CD0000;\">John Toth <b>© 2018 <br>\n\n"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#CD0000\">Tool Demo" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message('coming soon')" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#CD0000\">Version Log</a>\n" t "Contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "version_number = \"1.3.2\"\ncontext = \"3D\"\nmodified_date = \"30th July 2024\"\ndeveloper = \"John Toth © 2018\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- calculates the distance between 2 points in 3d space\n<br></i><b> v 1.1 </b><i>\n- offset was added\n- normalized & real world unit calculation was added\n<br></i><b> v 1.2 </b><i>\n- inputs only accept correct nodes\n<br></i><b> v 1.3 </b><i>\n- switch calculation based on translate/rotate/scale or world matrix was added\n\"\"\"\nthank_you = '''special thanks for Ben Dickson with the math calculation '''\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    f\"<b>Thank You:</b><br>\{thank_you\}<br>\{enter\}\"\n    f\"\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)"}
}
 Input {
  inputs 0
  name axis
  label "\[value number]"
  xpos -260
  ypos 38
 }
 Axis2 {
  name target_axis
  xpos -250
  ypos 114
 }
 Input {
  inputs 0
  name camera
  knobChanged "\n"
  label "\[value number]"
  xpos -40
  ypos 39
  number 1
 }
 Axis2 {
  name cam_axis
  xpos -30
  ypos 114
 }
 NoOp {
  inputs 0
  name Math
  onCreate "n = nuke.thisNode()\nk = 'depth'\nt = nuke.thisKnob()\nflag = nuke.NO_ANIMATION\n\n#n.knob(k).setFlag(flag)"
  xpos -150
  ypos 231
  addUserKnob {20 User}
  addUserKnob {7 depth t "Calculates the distance between two points.\n"}
  depth {{"operation ? 1 / sqrt(pow(target_axis.world_matrix.3 - cam_axis.world_matrix.3, 2) + pow(target_axis.world_matrix.7 - cam_axis.world_matrix.7, 2) + pow(target_axis.world_matrix.11 - cam_axis.world_matrix.11, 2)) : sqrt(pow(target_axis.world_matrix.3 - cam_axis.world_matrix.3, 2) + pow(target_axis.world_matrix.7 - cam_axis.world_matrix.7, 2) + pow(target_axis.world_matrix.11 - cam_axis.world_matrix.11, 2))"}}
 }
 Output {
  name Output1
  xpos -150
  ypos 327
 }
end_group
