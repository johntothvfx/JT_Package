Group {
 name LensFlareInfo1
 help "Index of data to create a lens flare."
 onCreate "n = nuke.thisNode()\nk = nuke.thisKnob()\nflag = nuke.INVISIBLE\n\n\nif n.knob('useBackgroundFormat').value() == 1:    \n    n\['format'].setEnabled(False)\nelse:\n    n\['format'].setEnabled(True)\n\n\nif n.knob('onCreateCenter').value() == 0:\n    try:\n        selected_nodes = nuke.selectedNodes()\n        if selected_nodes:\n            nuke.thisNode().knob('centerButton').execute()\n            \n        else:\n            nuke.thisNode().knob('centerButton').execute()\n            nuke.thisNode().knob('onCreateCenter').setValue(1)\n            nuke.thisNode().knob('onCreateCenter').setFlag(flag)\n    except: pass"
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\nclassList = \['NoOp', 'Group', 'Dot', 'Gizmo']\ndeniedList = \[]\n\nif k.name() == 'inputChange':\n    # Check input 1\n    in1_class = n.input(1).Class() if n.input(1) else None\n    if in1_class is not None:\n        if 'Camera' not in in1_class and in1_class not in classList:\n            n.setInput(1, None)\n        elif in1_class in deniedList:\n            n.setInput(1, None)\n\n    # Check input 2\n    in2_class = n.input(2).Class() if n.input(2) else None\n    if in2_class is not None:\n        if 'Axis' not in in2_class and in2_class not in classList:\n            n.setInput(2, None)\n        elif in2_class in deniedList:\n            n.setInput(2, None)\n"
 tile_color 0x5d48a1ff
 selected true
 addUserKnob {20 lensFlareInfo l "Lens Flare Info"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION LensFlareInfo
 addUserKnob {1 output l INVISIBLE +INVISIBLE}
 output "\[value mode]"
 addUserKnob {41 useBackgroundFormat l "use background format" t "Will use Input background image for format data." T Constant1.useBackgroundFormat}
 addUserKnob {41 format t "Output format will be based on selected format." T Constant1.format}
 addUserKnob {26 ""}
 addUserKnob {41 mode t "<b>• 2D:</b> you will be able to move a picker around to set the location of the flare source position\n\n<b>• 3D:</b> The position of the flare source will be determined based on a axis and camera and the relative distance and scale between them." T Controller.mode}
 addUserKnob {26 ""}
 addUserKnob {12 position}
 addUserKnob {12 center t "How the flare will react to the image based on the movement of the camera.\n\nBy default this should be center"}
 center {1078 1136}
 addUserKnob {22 centerButton l center -STARTLINE T "n = nuke.thisNode()\n\nn\['center'].setValue((n.width() * 0.5, n.height() * 0.5))\n\n"}
 addUserKnob {6 onCreateCenter l INVISIBLE -STARTLINE +INVISIBLE}
 addUserKnob {7 aspect_ratio l "aspect ratio" t "Sets the pixel aspect ratio for the output frame." R 0 2}
 aspect_ratio 1
 addUserKnob {26 ""}
 addUserKnob {14 overscan t "The number of pixels to be rendered beyond left/right and top/bottom of image" R 0 100}
 addUserKnob {26 ""}
 addUserKnob {20 math l Math}
 addUserKnob {12 offset t "Offset the lens flare\n" +INVISIBLE}
 addUserKnob {26 worldScaleTitle l "<b>World Scale</b>"}
 addUserKnob {4 worldScale l "world scale" t "Size of the world that the calculations are done by." +DISABLED M {millimeter centimeter decimeter meter kilometer "" "" "" "" "" "" "" "" "" "" ""}}
 worldScale decimeter
 addUserKnob {26 ""}
 addUserKnob {26 warning l "" +STARTLINE T "<font color=#747474><b> Warning </b>\n<br>\n<font color=#747474><br><strong>•</br></b> If unsure about the worldscale please<br>leave it as decimeters to be safe."}
 addUserKnob {26 ""}
 addUserKnob {20 parent l Parent}
 addUserKnob {41 node t " when this node is set to 3D :\n\n<b>• input:</b> Cam and Axis inputs will be created. The data will be gathered from inputs.\n<b>• parent:</b> data will be gathered based on the names of the camera and axis knobs." T Controller.node}
 addUserKnob {26 "" +DISABLED}
 addUserKnob {1 cameraName l camera t "Name of camera" +DISABLED}
 addUserKnob {22 grabCameraName l "grab name" t "Selected camera name will be filled into the camera knob." -STARTLINE T "node = nuke.thisNode()\nparentKnob = node.knob('cameraName')\n\nwith nuke.thisParent():\n    selection = nuke.selectedNodes()\n    if selection:\n        selectedNode = selection\[0]\n        if 'Camera' in selectedNode.Class() or 'Axis' in selectedNode.Class():\n            if selectedNode != node:\n                parentKnob.setValue(selectedNode.name())\n        else:\n            nuke.message('Selected node is not a camera or axis')\n    else:\n        nuke.message('No node selected')\n"}
 addUserKnob {22 findParentCamera l find t "Zooms in the node that the camera knob has written.\n\n<b><i>Example:</b><i> If the string path has Camera1 in it when this button is pressed it will find Camera1 in the nodegraph and zoom into it." -STARTLINE T "n = nuke.thisNode()\n\n#make functions available\nn.knob(\"parentMessageCamera\").execute()\n\nparentName = nuke.thisNode().knob('cameraName').value()\n\nwith nuke.thisParent():\n    FindParent(parentName)"}
 addUserKnob {22 clearCamera l clear t "Clears the camera name " -STARTLINE T "nuke.thisNode().knob(\"cameraName\").setValue(\"\")\n\n\n\n"}
 addUserKnob {22 parentMessageCamera l INVISIBLE -STARTLINE +INVISIBLE T "def FindParent(parentName):\n    \"\"\"\n    Jump to node in the nodegraph \n    \"\"\"\n    \n    if not parentName:\n        nuke.message('No Camera Name Found')\n        return\n        \n    parentNode = nuke.toNode(parentName)\n    if not parentNode:\n        nuke.message('No node named \{\}'.format(parentName))\n        return\n        \n    nuke.zoom( 2, \[parentNode.xpos(), parentNode.ypos()])"}
 addUserKnob {1 axisName l axis t "Name of axis" +DISABLED}
 addUserKnob {22 grabAxisName l "grab name" t "Selected axis name will be filled into the axis knob." -STARTLINE T "node = nuke.thisNode()\nparentKnob = node.knob('axisName')\n\nwith nuke.thisParent():\n    selection = nuke.selectedNodes()\n    if selection:\n        selectedNode = selection\[0]\n        if 'Camera' in selectedNode.Class() or 'Axis' in selectedNode.Class():\n            if selectedNode != node:\n                parentKnob.setValue(selectedNode.name())\n        else:\n            nuke.message('Selected node is not a camera or axis')\n    else:\n        nuke.message('No node selected')\n"}
 addUserKnob {22 findAxis l Find t "Zooms in the node that the axis knob has written.\n\n<b><i>Example:</b><i> If the string path has Axis1 in it when this button is pressed it will find Axis1 in the nodegraph and zoom into it." -STARTLINE T "n = nuke.thisNode()\n\n#make functions available\nn.knob(\"parentMessageAxis\").execute()\n\nparentName = nuke.thisNode().knob('axisName').value()\n\nwith nuke.thisParent():\n    FindParent(parentName)"}
 addUserKnob {22 clearAxis l clear t "Clears the axis knob " -STARTLINE T "nuke.thisNode().knob(\"axisName\").setValue(\"\")\n\n\n\n"}
 addUserKnob {22 parentMessageAxis l INVISIBLE -STARTLINE +INVISIBLE T "def FindParent(parentName):\n    \"\"\"\n    Jump to node in the nodegraph \n    \"\"\"\n    \n    if not parentName:\n        nuke.message('No Axis Name Found')\n        return\n        \n    parentNode = nuke.toNode(parentName)\n    if not parentNode:\n        nuke.message('No node named \{\}'.format(parentName))\n        return\n        \n    nuke.zoom( 2, \[parentNode.xpos(), parentNode.ypos()])"}
 addUserKnob {20 exports l Exports}
 addUserKnob {4 flareNodes l export t "Node type to export" M {"Lens Flare Sun" "" "" "" ""}}
 addUserKnob {22 exportNodes l export t "Exports nodes" -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {41 presets T Controller.presets}
 addUserKnob {4 spherical l "" -STARTLINE M {"preset 001" "preset 002" "preset 003" "" ""}}
 addUserKnob {4 anamorphic l "" -STARTLINE +HIDDEN M {"preset 001" "preset 002" "preset 003" "" ""}}
 addUserKnob {22 exportPreset l export -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 Exportation l "" +STARTLINE T "<font color=#747474><b> Warning </b>\n<br>\n<font color=#747474><br><strong>•</br></b>Lens Flare nodes exports/presets are being developed\n<br>"}
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Lens Flare Info</font><font color=#8A7EBB> v1.0"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "overview of the node" +STARTLINE T "<br><strong>•</br><b>Lens Flare Info</b> is the index of gathered<br>data to be used to build a lens flare.\n<br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#8A7EBB;\">John Toth <b>© 2023 <br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#8A7EBB\">Tool Demo</a>\n" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message(\"Coming Soon\")" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#8A7EBB\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\nversion_number = \"1.1.0\"\ncontext = \"Optical\"\n\n\ndate = \"9th February\"\nyear = \" 2024\"\n\ndeveloper = \"John Toth © 2023\"\nsite = \"<a href='https://johntothvfx.com'> <span style='color:#BBBBBB'>\"\n\n\n\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- gathers data to create a lens flare\n\"\"\"\n\n\n\nthankyou = \"\"\"\n\"\"\"\n\n\n\"\"\"Do not touch section below\"\"\"\nheader = \"Version Log:\"\nDLM = \"<b>Date Last Modified: </b>\" + date + year\n\nSPACE = \" \"\nENTER = \"<br><br>\"\nUPPER = \"<b>\"\nLOWER = \"</b>\"\n\n\n\nnuke.message(UPPER + header + ENTER + \"Name: \" + LOWER + name + \"<br>\" + UPPER + \"Version Number: \" + LOWER + version_number + \"<br>\" + UPPER + \"Context: \" + LOWER + context + ENTER + DLM + log + \"</i>\" + \"<br>\" + UPPER + site + developer + \"</a>\") \n\n\n"}
}
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x23232301
  label "<center>Don't Touch\n\n"
  note_font "Source Code Pro Light"
  note_font_size 24
  note_font_color 0xee453cff
  xpos 9026
  ypos -877
  bdwidth 209
  bdheight 265
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0xe8912ff
  label "<center>worldspace calculation"
  note_font "Source Code Pro Light"
  note_font_size 24
  note_font_color 0xee453cff
  xpos 8685
  ypos -1393
  border_width 15
  bookmark false
  bdwidth 230
  bdheight 242
  addUserKnob {20 "Backdrop Settings"}
  addUserKnob {3 padding l Padding}
  padding 75
  addUserKnob {22 snap l "Snap to selected nodes" -STARTLINE T "this = nuke.thisNode()\nselNodes = nuke.selectedNodes()\npadding = this.knob('padding').value()\nif len(selNodes)== 0:\n\tpass\nelse:\n\tbdX = min(\[node.xpos() for node in selNodes]) - padding\n\tbdY = min(\[node.ypos() for node in selNodes]) - padding - 60\n\tbdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) + padding\n\tbdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) + padding\n\tthis.knob('xpos').setValue(bdX)\n\tthis.knob('ypos').setValue(bdY)\n\tthis.knob('bdwidth').setValue(bdW-bdX)\n\tthis.knob('bdheight').setValue(bdH-bdY)"}
 }
 BackdropNode {
  inputs 0
  name BackdropNode4
  tile_color 0x777777ff
  label <center>format
  note_font "Source Code Pro Light"
  note_font_size 24
  note_font_color 0xee453cff
  xpos 9095
  ypos -1689
  border_width 15
  bookmark false
  bdwidth 290
  bdheight 305
  addUserKnob {20 "Backdrop Settings"}
  addUserKnob {3 padding l Padding}
  padding 50
  addUserKnob {22 snap l "Snap to selected nodes" -STARTLINE T "this = nuke.thisNode()\nselNodes = nuke.selectedNodes()\npadding = this.knob('padding').value()\nif len(selNodes)== 0:\n\tpass\nelse:\n\tbdX = min(\[node.xpos() for node in selNodes]) - padding\n\tbdY = min(\[node.ypos() for node in selNodes]) - padding - 60\n\tbdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) + padding\n\tbdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) + padding\n\tthis.knob('xpos').setValue(bdX)\n\tthis.knob('ypos').setValue(bdY)\n\tthis.knob('bdwidth').setValue(bdW-bdX)\n\tthis.knob('bdheight').setValue(bdH-bdY)"}
 }
 Axis {
  inputs 0
  display off
  selectable false
  translate {{"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].translate.x] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].translate.y] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].translate.z] : 0"}}
  rotate {{"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].rotate.x] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].rotate.y] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].rotate.z] : 0"}}
  scaling {{"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].scaling.x] : 1"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].scaling.y] : 1"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].scaling.z] : 1"}}
  uniform_scale {{"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].uniform_scale] : 1"}}
  skew {{"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].skew.x] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].skew.y] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].skew.z] : 0"}}
  pivot_translate {{"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].pivot.x] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].pivot.y] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].pivot.z] : 0"}}
  useMatrix true
  matrix {
      {{"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 1"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 0"}}
      {{"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 1"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 0"}}
      {{"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 1"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 0"}}
      {{"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 0"} {"\[exists \[value topnode \[value axisName]]] > 0 ? \[value topnode \[value axisName].world_matrix] : 1"}}
    }
  name AxisTag1
  knobChanged "\nn = nuke.thisNode()\nk = nuke.thisKnob()\n\nif k.name() in ('method', 'showPanel'):\n    CONTROLS_type = n\['method'].value()\n    if CONTROLS_type == 'FrameHold':\n        n\['refFrame'].setVisible(True)\n        n\['setcurrentframe'].setVisible(True)\n\n    if CONTROLS_type == 'Animated':\n        n\['refFrame'].setVisible(False)\n        n\['setcurrentframe'].setVisible(False)\n\n\n"
  xpos 8330
  ypos -1830
  addUserKnob {20 parent}
  addUserKnob {1 axisName l "axis Tag"}
  axisName "\[value parent.axisName]"
  addUserKnob {3 refFrame l framehold t "This value will determine which frame the camera will be frozen on." +HIDDEN}
  refFrame 1001
  addUserKnob {22 setcurrentframe l "Set Current Frame" t "This will set the current frame you are on in the timeline to the framehold knob." -STARTLINE +HIDDEN T nuke.thisNode().knob('refFrame').setValue(nuke.frame())}
 }
 Camera {
  inputs 0
  display off
  selectable false
  translate {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].translate.x] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].translate.y] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].translate.z] : 0"}}
  rotate {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].rotate.x] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].rotate.y] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].rotate.z] : 0"}}
  scaling {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].scaling.x] : 1"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].scaling.y] : 1"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].scaling.z] : 1"}}
  uniform_scale {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].uniform_scale] : 1"}}
  skew {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].skew.x] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].skew.y] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].skew.z] : 0"}}
  pivot_translate {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].pivot.x] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].pivot.y] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].pivot.z] : 0"}}
  matrix {
      {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 1"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 0"}}
      {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 1"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 0"}}
      {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 1"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 0"}}
      {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].world_matrix] : 1"}}
    }
  focal {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].focal] : 50"}}
  haperture {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].haperture] : 24.576"}}
  vaperture {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].vaperture] : 18.672"}}
  near {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].near] : 0.1"}}
  far {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].far] : 10000"}}
  win_translate {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].win_translate.u] : 0"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].win_translate.v] : 0"}}
  win_scale {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].win_scale.u] : 1"} {"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].win_scale.v] : 1"}}
  winroll {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].winroll] : 0"}}
  focal_point {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].focal_point] : 2"}}
  fstop {{"\[exists \[value topnode \[value cameraName]]] > 0 ? \[value topnode \[value cameraName].fstop] : 16"}}
  name CameraTag1
  knobChanged "\nn = nuke.thisNode()\nk = nuke.thisKnob()\n\nif k.name() in ('method', 'showPanel'):\n    CONTROLS_type = n\['method'].value()\n    if CONTROLS_type == 'FrameHold':\n        n\['refFrame'].setVisible(True)\n        n\['setcurrentframe'].setVisible(True)\n\n    if CONTROLS_type == 'Animated':\n        n\['refFrame'].setVisible(False)\n        n\['setcurrentframe'].setVisible(False)\n\n\n"
  xpos 8660
  ypos -1830
  addUserKnob {20 CameraTagTab l "Camera Tag"}
  addUserKnob {1 cameraName l "Camera Tag"}
  cameraName "\[value parent.cameraName]"
  addUserKnob {3 refFrame l framehold t "This value will determine which frame the camera will be frozen on." +HIDDEN}
  refFrame 1001
  addUserKnob {22 setcurrentframe l "Set Current Frame" t "This will set the current frame you are on in the timeline to the framehold knob." -STARTLINE +HIDDEN T nuke.thisNode().knob('refFrame').setValue(nuke.frame())}
 }
 Constant {
  inputs 0
  channels rgb
  name Constant1
  knobChanged "grp = nuke.thisGroup()\ntk = nuke.thisKnob()\n\nif tk.name() == \"useBackgroundFormat\" and tk.value() == True:\n    grp.knob('format').setEnabled(False)\nelse:\n    grp.knob('format').setEnabled(True)\n"
  label "DO NOT TOUCH"
  xpos 9200
  ypos -1575
  addUserKnob {20 User}
  addUserKnob {6 useBackgroundFormat l "use background format" +STARTLINE}
  useBackgroundFormat true
 }
 Dot {
  name Dot10
  note_font_size 35
  note_font_color 0xffffff
  xpos 9234
  ypos -1446
 }
 Input {
  inputs 0
  name Input
  label "\[value number]"
  xpos 9090
  ypos -1912
 }
 NoOp {
  name image
  tile_color 0x777777ff
  label placeholder
  xpos 9090
  ypos -1816
 }
 Crop {
  box {0 0 {input.width} {input.height}}
  name Crop1
  xpos 9090
  ypos -1738
 }
 Switch {
  inputs 2
  which {{!parent.Constant1.useBackgroundFormat}}
  name Switch1
  xpos 9090
  ypos -1450
 }
 AdjBBox {
  numpixels {{"max( parent.overscan.w - 0 , 0)"} {"max( parent.overscan.h - 0 , 0)"}}
  name AdjBBox1
  xpos 9090
  ypos -1330
 }
 Dot {
  name Dot4
  note_font_size 35
  note_font_color 0xffffff
  xpos 9124
  ypos -1248
 }
set N160af810 [stack 0]
 Dot {
  name Dot3
  note_font_size 35
  note_font_color 0xffffff
  xpos 9124
  ypos -1014
 }
set N160b47f0 [stack 0]
 Dot {
  name Dot2
  note_font_size 35
  note_font_color 0xffffff
  xpos 8904
  ypos -1014
 }
 Remove {
  name Remove1
  label "\[if \{ \[lsearch \"rgb rgba\"  \[value channels]] != -1 \} \{ return \"(\[value channels])\n\" \} else \{ return \"\"\}]\[if \{ \[value channels2] != \"none\"\} \{return \"(\[value channels2])\"\} else \{return \" \"\}]\[if \{ \[value channels3] != \"none\"\} \{return \"\n(\[value channels3])\"\} else \{return \" \"\}]\[if \{ \[value channels4] != \"none\"\} \{return \"\n(\[value channels4])\"\} else \{return \" \"\}]"
  xpos 8870
  ypos -808
 }
 Text {
  cliptype none
  message "No Camera or Axis Found\n\n"
  font "\[python nuke.defaultFontPathname()]"
  size {{"(input.width + input.height)/50"}}
  leading 0.2
  xjustify center
  yjustify center
  box {{input.width/50} {box.x} {"input.width - box.x"} {"input.height - box.x"}}
  color {1 1 0 1}
  name Text1
  label "\[basename \[value font]]\n\nCam"
  note_font_color 0xffffffff
  xpos 8870
  ypos -700
 }
 Dot {
  name Dot1
  note_font_size 35
  note_font_color 0xffffff
  xpos 8904
  ypos -462
 }
push $N160b47f0
 NoOp {
  name Controller
  knobChanged "#John Toth\n\nnode = nuke.thisNode()\ngrp = nuke.thisGroup()\ntk = nuke.thisKnob()\n\n\n#############################################################\n#presets reveal knobs\n#############################################################\n\n#presets\nspherical = \['spherical']\nanamorphic = \['anamorphic']\n\n#presets     \nif tk.name() in ('presets', 'showPanel'):\n    CONTROLS_type = grp\['presets'].value()\n    if CONTROLS_type == 'spherical':\n        for i in spherical:\n            grp\[i].setVisible(True)\n        for i in anamorphic:\n            grp\[i].setVisible(False)\n                        \n    elif CONTROLS_type == 'anamorphic':\n        for i in spherical:\n            grp\[i].setVisible(False)\n        for i in anamorphic:\n            grp\[i].setVisible(True)\n\n\n\n\n#############################################################\n#list of knobs to reveal based on the mode\n#############################################################\n\nScreenSpace = \['position']\nWorldSpace = \[]\n\n\nif tk.name() in ('mode', 'showPanel'):\n    CONTROLS_type = grp\['mode'].value()\n    if CONTROLS_type == '2D':\n        for i in ScreenSpace:\n            grp\[i].setVisible(True)\n        for i in WorldSpace:\n            grp\[i].setVisible(False)\n            \n    elif CONTROLS_type == '3D':\n        for i in ScreenSpace:\n            grp\[i].setVisible(False)\n        for i in WorldSpace:\n            grp\[i].setVisible(True)\n\n\n#############################################################\n# Switch between modes and setup inputs/parents\n#############################################################\n\n\n# Check if the mode is set to 3D\nif node\['mode'].value() == '3D':\n\n    #disable undo\n    nuke.Undo.disabled()\n    \n    #list of knobs to disable\n    knobs = \['worldScale', 'cameraName', 'axisName']\n       \n    \n    if node\['node'].value() == 'input':\n\n        #safety making sure input 1 & 2 is disconnected before being deleted\n        grp.setInput(1, None)\n        grp.setInput(2, None)\n\n        #list of knobs to enable\n        for x in knobs:\n            nuke.thisGroup().knob(x).setEnabled(False)\n\n\n        # Loop through all Input nodes and delete those not named 'Input'\n        parent_group = nuke.thisNode().parent()\n        for node in parent_group.nodes():\n            if node.Class() == 'Input' and node.name() != 'Input':\n                nuke.delete(node)\n\n\n        #get camera placeholder connect\n        cameraPlaceHolder = nuke.toNode(\"CameraPlaceHolder\")\n    \n\n        # creating camera input\n        cameraInput = nuke.nodes.Input()\n        cameraInput.setName(\"Cam\")\n        cameraInput\['number'].setValue(1)\n        cameraInput.knob(\"label\").setValue(\"\[value number]\")\n        cameraInput.knob(\"xpos\").setValue(cameraPlaceHolder.knob(\"xpos\").value() + 0)\n        cameraInput.knob(\"ypos\").setValue(cameraPlaceHolder.knob(\"ypos\").value() - 95)\n \n        #connected camera placeholder to camera input      \n        cameraPlaceHolder.setInput(0, cameraInput)\n        #get axis placeholder connect\n        axisPlaceHolder = nuke.toNode(\"AxisPlaceHolder\")\n\n        # creating camera input\n        axisInput = nuke.nodes.Input()\n        axisInput.setName(\"axis\")\n        axisInput\['number'].setValue(2)\n        axisInput.knob(\"label\").setValue(\"\[value number]\")\n        axisInput.knob(\"xpos\").setValue(axisPlaceHolder.knob(\"xpos\").value() + 0)\n        axisInput.knob(\"ypos\").setValue(axisPlaceHolder.knob(\"ypos\").value() - 95)\n \n        #connected camera placeholder to camera input      \n        axisPlaceHolder.setInput(0, axisInput)\n\n        # Set input 1 and 2 of Reconcile3D1\n        reconcile = nuke.toNode('Reconcile3D1')\n        reconcile.setInput(1, cameraPlaceHolder)\n        reconcile.setInput(2, axisPlaceHolder)\n\n    else:\n\n        #list of knobs to enable\n        for x in knobs:\n            nuke.thisGroup().knob(x).setEnabled(True)\n        \n        #safety making sure input 1 & 2 is disconnected before being deleted\n        grp.setInput(1, None)\n        grp.setInput(2, None)         \n     \n        # Loop through all Input nodes and delete those not named 'Input'\n        parent_group = nuke.thisNode().parent()\n        for node in parent_group.nodes():\n            if node.Class() == 'Input' and node.name() != 'Input':\n                nuke.delete(node)\n\n        # Set input 1 and 2 of Reconcile3D1\n        reconcile = nuke.toNode('Reconcile3D1')\n        cameraTag = nuke.toNode('CameraTag1')\n        axisTag = nuke.toNode('AxisTag1')\n        reconcile.setInput(1, cameraTag)\n        reconcile.setInput(2, axisTag)\n\nelif node\['mode'].value() == '2D':\n \n        #safety making sure input 1 & 2 is disconnected before being deleted\n        grp.setInput(1, None)\n        grp.setInput(2, None) \n        \n        # Loop through all Input nodes and delete those not named 'Input'\n        parent_group = nuke.thisNode().parent()\n        for node in parent_group.nodes():\n            if node.Class() == 'Input' and node.name() != 'Input':\n                nuke.delete(node)\n\n        #list of knobs to enable\n        for x in knobs:\n            nuke.thisGroup().knob(x).setEnabled(False)                \n            \n    #enable undo\nnuke.Undo.enable()"
  selected true
  xpos 9090
  ypos -778
  addUserKnob {20 menu}
  addUserKnob {26 mainMenu l "<b>Main Menu</b>"}
  addUserKnob {4 mode M {2D 3D ""}}
  addUserKnob {4 node t "<b>• Input </b>-  input will create an axis and camera input. When a camera and axis node has been connected to the respective inputs it will take the data from that.\n\n\n<b>• Parent </b>- Camera and Axis input will be deleted and the \"camera\" and \"axis\" knobs below need to be filled in with the name of the camera or axis. This node will gather the data like that. (expression based)" M {input parent "" "" ""}}
  addUserKnob {26 presetsTitle l <b>Presets</b>}
  addUserKnob {4 presets M {spherical anamorphic "" "" ""}}
  addUserKnob {20 flare}
  addUserKnob {26 FlareOffsetTitle l <b>Flare</b>}
  addUserKnob {12 position}
  position {{"parent.mode == 0 ? parent.position + parent.offset : Reconcile3D1.output  + parent.offset"} {"parent.mode == 0 ? parent.position + parent.offset : Reconcile3D1.output  + parent.offset"}}
  addUserKnob {26 DepthTitle l <b>Depth</b>}
  addUserKnob {7 depth}
  depth {{"parent.node == 0 ?\n\nsqrt(pow(input1.translate.x-input2.translate.x, 2) + pow(input1.translate.y-input2.translate.y, 2) + pow(input1.translate.z-input2.translate.z, 2))  :\n\nsqrt(pow(CameraTag1.translate.x-AxisTag1.translate.x, 2) + pow(CameraTag1.translate.y-AxisTag1.translate.y, 2) + pow(CameraTag1.translate.z-AxisTag1.translate.z, 2))   \n"}}
  addUserKnob {20 index}
  addUserKnob {26 CameraDataTitle l "<b>Camera Data</b>"}
  addUserKnob {13 translate}
  addUserKnob {13 rotation}
 }
 ModifyMetaData {
  metadata {
   {set lensflare/info 1}
   {set lensflare/format "\[value format]"}
   {set lensflare/mode "\[expr \{\[numvalue parent.mode] ? 1 : 0 \}]"}
   {set lensflare/position "\[value Controller.position]"}
   {set lensflare/center "\[value parent.center]"}
   {set lensflare/aspect_ratio "\[value parent.aspect_ratio]"}
   {set lensflare/aspect_ratio "\[value parent.aspect_ratio]"}
   {set lensflare/worldscale "\[expr \{\[numvalue parent.worldScale]  == 0 ? 1 : \[numvalue parent.worldScale] == 1 ? 10 : \[numvalue parent.worldScale] == 2 ? 100 : \[numvalue parent.worldScale] == 3 ? 1000 : 1000000\}]"}
   {set lensflare/depth "\[value Controller.depth]"}
   {set lensflare/camera/position "\[expr \{\[numvalue parent.node] ? \[value CameraTag1.translate] : \[expr \{\[exists parent.input1] > 1 ? 0 : \[value \[topnode parent.input1].translate] \}] \}]"}
   {set lensflare/camera/rotate "\[expr \{\[numvalue parent.node] ? \[value CameraTag1.rotate] : \[expr \{\[exists parent.input1] > 1 ? 0 : \[value \[topnode parent.input1].rotate] \}] \}]"}
   {set lensflare/axis/position "\[expr \{\[numvalue parent.node] ? \[value AxisTag1.translate] : \[expr \{\[exists parent.input1] > 1 ? 0 : \[value \[topnode parent.input2].translate] \}] \}]"}
   {set lensflare/axis/rotate "\[expr \{\[numvalue parent.node] ? \[value AxisTag1.rotate] : \[expr \{\[exists parent.input1] > 1 ? 0 : \[value \[topnode parent.input2].rotate] \}] \}]"}
   {set lensflare/dummy "\[expr \{\[numvalue parent.mode] ? \[value Reconcile3D1.output] : \[value parent.position] \}]\n"}
  }
  name SetMetaData
  xpos 9090
  ypos -682
 }
 Switch {
  inputs 2
  which {{"!\[exists parent.input1]"}}
  name Switch2
  label "\[value which]/\[expr \{\[value inputs]\}]"
  xpos 9090
  ypos -472
  disable true
 }
 Output {
  name Output1
  xpos 9090
  ypos -322
 }
 NoOp {
  inputs 0
  name AxisPlaceHolder
  tile_color 0x777777ff
  xpos 8430
  ypos -1816
 }
 NoOp {
  inputs 0
  name CameraPlaceHolder
  tile_color 0x777777ff
  xpos 8760
  ypos -1816
 }
push $N160af810
 Reconcile3D {
  inputs 3
  calc_output true
  name Reconcile3D1
  xpos 8760
  ypos -1258
 }
end_group
