set cut_paste_input [stack 0]
version 15.0 v4
BackdropNode {
 inputs 0
 name BackdropNode6
 tile_color 0xddb535ff
 label "\[value output]"
 note_font "DejaVu Sans"
 note_font_size 24
 selected true
 xpos -251
 ypos -284
 border_width 15
 bdwidth 341
 bdheight 514
 addUserKnob {20 templateBackdrop l Template}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION Template
 addUserKnob {43 output l INVISIBLE +INVISIBLE}
 output "<center><font size=5>\[expr \{\[numvalue capital01] ? \[string tolower \[value passName]] : \[string toupper \[value passName]]\}]<font size=1><font color=#000000>\t\[expr \{\[numvalue capital02] ? \[string tolower \[value version]] : \[string toupper \[value version]]\}]\n\[expr \{\[numvalue capital03] ? \[string tolower \[value passName]] : \[string toupper \[value template]]\}]</font></center>\n</font></center>\n\[knob tile_color \[expr \{\[value initialize] ? \[value presets] : \[knob tile_color]\}]]\n\n"
 addUserKnob {4 presets t "Context of the template and this will change the color of the backdrop to match operation" +INVISIBLE M {"555819519\tdefault" "808464639\tdefault 2" "2341178367\tdefault 3" "1360471295\t3D" "1197908479\taov" "3141102335\tchannel" "2057961471\tcolor" "522994687\tdeep" "3149642751\tdraw" "3429379327\tfilter" "11600127\tkeyer" "1264502527\tmerge" "791630335\toptical" "2057961471\tother" "3722305023\tparticles" "679634175\tutility" "2963561983\ttime" "2776279807\ttransform" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {6 initialize -STARTLINE +INVISIBLE}
 addUserKnob {3 padding l Padding t "This is the value of the scale distance between the nodes closest to the edge of the backdrop will be."}
 padding 50
 addUserKnob {22 snap l "snap to selected nodes" t "The backdrop will snap to the scale of the selected node and include a padding value." -STARTLINE T "this = nuke.thisNode()\nselNodes = nuke.selectedNodes()\npadding = this.knob('padding').value()\nif len(selNodes)== 0:\n\tpass\nelse:\n\tbdX = min(\[node.xpos() for node in selNodes]) - padding\n\tbdY = min(\[node.ypos() for node in selNodes]) - padding - 60\n\tbdW = max(\[node.xpos() + node.screenWidth() for node in selNodes]) + padding\n\tbdH = max(\[node.ypos() + node.screenHeight() for node in selNodes]) + padding\n\tthis.knob('xpos').setValue(bdX)\n\tthis.knob('ypos').setValue(bdY)\n\tthis.knob('bdwidth').setValue(bdW-bdX)\n\tthis.knob('bdheight').setValue(bdH-bdY)"}
 addUserKnob {26 ""}
 addUserKnob {1 passName l name t "Title of the template operation" +DISABLED}
 passName precomp
 addUserKnob {4 capital01 l "" t "Will make the <b>name</b> message all capital letters, regardless how it's written." -STARTLINE M {upper lower "" "" "" "" "" ""}}
 addUserKnob {1 version t "version of template" +DISABLED}
 version v1.0
 addUserKnob {4 capital02 l "" t "Will make the <b>version</b> message all capital letters, regardless how it's written." -STARTLINE M {upper lower "" "" "" ""}}
 capital02 lower
 addUserKnob {1 template t "Default to be written \"template\" but can add additional notes here instead." +DISABLED}
 template template
 addUserKnob {4 capital03 l "" t "Will make the <b>template</b> message all capital letters, regardless how it's written." -STARTLINE M {upper lower "" "" "" ""}}
 addUserKnob {26 ""}
 addUserKnob {22 lock l lock/unlock T "nuke.thisNode()\['passName'].setEnabled( not nuke.thisNode()\['passName'].enabled() )\n\nnuke.thisNode()\['version'].setEnabled( not nuke.thisNode()\['version'].enabled() )\n\nnuke.thisNode()\['template'].setEnabled( not nuke.thisNode()\['template'].enabled() )\n" +STARTLINE}
 addUserKnob {22 export l "export info" -STARTLINE}
 addUserKnob {20 info l Info}
 addUserKnob {26 Te l "" t "<br><font size='5'>Deep To Position</font><font color=#000060> v1.0</font>" +STARTLINE T "<br><font size='5'>Template Backdrop</font><font color=#747474> v1.0"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "Overview of the node" +STARTLINE T "<br><strong>•</br> \n<b>Template Backdrop </b> backdrop setup for<br>template purposes\n</i>\n<br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#747474;\">John Toth <b>© 2024 <br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">Tool Demo</a>\n" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message(\"Coming Soon\")" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made\n\n\nThis only looks at the backdrop and not the template within." -STARTLINE T "\nversion_number = \"1.0.0\"\ncontext = \"Template\"\nmodified_date = \"13th August 2024\"\ndeveloper = \"John Toth © 2024\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n-  backdrop template setup\n\"\"\"\nthank_you = \"\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    #f\"<b>Thank You:</b><br>\{thank_you\}<br>\{enter\}\"\n    f\"\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)"}
}
NoOp {
 inputs 0
 name GetRender2
 help "Upon connecting the input to a write node, this node will be replaced by the render.\n\nIf not asset exists, no change will be made."
 knobChanged "import os\nimport nuke\n\ndef getRender():\n    # Update the dropdown\n    knobName = nuke.thisKnob().name()\n    success = False\n\n    # Only run if input changed\n    if knobName == \"inputChange\":\n        node = nuke.thisNode()\n        # Grab input, only proceed if it's a write\n        writeNode = node.input(0)\n\n        # Write group\n        if writeNode and writeNode.Class() == \"Group\":\n            with writeNode:\n                writeNode = nuke.allNodes(\"Write\")\n                if writeNode:\n                    writeNode = writeNode\[0]\n\n        if writeNode and writeNode.Class() in \[\"Write\", \"Group\"] and \"file\" in writeNode.knobs().keys():\n            # Get the file path from the Write node\n            file_path = writeNode.knob(\"file\").evaluate()\n\n            # Check if the file path is not None and exists\n            if file_path and os.path.exists(file_path):\n                # Create a new Read node\n                readNode = nuke.createNode(\"Read\", inpanel=False)\n                readNode.knob(\"file\").setValue(file_path)\n\n                # Match position\n                readNode.setXYpos(node.xpos() + 100, node.ypos() + 50)\n\n                # Connect the Read node to the original node\n                node.setInput(0, readNode)\n\n                # Delete the original node\n                nuke.delete(node)\n\n                success = True\n\n        # If no valid file path or no successful operation, disconnect input\n        if not success:\n            node.setInput(0, None)\n\n# Example usage\ngetRender()\n"
 tile_color 0x444444ff
 label "\nConnect this node to a Write Node\nto replace it by the render.\n-"
 selected true
 xpos -40
 ypos 40
 addUserKnob {20 info l Info}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION GetRender
 addUserKnob {26 version l "" t "Node version info, for more information look at version log" +STARTLINE T "<br><font size='5'>Get Render</font><font color=#747474> v1.0</font>"}
 addUserKnob {26 divider_001 l "" +STARTLINE}
 addUserKnob {26 bulletpoints l "" t "Overview of the node" +STARTLINE T "<br><strong>•</strong><b>Get Render</b> This function checks if the write node<br>has been rendered. Upon connection, the node will<br>be replaced with the rendered asset. If no asset is<br>found, no changes will occur.\n<br><br>\n<b><a href=\"https://johntothvfx.com\" style=\"color:#747474;\">John Toth © 2024</a></b><br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">Tool Demo</span></a>" t "Launches the web page where it will have more documentation or a video about the node." -STARTLINE +INVISIBLE T "nuke.message(\"coming soon\")"}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">Version Log</span></a>" t "Contains information about this node, including classification, context, date last modified, developer notes, version number, version log, and year made." -STARTLINE T "\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\nversion_number = \"1.0.0\"\ncontext = \"Utility\"\n                \ndate = \"27th July\"\nyear = \"2024\"\n                \ndeveloper = \"John Toth © 2024\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\n                \nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- upon connection to a write node it will replace this node with the render. If not asset, no change will be made.\n\"\"\"\n\nthankyou = \"\"\"\n\"\"\"\n\nheader = \"Version Log:\"\nDLM = \"<b>Date Last Modified: </b>\" + date + year\nSPACE = \" \"\nENTER = \"<br><br>\"\nUPPER = \"<b>\"\nLOWER = \"</b>\"\n\nnuke.message(UPPER + header + ENTER + \"Name: \" + LOWER + name + \"<br>\" + UPPER + \"Version Number: \" + LOWER + version_number + \"<br>\" + UPPER + \"Context: \" + LOWER + context + ENTER + DLM + log + \"</i>\" + \"<br>\" + UPPER + site + developer + ENTER + \"</a>\") \n        "}
}
Dot {
 name Dot17
 selected true
 xpos -6
 ypos 159
}
push $cut_paste_input
Dot {
 name Dot25
 selected true
 xpos -167
 ypos -174
}
set N20771c00 [stack 0]
Switch {
 inputs 2
 which 1
 name PrecompSwitch2
 tile_color 0xffc2ff
 note_font "Bitstream Vera Sans"
 selected true
 xpos -201
 ypos 150
 addUserKnob {20 precomp_1 l Precomp}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION PrecompSwitch
 addUserKnob {1 output l INVISIBLE +INVISIBLE}
 output "\[expr \{(\[value which] && !\[value disable]) ? \"precomp\" : \"live\"\} ]\[knob tile_color \[expr \{(\[value which] && !\[value disable]) ? \[value live] : \[value precomp]\}]]"
 addUserKnob {3 live +INVISIBLE}
 live 16761599
 addUserKnob {3 precomp +INVISIBLE}
 precomp 1128481791
 addUserKnob {6 initialize +STARTLINE}
 initialize true
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" t "Node version info, for more information look at version log" +STARTLINE T "<br><font size='5'>Precomp Switch</font><font color=#747474> v1.0"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "Overview of the node" +STARTLINE T "<br><strong>•</strong><b>Precomp Switch</b> will visually update colors and<br>label if the node is disabled or which knob a value<br>of 0 - 1.\n<br><br>\n<i>• If the node is either disabled or which knob a value<br>of 0, it will be set to 'live'; otherwise, it will be set to<br>'precomp'.\n<br><br>\n</i><b><a href=\"https://johntothvfx.com\" style=\"color:#747474;\">John Toth © 2024</a></b><br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">Tool Demo</span></a>" t "Launches the web page where it will have more documentation or a video about the node." T "nuke.message(\"coming soon\")" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">Version Log</span></a>" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\n# Constants\nversion_number = \"1.0.0\"\ncontext = \"Merge/Precomp Switch\"\nmodified_date = \"14th August 2024\"\ndeveloper = \"John Toth © 2024\"\nsite = \"<a href='website linke here'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- visually displays if the node is set to 'live' or 'precomp'\n\"\"\"\nthank_you = \"\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    #f\"<b>Thank You:</b><br>\{thank_you\}<br>\{enter\}\"\n    f\"</i>\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)"}
}
push $N20771c00
Dot {
 name Dot26
 selected true
 xpos -6
 ypos -174
}
NoOp {
 name ReplaceWithWrite
 onCreate "# Get the node\nnode = nuke.thisNode()\n\n# Manually execute the 'knobChanged' script using nuke.tcl or exec\nknob_changed_script = node\['knobChanged'].value()\nif knob_changed_script:\n    exec(knob_changed_script)  # This will execute the Python code in knobChanged\n"
 knobChanged "import nuke\n\ndef replace_noop_with_write():\n    noop_node = nuke.thisNode()\n\n    # Get the position of the NoOp node after it's placed in the graph\n    xpos = int(noop_node\['xpos'].value())\n    ypos = int(noop_node\['ypos'].value())\n\n    # Print the xpos and ypos values for debugging\n    print(\"New xpos:\", xpos, \"New ypos:\", ypos)\n\n    # Deselect all nodes to ensure nothing interferes\n    for node in nuke.selectedNodes():\n        node\['selected'].setValue(False)\n\n    # Get the node connected to the NoOp's input0\n    input_node = noop_node.input(0)\n\n    # Create the Write node and set its properties\n    write_node = nuke.createNode('Write', inpanel=False)\n\n    # Set the position for the Write node to match the NoOp node (if desired)\n    #write_node.setXYpos(xpos, ypos + 50)  # Optional: Place the Write node below the NoOp node\n\n    write_node\['channels'].setValue('all')\n    write_node\['file_type'].setValue('exr')\n\n    if input_node:\n        # Connect the Write node's input0 to the input node connected to NoOp\n        write_node.setInput(0, input_node)\n        print(f\"Connected Write node to \{input_node\['name'].value()\}\")\n    else:\n        print(\"No input connected to NoOp node.\")\n\n# Defer the execution to allow the NoOp node to be placed first\n#nuke.executeInMainThread(replace_noop_with_write)\n\n#nuke.delete(nuke.thisNode())\n"
 tile_color 0x444444ff
 label "\nPress the Button to \ncreate Write node\n-"
 selected true
 xpos -40
 ypos -124
 addUserKnob {20 User}
 addUserKnob {22 replace_with_write l "   replace with write   " T "import nuke\n\ndef replace_noop_with_write():\n    noop_node = nuke.thisNode()\n\n    # Get the position of the NoOp node after it's placed in the graph\n    xpos = int(noop_node\['xpos'].value())\n    ypos = int(noop_node\['ypos'].value())\n\n    # Print the xpos and ypos values for debugging\n    print(\"New xpos:\", xpos, \"New ypos:\", ypos)\n\n    # Deselect all nodes to ensure nothing interferes\n    for node in nuke.selectedNodes():\n        node\['selected'].setValue(False)\n\n    # Get the node connected to the NoOp's input0\n    input_node = noop_node.input(0)\n\n    # Create the Write node and set its properties\n    write_node = nuke.createNode('Write', inpanel=False)\n\n    # Set the position for the Write node to match the NoOp node (if desired)\n    write_node.setXYpos(xpos, ypos + 50)  # Optional: Place the Write node below the NoOp node\n\n    write_node\['channels'].setValue('all')\n    write_node\['file_type'].setValue('exr')\n\n    if input_node:\n        # Connect the Write node's input0 to the input node connected to NoOp\n        write_node.setInput(0, input_node)\n        print(f\"Connected Write node to \{input_node\['name'].value()\}\")\n    else:\n        print(\"No input connected to NoOp node.\")\n\n# Defer the execution to allow the NoOp node to be placed first\nnuke.executeInMainThread(replace_noop_with_write)\n\nnuke.delete(nuke.thisNode())\n" +STARTLINE}
}
