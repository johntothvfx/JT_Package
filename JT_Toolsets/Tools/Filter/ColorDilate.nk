Group {
 inputs 2
 name ColorDilate1
 tile_color 0xcc804eff
 selected true
 addUserKnob {20 colorDilate l ColorDilate}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION ColorDilate
 addUserKnob {41 channels t "The colordilate effect is only applied to these channels. \nIf you set this to something other than all or none, you can use the checkboxes on the right to select individual channels.\n\nThe alpha channel is dealt with seperately in the matte sections." T Multiply1.channels}
 addUserKnob {41 controller t "Enables the associated controller channel to the right. Disabling this checkbox is the same as setting the channel to none. \n\nThe channel is used to control and use as the matte where the colordilate will start from.\nBy default, the effect is limited to the non-black areas of this channel. (Brighter the pixel the stronger the softeness)\n\nBy default when connected the node will register and check if the channel selected exists. If it does and connected it will use that. Otherwise it will use the B pipe." T Copy1.from0}
 addUserKnob {6 invertController l invert t ".By default, the effect is limited to the non-black areas of this channel.\n\nThis gets inverted and non-black areas become white areas.\n" -STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {14 size R 0 100}
 addUserKnob {41 iteration t "The number of iterations Colour Dilate will go through. The more iterations processes the slower this node becomes.\n\nThis can be useful to better and more precise results.\n\n\nWARNING: \nThis has a parental control (Quality Control) on it so people don't accidently break something.\nBy default the quality control is 0 - 100 (this mean you cannot go above or below a certain value).\nThis can be lifted inside the node under the quality control section. \n\nPLEASE ONLY DO THIS IF YOU KNOW WHAT YOU ARE DOING.\n\n\n" T menu.iteration}
 addUserKnob {41 distribution t "Distribution from a linear and exponential result.\n0 being linear and 1 being more exponential.\n\nExponetial ha sa lower quality while linear is better with higher quality.\n" T menu.distribution}
 addUserKnob {14 soften l "soften center" t "Softens the center point where the growth starts." R 0 100}
 addUserKnob {26 matteTitle l <b>Matte</b>}
 addUserKnob {4 matteOutput l "matte output" t "Alpha channel matte output options:\n\n<b>- matte:</b> original matte coming into the node will be used as the output. This does not mean the Controller matte but the B pipe.\n\n<b>- dilated matte:</b> The alpha channel will always get the same treatment as the image being effected. This matte can be selected as the output.\n\n<b>- dilated area:</b> Similar result as dilated matte however this matte will be a value of 0-1, matching the growth of the channels being effected 1-1 or in simple terms unpremulted alpha channel.\n\n" M {matte "dilated matte" "dilated area" "" "" "" "" "" "" "" "" "" "" "" ""}}
 matteOutput "dilated area"
 addUserKnob {14 erode l "erode matte" t "Erode the matte to adjust the growthe start." R -100 100}
 addUserKnob {7 expand l "expand matte" t "Binary effect is applied to the controller channel, making the channel expand or compress based on the channels falloff." R -0.99999 0.99999}
 addUserKnob {26 ""}
 addUserKnob {4 filter t "Select the filter algorithm to use: \n• box \n• triangle \n• quadratic \n• gaussian" M {box triangle quadratic gaussian "" ""}}
 filter gaussian
 addUserKnob {6 crop l "crop to format" t "When enabled, the bounding box cannot grow past its incoming bounding/format size. This avoids creating oversized bounding boxes that can take longer to compute." -STARTLINE}
 crop true
 addUserKnob {26 ""}
 addUserKnob {41 mask t "Enables the associated mask channel to the right. Disabling this checkbox is the same as setting the channel to none. \n\n\n\nThe channel to use as a mask. By default, the filter effect is limited to the non-black areas of this channel." T Merge1.maskChannelMask}
 addUserKnob {41 invert_mask l invert t "Copies the mask input to the predefined mask.a channel. Injecting the mask allows you to use the same mask further downstream." -STARTLINE T Merge1.invert_mask}
 addUserKnob {41 inject t "Inverts the use of the mask channel, so that the merge is limited to the non-white areas of the mask.\n" -STARTLINE T Merge1.inject}
 addUserKnob {41 fringe t "When enabled, only apply the effect to the edge of the mask. \nWhen disabled, the effect is applied to the entire mask." -STARTLINE T Merge1.fringe}
 addUserKnob {7 mix t "Dissolves between the original image at 0 and the full effect at 1."}
 mix 1
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>ColorDilate</font><font color=#CC804E> v1.1"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "overview of the node" +STARTLINE T "<br><strong>•</br> \n<b>ColorDilate</b> uses a controller channel to<br>extrude the image in or outwards.<br>\n<i>\n<br><strong>•</br>Operation: Blurs input which then gets unpremultied<br>followed by a small erode being premultiplied<br>back and merged under original image.<br>\n\n<br><strong>•</br> \nThis operation is iterated to get better results<br>of image growth.\n</i>\n<br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#CC804E;\">John Toth <b>© 2024 <br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#CC804E\">Tool Demo" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message('coming soon')" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#CC804E\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\nversion_number = \"1.0.2\"\ncontext = \"Filter\"\n\ndate = \"06th July\"\nyear = \" 2024\"\n\ndeveloper = \"John Toth © 2024\"\nsite = \"<a href='https://johntothvfx.com'> <span style='color:#BBBBBB'>\"\n\n\n\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- extrudes the image inwards or outwards based on a controller channel\n<br></i><b> v 1.1 </b><i>\n- fixing channels to work as expected\n\"\"\"\n\n\n\nthankyou = \"\"\"\n\"\"\"\n\n\n\"\"\"Do not touch section below\"\"\"\nheader = \"Version Log:\"\nDLM = \"<b>Date Last Modified: </b>\" + date + year\n\nSPACE = \" \"\nENTER = \"<br><br>\"\nUPPER = \"<b>\"\nLOWER = \"</b>\"\n\n\n\nnuke.message(UPPER + header + ENTER + \"Name: \" + LOWER + name + \"<br>\" + UPPER + \"Version Number: \" + LOWER + version_number + \"<br>\" + UPPER + \"Context: \" + LOWER + context + ENTER + DLM + log + \"</i>\" + \"<br>\" + UPPER + site + developer + ENTER + \"</a>\") \n\n"}
}
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x23232301
  label "<center>Don't Touch\n\n"
  note_font "Source Code Pro Light"
  note_font_size 40
  note_font_color 0xee453cff
  xpos 449
  ypos -679
  bdwidth 422
  bdheight 349
 }
 NoOp {
  inputs 0
  name menu
  knobChanged "grp = nuke.thisGroup()\nk = nuke.thisKnob()\n\n# Quality control\nqualityLow = nuke.thisNode().knob('qualityLowEnd').getValue()\nqualityHigh = nuke.thisNode().knob('qualityHighEnd').getValue()\nqualityValue = nuke.thisNode().knob('iteration').getValue()\n\nif k.name() == 'iteration':\n    # Quality control settings\n    if qualityValue < qualityLow:\n        qualityValue = qualityLow\n    elif qualityValue > qualityHigh:\n        qualityValue = qualityHigh\n    grp\['iteration'].setValue(qualityValue)\n\n    iteration = int(grp\['iteration'].value())\n\n    grp.begin()\n    begin = nuke.toNode('Begin')\n    end = nuke.toNode('End')\n    preult1 = nuke.toNode('Premult1')\n    merge1 = nuke.toNode('Merge1')\n    blur0 = nuke.toNode('Blur1')\n    edgeblur = nuke.toNode('EdgeBlur1')\n    Xpos = begin.xpos()\n    Ypos = begin.ypos()\n\n\n    # Clean up existing nodes\n    nodeList = \['Blur', 'Unpremult', 'Expression', 'FilterErode', 'Premult', 'Merge2']\n    exceptions = \['Unpremult', 'premult', 'Merge1', 'FilterErode1', 'Expression1']\n\n    for nodeClass in nodeList:\n        for n in nuke.allNodes(nodeClass):\n            if n.name() not in exceptions:\n                nuke.delete(n)\n\n    new = \[]\n\n    for n in range(0, iteration):\n        blur = nuke.nodes.Blur(xpos=Xpos + (n + 1) * 100, ypos=Ypos + 50)\n        blur.setName('Blur' + str(n + 1))\n        #blur\['channels'].setExpression('Multiply1.channels')\n        blur\['channels'].setValue('all')\n        blur\['size'].setValue(\[0, 0])\n        blur\['size'].setExpression('( parent.size / parent.iteration * ( (\[string range \[value name] 4 end])) * (1-parent.distribution)) + (parent.size/parent.iteration*((\[string range \[value name] 4 end]))) * (parent.distribution*(pow((\[string range \[value name] 4 end]), 2)/pow(parent.iteration, 2)))')\n        blur\['crop'].setExpression('parent.crop')\n        blur\['filter'].setExpression('parent.filter')\n        blur.setInput(0, begin)\n\n        unpremult = nuke.nodes.Unpremult(xpos=Xpos + (n + 1) * 100, ypos=Ypos + 100)\n        unpremult.setName('Unpremult' + str(n + 1))\n        #unpremult\['channels'].setExpression('Multiply1.channels')\n        unpremult\['channels'].setValue('all')\n        unpremult.setInput(0, blur)\n\n        expression = nuke.nodes.Expression(xpos=Xpos + (n + 1) * 100, ypos=Ypos + 150)\n        expression.setName('Expression' + str(n + 1))\n        expression\['expr3'].setValue('a == 0 ? 0 : 1')\n        expression.setInput(0, unpremult)\n        \n        \n        erode = nuke.nodes.FilterErode(xpos=Xpos + (n + 1) * 100, ypos=Ypos + 200)\n        erode.setName('FilterErode' + str(n + 1))\n        #erode\['channels'].setValue('all')\n        erode\['size'].setValue(\[0, 0])\n        erode\['size'].setExpression('parent.' + blur.name() + '.size / 2')\n        erode\['filter'].setExpression('parent.filter')\n        erode.setInput(0, expression)\n\n\n        premult = nuke.nodes.Premult(xpos=Xpos + (n + 1) * 100, ypos=Ypos + 250)\n        premult.setName('Premult' + str(n + 1))\n        #premult\['channels'].setExpression('Multiply1.channels')\n        premult\['channels'].setValue('all')\n        premult.setInput(0, erode)\n\n        merge = nuke.nodes.Merge2(xpos=Xpos + (n + 0) * 100, ypos=Ypos + 300)\n        merge.setName('Merge' + str(n + 1))\n        merge\['operation'].setValue('under')\n        merge\['Achannels'].setExpression('Multiply1.channels')\n        merge\['Bchannels'].setExpression('Multiply1.channels')\n        merge\['output'].setExpression('Multiply1.channels')\n        merge\['also_merge'].setExpression('Multiply1.channels')\n        merge\['label'].setValue('mix: \[value mix] (\[value bbox])')\n        merge.setInput(1, premult)\n        \n        if n == 0:\n            merge.setInput(0, edgeblur)\n        else:\n            merge.setInput(0, new\[n - 1])\n\n        new.append(merge)\n\n        # Connect the end node to the latest merge node\n        end.setInput(0, new\[-1])\n\n        \n"
  xpos 730
  ypos -537
  hide_input true
  addUserKnob {20 menu}
  addUserKnob {7 iteration R 1 10}
  iteration 5
  addUserKnob {7 distribution}
  addUserKnob {7 SoftenTransition l soften}
  SoftenTransition 1
  addUserKnob {26 qualityControl l "<b>Quality Control</b>"}
  addUserKnob {3 qualityLowEnd l quality}
  qualityLowEnd 1
  addUserKnob {3 qualityHighEnd l "" -STARTLINE}
  qualityHighEnd 100
 }
 Input {
  inputs 0
  name Mask
  label "\[value number]"
  xpos -260
  ypos -781
  number 2
 }
 Dot {
  name Dot14
  note_font_size 35
  note_font_color 0xffffff
  xpos -226
  ypos 3858
 }
 Input {
  inputs 0
  name Input
  label "\[value number]"
  xpos 290
  ypos -781
 }
 Dot {
  name Dot1
  note_font_size 35
  note_font_color 0xffffff
  xpos 324
  ypos -174
 }
set N88185400 [stack 0]
 Dot {
  name Dot9
  note_font_size 35
  note_font_color 0xffffff
  xpos 324
  ypos 3042
 }
set N88142200 [stack 0]
 Dot {
  name Dot10
  note_font_size 35
  note_font_color 0xffffff
  xpos 654
  ypos 3042
 }
 AddChannels {
  channels alpha
  name AddChannels2
  xpos 620
  ypos 3155
 }
 Dot {
  name Dot12
  note_font_size 35
  note_font_color 0xffffff
  xpos 654
  ypos 3306
 }
push $N88185400
 Dot {
  name Dot4
  note_font_size 35
  note_font_color 0xffffff
  xpos 874
  ypos -174
 }
 Dot {
  name Dot11
  note_font_size 35
  note_font_color 0xffffff
  xpos 874
  ypos 42
 }
set N39646800 [stack 0]
 Dot {
  name Dot5
  note_font_size 35
  note_font_color 0xffffff
  xpos 874
  ypos 570
 }
set N39646c00 [stack 0]
 Dot {
  name Dot19
  note_font_size 35
  note_font_color 0xffffff
  xpos 874
  ypos 834
 }
set N395c4400 [stack 0]
 Dot {
  name Dot18
  note_font_size 35
  note_font_color 0xffffff
  xpos 654
  ypos 834
 }
 Dot {
  name Dot23
  note_font_size 35
  note_font_color 0xffffff
  xpos 654
  ypos 2490
 }
set N395c4c00 [stack 0]
 Dot {
  name Dot22
  note_font_size 35
  note_font_color 0xffffff
  xpos 544
  ypos 2490
 }
 AddChannels {
  channels {{{parent.Multiply1.channels}}}
  name AddChannels3
  xpos 510
  ypos 2555
 }
 Dot {
  name Dot21
  note_font_size 35
  note_font_color 0xffffff
  xpos 544
  ypos 2634
 }
push $N395c4c00
 Remove {
  channels {{{Multiply1.channels}}}
  name Remove3
  label "\[if \{ \[lsearch \"rgb rgba\"  \[value channels]] != -1 \} \{ return \"(\[value channels])\n\" \} else \{ return \"\"\}]\[if \{ \[value channels2] != \"none\"\} \{return \"(\[value channels2])\"\} else \{return \" \"\}]\[if \{ \[value channels3] != \"none\"\} \{return \"\n(\[value channels3])\"\} else \{return \" \"\}]\[if \{ \[value channels4] != \"none\"\} \{return \"\n(\[value channels4])\"\} else \{return \" \"\}]"
  xpos 620
  ypos 2555
 }
 Copy {
  inputs 2
  name Copy5
  xpos 620
  ypos 2627
  disable {{"matteOutput == 0 ? 0 : 1"}}
 }
 Dot {
  name Dot20
  note_font_size 35
  note_font_color 0xffffff
  xpos 654
  ypos 2826
 }
 Input {
  inputs 0
  name Controller
  label "\[value number]"
  xpos 1830
  ypos -781
  number 1
 }
 Dot {
  name Dot3
  note_font_size 35
  note_font_color 0xffffff
  xpos 1864
  ypos 450
 }
push $N39646800
 Dot {
  name Dot2
  note_font_size 35
  note_font_color 0xffffff
  xpos 1534
  ypos 42
 }
 Switch {
  inputs 2
  which {{"(\[string first \[value controller] \[channels Controller]]> -1)"}}
  name Switch1
  label "\[value which] / \[expr \{\[value inputs] - (\[value inputs] > 1 ? 1 : 0)\}]"
  xpos 1500
  ypos 443
 }
 AddChannels {
  channels rgba
  name AddChannels1
  xpos 1500
  ypos 687
 }
 Dot {
  name Dot8
  note_font_size 35
  note_font_color 0xffffff
  xpos 1534
  ypos 882
 }
push $N39646c00
 Dot {
  name Dot7
  note_font_size 35
  note_font_color 0xffffff
  xpos 1204
  ypos 570
 }
 Remove {
  name Remove1
  label "\[if \{ \[lsearch \"rgb rgba\"  \[value channels]] != -1 \} \{ return \"(\[value channels])\n\" \} else \{ return \"\"\}]\[if \{ \[value channels2] != \"none\"\} \{return \"(\[value channels2])\"\} else \{return \" \"\}]\[if \{ \[value channels3] != \"none\"\} \{return \"\n(\[value channels3])\"\} else \{return \" \"\}]\[if \{ \[value channels4] != \"none\"\} \{return \"\n(\[value channels4])\"\} else \{return \" \"\}]"
  xpos 1170
  ypos 683
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy1
  xpos 1170
  ypos 875
 }
 FilterErode {
  channels alpha
  size {{"invertController == 0 ? -parent.erode.w : parent.erode.w"} {"invertController == 0 ? -parent.erode.h : parent.erode.h"}}
  name FilterErode1
  xpos 1170
  ypos 995
 }
 Invert {
  channels alpha
  name Invert2
  xpos 1170
  ypos 1067
  disable {{parent.invertController}}
 }
 Grade {
  channels alpha
  blackpoint {{"clamp(expand, 0, 1)"}}
  whitepoint {{"clamp(1+expand, 0, 1)"}}
  white_clamp true
  name Grade1
  xpos 1170
  ypos 1139
 }
 Grade {
  channels alpha
  whitepoint 0.5
  black_clamp false
  white_clamp true
  name Grade6
  xpos 1170
  ypos 1211
 }
 Dot {
  name Dot6
  note_font_size 35
  note_font_color 0xffffff
  xpos 1204
  ypos 1338
 }
set N3a0bcc00 [stack 0]
 Dot {
  name Dot15
  note_font_size 35
  note_font_color 0xffffff
  xpos 1204
  ypos 1482
 }
 Dot {
  name Dot16
  note_font_size 35
  note_font_color 0xffffff
  xpos 1094
  ypos 1482
 }
 Invert {
  channels alpha
  name Invert1
  selected true
  xpos 1060
  ypos 1547
 }
 Dot {
  name Dot17
  note_font_size 35
  note_font_color 0xffffff
  xpos 1094
  ypos 1626
 }
push $N3a0bcc00
push $N395c4400
 Shuffle {
  alpha white
  name Shuffle1
  tile_color 0xccccccff
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos 840
  ypos 1013
 }
 Multiply {
  inputs 1+1
  value 0
  name Multiply1
  knobChanged "import nuke\n\n# Get the value of the 'channels' knob from the current node\nchannels = nuke.thisNode().knob('channels').value()\n\n# Extract the layer name from the channels value (e.g., \"rgb\", \"rgba\", \"normals\", etc.)\nlayer = channels.split('.')\[0]\n\n# Construct the alpha channel name for the selected layer\nred_channel = layer + \".red\"\ngreen_channel = layer + \".green\"\nblue_channel = layer + \".blue\"\nalpha_channel = layer + \".alpha\"\n\n# Set the value of the 'also_merge' knob in 'Merge5' to the constructed alpha channel name\ncopy = nuke.toNode('Copy5')\ncopy.knob('from0').setValue(alpha_channel)\ncopy.knob('to0').setValue(alpha_channel)\n\n\n\ncopy2 = nuke.toNode('Copy6')\ncopy2.knob('from0').setValue(red_channel)\ncopy2.knob('to0').setValue(red_channel)\n\ncopy2.knob('from1').setValue(green_channel)\ncopy2.knob('to1').setValue(green_channel)\n\ncopy2.knob('from2').setValue(blue_channel)\ncopy2.knob('to2').setValue(blue_channel)\n\n"
  label "value: \[value value]"
  xpos 840
  ypos 1326
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy3
  xpos 840
  ypos 1619
 }
 Remove {
  operation keep
  channels {{{Multiply1.channels}}}
  channels2 alpha
  name Remove2
  label "\[if \{ \[lsearch \"rgb rgba\"  \[value channels]] != -1 \} \{ return \"(\[value channels])\n\" \} else \{ return \"\"\}]\[if \{ \[value channels2] != \"none\"\} \{return \"(\[value channels2])\"\} else \{return \" \"\}]\[if \{ \[value channels3] != \"none\"\} \{return \"\n(\[value channels3])\"\} else \{return \" \"\}]\[if \{ \[value channels4] != \"none\"\} \{return \"\n(\[value channels4])\"\} else \{return \" \"\}]"
  xpos 840
  ypos 1806
 }
 NoOp {
  name Begin
  tile_color 0x3066ff
  xpos 840
  ypos 1927
 }
set N39f57c00 [stack 0]
 Blur {
  size {{"( parent.size / parent.iteration * ( (\[string range \[value name] 4 end])) * (1-parent.distribution)) + (parent.size/parent.iteration*((\[string range \[value name] 4 end]))) * (parent.distribution*(pow((\[string range \[value name] 4 end]), 2)/pow(parent.iteration, 2)))"} {"( parent.size / parent.iteration * ( (\[string range \[value name] 4 end])) * (1-parent.distribution)) + (parent.size/parent.iteration*((\[string range \[value name] 4 end]))) * (parent.distribution*(pow((\[string range \[value name] 4 end]), 2)/pow(parent.iteration, 2)))"}}
  filter {{parent.filter}}
  crop {{parent.crop}}
  name Blur5
  xpos 1340
  ypos 1977
 }
 Unpremult {
  channels all
  name Unpremult5
  xpos 1340
  ypos 2027
 }
 Expression {
  expr3 "a == 0 ? 0 : 1"
  name Expression6
  xpos 1340
  ypos 2077
 }
 FilterErode {
  size {{"parent.Blur5.size / 2"} {"parent.Blur5.size / 2"}}
  filter {{parent.filter}}
  name FilterErode6
  xpos 1340
  ypos 2127
 }
 Premult {
  channels all
  name Premult5
  xpos 1340
  ypos 2177
 }
push $N39f57c00
 Blur {
  size {{"( parent.size / parent.iteration * ( (\[string range \[value name] 4 end])) * (1-parent.distribution)) + (parent.size/parent.iteration*((\[string range \[value name] 4 end]))) * (parent.distribution*(pow((\[string range \[value name] 4 end]), 2)/pow(parent.iteration, 2)))"} {"( parent.size / parent.iteration * ( (\[string range \[value name] 4 end])) * (1-parent.distribution)) + (parent.size/parent.iteration*((\[string range \[value name] 4 end]))) * (parent.distribution*(pow((\[string range \[value name] 4 end]), 2)/pow(parent.iteration, 2)))"}}
  filter {{parent.filter}}
  crop {{parent.crop}}
  name Blur4
  xpos 1240
  ypos 1977
 }
 Unpremult {
  channels all
  name Unpremult4
  xpos 1240
  ypos 2027
 }
 Expression {
  expr3 "a == 0 ? 0 : 1"
  name Expression5
  xpos 1240
  ypos 2077
 }
 FilterErode {
  size {{"parent.Blur4.size / 2"} {"parent.Blur4.size / 2"}}
  filter {{parent.filter}}
  name FilterErode5
  xpos 1240
  ypos 2127
 }
 Premult {
  channels all
  name Premult4
  xpos 1240
  ypos 2177
 }
push $N39f57c00
 Blur {
  size {{"( parent.size / parent.iteration * ( (\[string range \[value name] 4 end])) * (1-parent.distribution)) + (parent.size/parent.iteration*((\[string range \[value name] 4 end]))) * (parent.distribution*(pow((\[string range \[value name] 4 end]), 2)/pow(parent.iteration, 2)))"} {"( parent.size / parent.iteration * ( (\[string range \[value name] 4 end])) * (1-parent.distribution)) + (parent.size/parent.iteration*((\[string range \[value name] 4 end]))) * (parent.distribution*(pow((\[string range \[value name] 4 end]), 2)/pow(parent.iteration, 2)))"}}
  filter {{parent.filter}}
  crop {{parent.crop}}
  name Blur3
  xpos 1140
  ypos 1977
 }
 Unpremult {
  channels all
  name Unpremult3
  xpos 1140
  ypos 2027
 }
 Expression {
  expr3 "a == 0 ? 0 : 1"
  name Expression4
  xpos 1140
  ypos 2077
 }
 FilterErode {
  size {{"parent.Blur3.size / 2"} {"parent.Blur3.size / 2"}}
  filter {{parent.filter}}
  name FilterErode4
  xpos 1140
  ypos 2127
 }
 Premult {
  channels all
  name Premult3
  xpos 1140
  ypos 2177
 }
push $N39f57c00
 Blur {
  size {{"( parent.size / parent.iteration * ( (\[string range \[value name] 4 end])) * (1-parent.distribution)) + (parent.size/parent.iteration*((\[string range \[value name] 4 end]))) * (parent.distribution*(pow((\[string range \[value name] 4 end]), 2)/pow(parent.iteration, 2)))"} {"( parent.size / parent.iteration * ( (\[string range \[value name] 4 end])) * (1-parent.distribution)) + (parent.size/parent.iteration*((\[string range \[value name] 4 end]))) * (parent.distribution*(pow((\[string range \[value name] 4 end]), 2)/pow(parent.iteration, 2)))"}}
  filter {{parent.filter}}
  crop {{parent.crop}}
  name Blur2
  xpos 1040
  ypos 1977
 }
 Unpremult {
  channels all
  name Unpremult2
  xpos 1040
  ypos 2027
 }
 Expression {
  expr3 "a == 0 ? 0 : 1"
  name Expression3
  xpos 1040
  ypos 2077
 }
 FilterErode {
  size {{"parent.Blur2.size / 2"} {"parent.Blur2.size / 2"}}
  filter {{parent.filter}}
  name FilterErode3
  xpos 1040
  ypos 2127
 }
 Premult {
  channels all
  name Premult2
  xpos 1040
  ypos 2177
 }
push $N39f57c00
 Blur {
  size {{"( parent.size / parent.iteration * ( (\[string range \[value name] 4 end])) * (1-parent.distribution)) + (parent.size/parent.iteration*((\[string range \[value name] 4 end]))) * (parent.distribution*(pow((\[string range \[value name] 4 end]), 2)/pow(parent.iteration, 2)))"} {"( parent.size / parent.iteration * ( (\[string range \[value name] 4 end])) * (1-parent.distribution)) + (parent.size/parent.iteration*((\[string range \[value name] 4 end]))) * (parent.distribution*(pow((\[string range \[value name] 4 end]), 2)/pow(parent.iteration, 2)))"}}
  filter {{parent.filter}}
  crop {{parent.crop}}
  name Blur1
  xpos 940
  ypos 1977
 }
 Unpremult {
  channels all
  name Unpremult1
  xpos 940
  ypos 2027
 }
 Expression {
  expr3 "a == 0 ? 0 : 1"
  name Expression2
  xpos 940
  ypos 2077
 }
 FilterErode {
  size {{"parent.Blur1.size / 2"} {"parent.Blur1.size / 2"}}
  filter {{parent.filter}}
  name FilterErode2
  xpos 940
  ypos 2127
 }
 Premult {
  channels all
  name Premult1
  xpos 940
  ypos 2177
 }
push $N39f57c00
 EdgeBlur {
  size {{parent.soften} {parent.soften}}
  filter {{parent.filter}}
  crop {{parent.crop}}
  name EdgeBlur1
  xpos 840
  ypos 2115
  disable {{"parent.iteration == 0 ? 1: 0"}}
 }
 Merge2 {
  inputs 2
  operation under
  Achannels {{{Multiply1.channels}}}
  Bchannels {{{Multiply1.channels}}}
  output {{{Multiply1.channels}}}
  also_merge {{{Multiply1.channels}}}
  name Merge2
  label "mix: \[value mix] (\[value bbox])"
  xpos 840
  ypos 2227
 }
 Merge2 {
  inputs 2
  operation under
  Achannels {{{Multiply1.channels}}}
  Bchannels {{{Multiply1.channels}}}
  output {{{Multiply1.channels}}}
  also_merge {{{Multiply1.channels}}}
  name Merge3
  label "mix: \[value mix] (\[value bbox])"
  xpos 940
  ypos 2227
 }
 Merge2 {
  inputs 2
  operation under
  Achannels {{{Multiply1.channels}}}
  Bchannels {{{Multiply1.channels}}}
  output {{{Multiply1.channels}}}
  also_merge {{{Multiply1.channels}}}
  name Merge4
  label "mix: \[value mix] (\[value bbox])"
  xpos 1040
  ypos 2227
 }
 Merge2 {
  inputs 2
  operation under
  Achannels {{{Multiply1.channels}}}
  Bchannels {{{Multiply1.channels}}}
  output {{{Multiply1.channels}}}
  also_merge {{{Multiply1.channels}}}
  name Merge5
  label "mix: \[value mix] (\[value bbox])"
  xpos 1140
  ypos 2227
 }
 Merge2 {
  inputs 2
  operation under
  Achannels {{{Multiply1.channels}}}
  Bchannels {{{Multiply1.channels}}}
  output {{{Multiply1.channels}}}
  also_merge {{{Multiply1.channels}}}
  name Merge6
  label "mix: \[value mix] (\[value bbox])"
  xpos 1240
  ypos 2227
 }
 NoOp {
  name End
  tile_color 0x3066ff
  xpos 840
  ypos 2479
 }
 Dot {
  name Dot24
  note_font_size 35
  note_font_color 0xffffff
  xpos 874
  ypos 2586
 }
set N8c195200 [stack 0]
 Dot {
  name Dot25
  note_font_size 35
  note_font_color 0xffffff
  xpos 984
  ypos 2586
 }
 Unpremult {
  channels all
  name Unpremult6
  xpos 950
  ypos 2651
 }
 Dot {
  name Dot26
  note_font_size 35
  note_font_color 0xffffff
  xpos 984
  ypos 2730
 }
push $N8c195200
 Unpremult {
  channels all
  name Unpremult
  xpos 840
  ypos 2651
  disable {{"\[if \{ \[lsearch \{\"all\" \"rgb\" \"rgba\" \"alpha\"\} \[value Multiply1.channels]] != -1 \} \{\n    return 0\n\} else \{\n    if \{ \[numvalue parent.matteOutput] == 2 \} \{\n        return 0\n    \} else \{\n        return 1\n    \}\n\}]\n"}}
 }
 Copy {
  inputs 2
  name Copy6
  xpos 840
  ypos 2713
 }
 Copy {
  inputs 2
  channels all
  name Copy4
  xpos 840
  ypos 2814
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy2
  label matte
  xpos 840
  ypos 3294
  disable {{"parent.matteOutput == 0 ? 0 : 1"}}
 }
 Expression {
  expr3 a<=0.000001?0:1
  name Expression1
  label "dilated matte"
  xpos 840
  ypos 3491
  disable {{"parent.matteOutput == 2 ? 0 : 1"}}
 }
 Crop {
  box {{"min(0, Input.bbox.x)"} {"min(0, Input.bbox.y)"} {"max(width, Input.bbox.r)"} {"max(height, Input.bbox.t)"}}
  intersect true
  name Crop1
  label "Safety Crop"
  xpos 840
  ypos 3731
  disable {{!parent.crop}}
 }
 Dot {
  name Dot13
  note_font_size 35
  note_font_color 0xffffff
  xpos 874
  ypos 3858
 }
push $N88142200
 Merge2 {
  inputs 2+1
  operation copy
  Achannels {{{Multiply1.channels}}}
  Bchannels {{{Multiply1.channels}}}
  output {{{Multiply1.channels}}}
  also_merge {{{Multiply1.channels}}}
  mix {{parent.mix}}
  name Merge1
  label "mix: \[value mix] (\[value bbox])"
  xpos 290
  ypos 3846
 }
 Output {
  name Output1
  xpos 290
  ypos 4359
 }
end_group
