Group {
 name ExponentialGlow1
 help "Creates an iteratable exponential/linear glow effect as you would see in real life."
 tile_color 0xcc804eff
 selected true
 addUserKnob {20 exponentialGlowTab l "Exponential Glow"}
 addUserKnob {26 ""}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION ExponentialGlow
 addUserKnob {1 output l INVISIBLE +INVISIBLE}
 output "\[value source]"
 addUserKnob {41 channels t "The Exponential Glow effect is only applied to these channels. \nIf you set this to something other than all or none, you can use the checkboxes on the right to select individual channels." T Blur_0.channels}
 addUserKnob {4 source l output t "<b>• result -</b>The Exponential Glow effect will be applied over the input source image.\n\n\n<b>• effect only -</b>The Exponential glow effect will be over black with the no alpha channel.\n" M {result "effect Only" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {6 crop l "crop to format" t "When enabled, the bounding box cannot grow past its incoming bounding/format size. This avoids creating oversized bounding boxes that can take longer to compute." -STARTLINE}
 crop true
 addUserKnob {4 type t "\n<b>exponential</b> will multiply the effect creating a exponential effect as shown below.\n<b><I>example 2,4,8,16,32 etc</b></i>\n\n\n<b>linear</b> will add the effect creating a linear effect as shown below\n\n<b><I>example 5,10,15,20,25 etc</b></i>" M {exponential linear "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {6 normalize t "This will divide the exponential glow result by the  exponential value to normalize the output intensity." -STARTLINE}
 normalize true
 addUserKnob {26 space002 l "" +STARTLINE T " \t"}
 addUserKnob {7 intensity t "This will increase the brightness of the exponential glow result." R 0 10}
 intensity 1
 addUserKnob {41 iteration l exponential t "This value represents how many Blur iterations are being generated to create the exponential effect.\n\nWARNING: \nThis has a parental control (Quality Control) on it so people don't accidently break something.\nBy default the quality control is 0 - 100 (this mean you cannot go above or below a certain value).\nThis can be lifted inside the node under the quality control section. \n\nPLEASE ONLY DO THIS IF YOU KNOW WHAT YOU ARE DOING.\n\n\n" T menu.iteration}
 addUserKnob {14 diffusion t "Softness of the glow itself. (Each Exponential Blur will widen it's value)." R 0 100}
 diffusion 1.5
 addUserKnob {7 falloff t "Falloff of the glow effect can be controls using this.\n<i>\nUses a mutliple <b>Multiply nodes</b> which exponentially increased or decreased for falloff" R 0 4}
 falloff 1
 addUserKnob {26 space003 l "" +STARTLINE T " \t"}
 addUserKnob {7 threshold t "This controls the luminance threshold of what will be selected to glow from using a Keyer node.\n\nHaving the knob on 0 will exponential glow the entire image input as it is and not apply the keyer.\n\n" R 0 4}
 threshold 0.05
 addUserKnob {4 colorSpace l "" t "The Threshold will go through a colorspace for different range value selection." -STARTLINE M {linear log "" "" "" ""}}
 addUserKnob {26 ""}
 addUserKnob {41 maskChannelMask l mask t "\nEnables the associated mask channel to the right. Disabling this checkbox is the same as setting the channel to none. \n\n\nThe channel to use as a mask. By default, the merge is limited to the non-black areas of this channel.\n" T Copy.maskChannelMask}
 addUserKnob {41 inject t "Copies the mask input to the predefined mask.a channel. Injecting the mask allows you to use the same mask further downstream." -STARTLINE T Copy.inject}
 addUserKnob {41 invert_mask l invert t "Inverts the use of the mask channel, so that the merge is limited to the non-white areas of the mask.\n" -STARTLINE T Copy.invert_mask}
 addUserKnob {41 fringe t "When enabled, only apply the effect to the edge of the mask. \nWhen disabled, the effect is applied to the entire mask." -STARTLINE T Copy.fringe}
 addUserKnob {7 mix t "Dissolves between the original image at 0 and the full merge at 1."}
 mix 1
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Exponential Glow</font><font color=#CC804E> v1.6"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "overview of the node" +STARTLINE T "<br><strong>•</br> \n<b>Exponential Glow</b> causes the bright areas to<br>appear brighter by added a glow using blur nodes.\n<br></b>\n\n\n<br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#CC804E;\">John Toth <b>© 2018 <br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#CC804E\">Tool Demo" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message('coming soon')" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#CC804E\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\nversion_number = \"1.6.2\"\ncontext = \"Filter\"\n\n\ndate = \"17th January\"\nyear = \" 2024\"\n\ndeveloper = \"John Toth © 2018\"\nsite = \"<a href='https://johntothvfx.com'> <span style='color:#BBBBBB'>\"\n\n\n\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- makes the bright area glow either exponentially or linear.\n<br></i><b> v 1.1 </b><i>\n- expression on main blur was fixed\n<br></i><b> v 1.2 </b><i>\n- color bleeding was added\n<br></i><b> v 1.3 </b><i>\n- intesnity was added\n- size control was renamed to diffusion for clarity\n- optimization\n<br></i><b> v 1.4 </b><i>\n- soft clamp was added\n- auto bbox calculation was done\n<br></i><b> v 1.5 </b><i>\n- user interace was updated\n- range has not been put into a threshold\n- exponential slide is now iterative and can go past 10\n- mathmatic glow types were added\n- softclamp & optical effects were removed\n- iterative exponential control was added\n<br></i><b> v 1.6 </b><i>\n- channels knob was added including the alpha channel <b>(Only in result mode)</b>\n- iterative safety lock has been added 0-100 as default\n- callback has been placed inside the node\n\"\"\"\n\n\n\nthankyou = \"\"\"\n\"\"\"\n\n\n\"\"\"Do not touch section below\"\"\"\nheader = \"Version Log:\"\nDLM = \"<b>Date Last Modified: </b>\" + date + year\n\nSPACE = \" \"\nENTER = \"<br><br>\"\nUPPER = \"<b>\"\nLOWER = \"</b>\"\n\n\n\nnuke.message(UPPER + header + ENTER + \"Name: \" + LOWER + name + \"<br>\" + UPPER + \"Version Number: \" + LOWER + version_number + \"<br>\" + UPPER + \"Context: \" + LOWER + context + ENTER + DLM + log + \"</i>\" + \"<br>\" + UPPER + site + developer + \"</a>\") \n\n\n"}
}
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x23232301
  label "<center>Don't Touch\n\n"
  note_font "Source Code Pro Light"
  note_font_size 40
  note_font_color 0xee453cff
  xpos -1111
  ypos -1323
  bdwidth 243
  bdheight 149
 }
 Input {
  inputs 0
  name Input
  label "\[value number]"
  xpos -630
  ypos -1312
 }
 Dot {
  name Dot1
  note_font_size 35
  note_font_color 0xffffff
  xpos -596
  ypos -1014
 }
set N2665e400 [stack 0]
 Dot {
  name Dot11
  note_font_size 35
  note_font_color 0xffffff
  xpos -596
  ypos 930
 }
set N32f39600 [stack 0]
 Dot {
  name Dot10
  note_font_size 35
  note_font_color 0xffffff
  xpos -776
  ypos 930
 }
 AddChannels {
  channels alpha
  name AddChannels2
  xpos -810
  ypos 1050
 }
 Remove {
  channels {{{parent.Blur_0.channels}}}
  name Remove4
  label "\[if \{ \[lsearch \"rgb rgba\"  \[value channels]] != -1 \} \{ return \"(\[value channels])\n\" \} else \{ return \"\"\}]\[if \{ \[value channels2] != \"none\"\} \{return \"(\[value channels2])\"\} else \{return \" \"\}]\[if \{ \[value channels3] != \"none\"\} \{return \"\n(\[value channels3])\"\} else \{return \" \"\}]\[if \{ \[value channels4] != \"none\"\} \{return \"\n(\[value channels4])\"\} else \{return \" \"\}]"
  xpos -810
  ypos 1088
 }
 Remove {
  channels alpha
  name Remove3
  label "\[if \{ \[lsearch \"rgb rgba\"  \[value channels]] != -1 \} \{ return \"(\[value channels])\n\" \} else \{ return \"\"\}]\[if \{ \[value channels2] != \"none\"\} \{return \"(\[value channels2])\"\} else \{return \" \"\}]\[if \{ \[value channels3] != \"none\"\} \{return \"\n(\[value channels3])\"\} else \{return \" \"\}]\[if \{ \[value channels4] != \"none\"\} \{return \"\n(\[value channels4])\"\} else \{return \" \"\}]"
  xpos -810
  ypos 1126
  disable {{!parent.source}}
 }
 Dot {
  name Dot9
  note_font_size 35
  note_font_color 0xffffff
  xpos -776
  ypos 1290
 }
 Input {
  inputs 0
  name mask
  label "\[value number]"
  xpos 1060
  ypos -1360
  number 1
 }
 Dot {
  name Dot4
  note_font_size 35
  note_font_color 0xffffff
  xpos 1094
  ypos -270
 }
push $N2665e400
 Dot {
  name Dot6
  note_font_size 35
  note_font_color 0xffffff
  xpos -226
  ypos -1014
 }
set N32ff8000 [stack 0]
 Dot {
  name Dot7
  note_font_size 35
  note_font_color 0xffffff
  xpos 284
  ypos -1014
 }
 Dot {
  name Dot5
  note_font_size 35
  note_font_color 0xffffff
  xpos 284
  ypos -854
 }
set N32e14400 [stack 0]
 Log2Lin {
  operation lin2log
  name Log2Lin1
  xpos 400
  ypos -858
  disable {{!colorSpace}}
 }
 Keyer {
  operation "luminance key"
  range {{threshold} {threshold+1} {threshold+1} {threshold+1}}
  name Keyer1
  xpos 400
  ypos -712
 }
push $N32e14400
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy1
  xpos 250
  ypos -712
  disable {{"threshold > 0 ? 0 : 1"}}
 }
 Grade {
  channels {{{parent.Blur_0.channels}}}
  white {{parent.intensity}}
  name Intensity
  xpos 250
  ypos -610
 }
 Premult {
  channels {{{parent.Blur_0.channels}}}
  name Premult1
  xpos 250
  ypos -514
  disable {{"threshold > 0 ? 0 : 1"}}
 }
push $N32ff8000
 Remove {
  name Remove1
  label "\[if \{ \[lsearch \"rgb rgba\"  \[value channels]] != -1 \} \{ return \"(\[value channels])\n\" \} else \{ return \"\"\}]\[if \{ \[value channels2] != \"none\"\} \{return \"(\[value channels2])\"\} else \{return \" \"\}]\[if \{ \[value channels3] != \"none\"\} \{return \"\n(\[value channels3])\"\} else \{return \" \"\}]\[if \{ \[value channels4] != \"none\"\} \{return \"\n(\[value channels4])\"\} else \{return \" \"\}]"
  xpos -260
  ypos -424
 }
 AddChannels {
  channels rgba
  name AddChannels1
  xpos -260
  ypos -274
 }
set N32c3f200 [stack 0]
 Merge2 {
  inputs 2+1
  operation copy
  bbox B
  Achannels {{{parent.Blur_0.channels}}}
  Bchannels {{{parent.Blur_0.channels}}}
  output {{{parent.Blur_0.channels}}}
  also_merge {{{parent.Blur_0.channels}}}
  name Copy
  label "mix: \[value mix] (\[value bbox])"
  xpos 250
  ypos -280
 }
 NoOp {
  name Begin
  tile_color 0x3066ff
  xpos 250
  ypos -125
 }
set N32b11200 [stack 0]
 Blur {
  channels {{{parent.Blur_0.channels}}}
  size {{"parent.type == 0 ? parent.diffusion*pow(2,int(\[string range \[value name] 5 end])) : parent.diffusion*2*int(\[string range \[value name] 5 end])"} {"parent.type == 0 ? parent.diffusion*pow(2,int(\[string range \[value name] 5 end])) : parent.diffusion*2*int(\[string range \[value name] 5 end])"}}
  filter {{parent.Blur_0.filter}}
  quality {{parent.Blur_0.quality}}
  crop {{parent.Blur_0.crop}}
  name Blur_4
  xpos 650
  ypos 9
 }
 Multiply {
  channels {{{parent.Blur_0.channels}}}
  value {{"1/pow((1/falloff),int(\[string range \[value name] 9 end]))"}}
  name Multiply_4
  xpos 650
  ypos 128
 }
push $N32b11200
 Blur {
  channels {{{parent.Blur_0.channels}}}
  size {{"parent.type == 0 ? parent.diffusion*pow(2,int(\[string range \[value name] 5 end])) : parent.diffusion*2*int(\[string range \[value name] 5 end])"} {"parent.type == 0 ? parent.diffusion*pow(2,int(\[string range \[value name] 5 end])) : parent.diffusion*2*int(\[string range \[value name] 5 end])"}}
  filter {{parent.Blur_0.filter}}
  quality {{parent.Blur_0.quality}}
  crop {{parent.Blur_0.crop}}
  name Blur_3
  xpos 550
  ypos 9
 }
 Multiply {
  channels {{{parent.Blur_0.channels}}}
  value {{"1/pow((1/falloff),int(\[string range \[value name] 9 end]))"}}
  name Multiply_3
  xpos 550
  ypos 128
 }
push $N32b11200
 Blur {
  channels {{{parent.Blur_0.channels}}}
  size {{"parent.type == 0 ? parent.diffusion*pow(2,int(\[string range \[value name] 5 end])) : parent.diffusion*2*int(\[string range \[value name] 5 end])"} {"parent.type == 0 ? parent.diffusion*pow(2,int(\[string range \[value name] 5 end])) : parent.diffusion*2*int(\[string range \[value name] 5 end])"}}
  filter {{parent.Blur_0.filter}}
  quality {{parent.Blur_0.quality}}
  crop {{parent.Blur_0.crop}}
  name Blur_2
  xpos 450
  ypos 9
 }
 Multiply {
  channels {{{parent.Blur_0.channels}}}
  value {{"1/pow((1/falloff),int(\[string range \[value name] 9 end]))"}}
  name Multiply_2
  xpos 450
  ypos 128
 }
push $N32b11200
 Blur {
  channels {{{parent.Blur_0.channels}}}
  size {{"parent.type == 0 ? parent.diffusion*pow(2,int(\[string range \[value name] 5 end])) : parent.diffusion*2*int(\[string range \[value name] 5 end])"} {"parent.type == 0 ? parent.diffusion*pow(2,int(\[string range \[value name] 5 end])) : parent.diffusion*2*int(\[string range \[value name] 5 end])"}}
  filter {{parent.Blur_0.filter}}
  quality {{parent.Blur_0.quality}}
  crop {{parent.Blur_0.crop}}
  name Blur_1
  xpos 350
  ypos 9
 }
 Multiply {
  channels {{{parent.Blur_0.channels}}}
  value {{"1/pow((1/falloff),int(\[string range \[value name] 9 end]))"}}
  name Multiply_1
  xpos 350
  ypos 128
 }
push $N32b11200
 Blur {
  channels rgb
  size {{diffusion}}
  crop {{parent.crop}}
  name Blur_0
  xpos 250
  ypos 9
 }
 Multiply {
  channels {{{parent.Blur_0.channels}}}
  name Multiply_0
  xpos 250
  ypos 128
 }
 Merge2 {
  inputs 2
  operation plus
  Achannels {{{parent.Blur_0.channels}}}
  Bchannels {{{parent.Blur_0.channels}}}
  output {{{parent.Blur_0.channels}}}
  also_merge {{{parent.Blur_0.channels}}}
  name Merge_1
  label "mix: \[value mix] (\[value bbox])"
  xpos 350
  ypos 228
 }
set N32e4f000 [stack 0]
 Merge2 {
  inputs 2
  operation plus
  Achannels {{{parent.Blur_0.channels}}}
  Bchannels {{{parent.Blur_0.channels}}}
  output {{{parent.Blur_0.channels}}}
  also_merge {{{parent.Blur_0.channels}}}
  name Merge_2
  label "mix: \[value mix] (\[value bbox])"
  xpos 450
  ypos 228
 }
set N32e4f400 [stack 0]
 Merge2 {
  inputs 2
  operation plus
  Achannels {{{parent.Blur_0.channels}}}
  Bchannels {{{parent.Blur_0.channels}}}
  output {{{parent.Blur_0.channels}}}
  also_merge {{{parent.Blur_0.channels}}}
  name Merge_3
  label "mix: \[value mix] (\[value bbox])"
  xpos 550
  ypos 228
 }
set N32e4f800 [stack 0]
 Merge2 {
  inputs 2
  operation plus
  Achannels {{{parent.Blur_0.channels}}}
  Bchannels {{{parent.Blur_0.channels}}}
  output {{{parent.Blur_0.channels}}}
  also_merge {{{parent.Blur_0.channels}}}
  name Merge_4
  label "mix: \[value mix] (\[value bbox])"
  xpos 650
  ypos 228
 }
push $N32e4f800
push $N32e4f400
push 0
push $N32e4f000
push $N32c3f200
 NoOp {
  name Connect
  xpos -260
  ypos 428
 }
 Dissolve {
  inputs 5+1
  channels {{{parent.Blur_0.channels}}}
  which {{parent.menu.iteration}}
  name Exponent
  xpos 250
  ypos 428
 }
 NoOp {
  name End
  tile_color 0x3066ff
  xpos 250
  ypos 542
 }
 Multiply {
  channels {{{parent.Blur_0.channels}}}
  value {{1/parent.Exponent.which}}
  name normalize
  label "value: \[value value]"
  xpos 250
  ypos 632
  disable {{"iteration == 0 ? 1 : !parent.normalize "}}
 }
 Crop {
  box {{"min(0, Input.bbox.x)"} {"min(0, Input.bbox.y)"} {"max(width, Input.bbox.r)"} {"max(height, Input.bbox.t)"}}
  intersect true
  name Crop1
  label "Safety Crop"
  xpos 250
  ypos 704
  disable {{!parent.crop}}
 }
 Expression {
  expr0 isnan(r)?0:r
  expr1 isnan(g)?0:g
  expr2 isnan(b)?0:b
  expr3 isnan(a)?0:a
  name NAN
  label Safety
  xpos 250
  ypos 776
 }
 Multiply {
  channels {{{parent.Blur_0.channels}}}
  value {{parent.mix}}
  name Mix
  label "value: \[value value]"
  xpos 250
  ypos 872
 }
 Dot {
  name Dot2
  note_font_size 35
  note_font_color 0xffffff
  xpos 284
  ypos 1032
 }
 Dot {
  name Dot8
  note_font_size 35
  note_font_color 0xffffff
  xpos -446
  ypos 1032
 }
set N32e97600 [stack 0]
 Dot {
  name Dot3
  note_font_size 35
  note_font_color 0xffffff
  xpos -446
  ypos 1194
 }
push $N32e97600
push $N32f39600
 Merge2 {
  inputs 2
  operation plus
  Achannels {{{parent.Blur_0.channels}}}
  Bchannels {{{parent.Blur_0.channels}}}
  output {{{parent.Blur_0.channels}}}
  also_merge {{{parent.Blur_0.channels}}}
  name Plus
  label "mix: \[value mix] (\[value bbox])"
  xpos -630
  ypos 1022
 }
 Switch {
  inputs 2
  which {{!!parent.source}}
  name Switch1
  xpos -630
  ypos 1190
 }
 Copy {
  inputs 2
  channels all
  name Copy2
  xpos -630
  ypos 1274
 }
 Clamp {
  channels alpha
  name Clamp1
  xpos -630
  ypos 1376
 }
 Output {
  name Output1
  xpos -630
  ypos 1526
 }
 NoOp {
  inputs 0
  name menu
  knobChanged "\ngrp = nuke.thisGroup()\nk = nuke.thisKnob()\nn = nuke.thisNode()\n\nqualityLow = nuke.thisNode().knob('qualityLowEnd').getValue()\nqualityHigh = nuke.thisNode().knob('qualityHighEnd').getValue()\nqualityValue = nuke.thisNode().knob('iteration').getValue()\n\n\n#iterations done here\nif k.name() == 'iteration' :\n    if qualityValue < qualityLow:\n        qualityValue = qualityLow\n    elif qualityValue > qualityHigh:\n          qualityValue = qualityHigh\n    grp\['iteration'].setValue(qualityValue)\n    \n\n    \n\n    iteration = int(grp\['iteration'].value())\n\n\n\n\n#how to connect    \n    grp.begin()\n    begin = nuke.toNode('Begin')\n    end = nuke.toNode('End')\n    dissolve = nuke.toNode('Exponent')\n    blur0 = nuke.toNode('Multiply_0')\n    connect = nuke.toNode('Connect')\n    Xpos = blur0.xpos()\n    Ypos = blur0.ypos()\n   \n    \n#Making sure these nodes do not get deleted no matter what\n    for n in nuke.allNodes('Blur'):\n        if n.name() not in \['Blur_0'] and n is not blur0:\n            nuke.delete(n)\n    for n in nuke.allNodes('Multiply'):\n        if n.name() not in \['Multiply_0','normalize','AlphaClamp','Mix']:\n            nuke.delete(n)\n    for n in nuke.allNodes('Merge2'):\n        if n.name() not in \['Merge','Plus','Mask','Copy']:\n            nuke.delete(n)\n    for n in nuke.allNodes('Dissolve'):\n        if n.name() not in \['Exponent','Plus','Mask','Copy']:\n            nuke.delete(n)\n\n            \n    nuke.delete(dissolve)\n    dissolve = nuke.nodes.Dissolve(xpos = Xpos,ypos = Ypos+300)\n    dissolve.setName('Exponent')\n    dissolve.setInput(0, connect)\n    dissolve\['channels'].setExpression('parent.Blur_0.channels')\n    dissolve\['which'].setExpression('parent.menu.iteration')\n    end.setInput(0,dissolve)   \n            \n\n#creating the nodes for iterations    \n    new=\[]    \n    \n    for n in range(0,iteration+1):\n\n        blur=nuke.nodes.Blur(xpos = Xpos+(n+1)*100,ypos= Ypos-119)\n        blur.setName('Blur_'+str(n+1))\n        blur\['channels'].setExpression('parent.Blur_0.channels')\n        blur\['size'].setValue(\[0,0])\n        blur\['size'].setExpression('parent.type == 0 ? parent.diffusion*pow(2,int(\[string range \[value name] 5 end])) : parent.diffusion*2*int(\[string range \[value name] 5 end])')\n        blur\['crop'].setExpression('parent.Blur_0.crop')\n        blur\['quality'].setExpression('parent.Blur_0.quality')\n        blur\['filter'].setExpression('parent.Blur_0.filter')\n        blur.setInput(0,begin)\n\n\n\n        CC=nuke.nodes.Multiply(xpos = Xpos+(n+1)*100,ypos= Ypos+0)\n        CC.setName('Multiply_'+str(n+1))\n        CC\['channels'].setExpression('parent.Blur_0.channels')\n        CC\['value'].setExpression('1/pow((1/falloff),int(\[string range \[value name] 9 end]))')\n        CC.setInput(0,blur)\n        \n             \n        merge = nuke.nodes.Merge2(xpos = Xpos+(n+1)*100,ypos= Ypos+100)\n        merge.setName('Merge_'+str(n+1))\n        merge\['operation'].setValue('plus')\n        merge\['Achannels'].setExpression('parent.Blur_0.channels')\n        merge\['Bchannels'].setExpression('parent.Blur_0.channels')\n        merge\['output'].setExpression('parent.Blur_0.channels')\n        merge\['also_merge'].setExpression('parent.Blur_0.channels')\n        merge\['label'].setValue('mix: \[value mix] (\[value bbox])')\n        new.append(merge)\n        merge.setInput(1,CC)\n        if n != 0:\n            merge.setInput(0, new\[n-1])\n        else:\n            merge.setInput(0, blur0)\n  \n\n#dissolve input setups\n        if n==0:\n            dissolve.setInput(n+1,merge)\n        else :\n            dissolve.setInput(n+2,merge)\n"
  xpos -1030
  ypos -1234
  hide_input true
  addUserKnob {20 User}
  addUserKnob {7 iteration R 0 10}
  iteration 3
  addUserKnob {26 qualityControl l "<b>Quality Control</b>"}
  addUserKnob {3 qualityLowEnd l quality}
  addUserKnob {3 qualityHighEnd l "" -STARTLINE}
  qualityHighEnd 100
 }
end_group