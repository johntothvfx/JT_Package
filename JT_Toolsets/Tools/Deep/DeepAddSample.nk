Group {
 name DeepAddSample1
 help "Adds deep samples by offsetting the image in z and merging it back over the original image."
 knobChanged "k = nuke.thisKnob()\nn = nuke.thisNode()\n\nif k.name() == 'inputChange':\n    other_class = \{'Group', 'NoOp', 'Gizmo', 'Dot', 'Switch'\}\n    scanline_Class = set(\['ScanlineRender'] + \[f'ScanlineRender\{i\}' for i in range(1, 100)])\n    deep_approve_class = other_class.union(scanline_Class, \{'Deep'\})\n    deep_denied_class = set(\['DeepToImage'] + \[f'DeepToImage\{i\}' for i in range(1, 100)])\n\n    for i in range(2):\n        inp = n.input(i)\n        if inp:\n            cls = inp.Class()\n            if i == 0 and (not any(d in cls for d in deep_denied_class) and (cls.startswith('Deep') or cls in deep_approve_class)):\n                continue\n            n.setInput(i, None)\n"
 tile_color 0x60ff
 selected true
 addUserKnob {20 deepAddSample l "Deep Add Sample"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION DeepAddSample
 addUserKnob {1 output l INVISIBLE +INVISIBLE}
 output "\[value sample]"
 addUserKnob {41 sample l add t "adds a new deep sample by transforming the image in z and combining it with the original frame.\n\n<b>WARNING: </b>\nThis has a parental control (Quality Control) on it so people don't accidently break something.\nBy default the quality control is 0 - 100 (this mean you cannot go above or below a certain value).\nThis can be lifted inside the node under the quality control section. \n\nPLEASE ONLY DO THIS IF YOU KNOW WHAT YOU ARE DOING.\n" T menu.sample}
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Deep Add Sample</font><font color=#000060> v1.0"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "overview of the node" +STARTLINE T "<br><strong>•</br> \n<b>Deep Add Sample</b> translates the<br>deep in z and combines it with the original<br>deep to add a new sample.\n\n<br>\n<br>\n<b><a href=\"https://johntothvfx.com\" style=\"color:#000060;\">John Toth <b>© 2024 <br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#000060\">Tool Demo" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message('coming soon')" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#000060\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "version_number = \"1.0.1\"\ncontext = \"Deep\"\nmodified_date = \"30th July 2024\"\ndeveloper = \"John Toth © 2024\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- adds a deep sample to each pixel by offsetting the frame in z.\n\"\"\"\nthank_you = \"\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    #f\"<b>Thank You:</b><br>\{thank_you\}<br>\{enter\}\"\n    f\"\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)"}
}
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x23232301
  label "<center>Don't Touch\n\n"
  note_font "Source Code Pro Light"
  note_font_size 40
  note_font_color 0xee453cff
  xpos 422
  ypos -376
  bdwidth 257
  bdheight 175
 }
 Input {
  inputs 0
  name Input
  label "\[value number]"
  xpos 250
  ypos -376
 }
 Dot {
  name Dot1
  note_font_size 35
  note_font_color 0xffffff
  xpos 284
  ypos -198
 }
set N72086800 [stack 0]
 Dot {
  name Dot2
  note_font_size 35
  note_font_color 0xffffff
  xpos 104
  ypos -198
 }
 DeepToImage2 {
  name DeepToImage1
  xpos 70
  ypos -34
 }
 Remove {
  channels depth
  channels2 deep
  name Remove1
  label "\[if \{ \[lsearch \"rgb rgba\"  \[value channels]] != -1 \} \{ return \"(\[value channels])\n\" \} else \{ return \"\"\}]\[if \{ \[value channels2] != \"none\"\} \{return \"(\[value channels2])\"\} else \{return \" \"\}]\[if \{ \[value channels3] != \"none\"\} \{return \"\n(\[value channels3])\"\} else \{return \" \"\}]\[if \{ \[value channels4] != \"none\"\} \{return \"\n(\[value channels4])\"\} else \{return \" \"\}]"
  xpos 70
  ypos 50
 }
 Dot {
  name Dot3
  note_font_size 35
  note_font_color 0xffffff
  xpos 104
  ypos 258
 }
push $N72086800
 NoOp {
  name Begin
  tile_color 0x3066ff
  xpos 250
  ypos -130
 }
 DeepMerge2 {
  name DeepMerge1
  xpos 250
  ypos 62
 }
 NoOp {
  name End
  tile_color 0x3066ff
  selected true
  xpos 250
  ypos 158
 }
 DeepRecolor {
  inputs 2
  channels all
  targetInputAlpha true
  name DeepRecolor1
  label "\[expr \{ \[value targetInputAlpha] ?  \"(target input alpha)\" : \"\"\}]"
  xpos 250
  ypos 242
  disable {{"parent.sample > 0 ? 0 : 1"}}
 }
 Output {
  name Output1
  xpos 250
  ypos 422
 }
 NoOp {
  inputs 0
  name menu
  knobChanged "\ngrp = nuke.thisGroup()\nk = nuke.thisKnob()\nn = nuke.thisNode()\n\nqualityLow = nuke.thisNode().knob('qualityLowEnd').getValue()\nqualityHigh = nuke.thisNode().knob('qualityHighEnd').getValue()\nqualityValue = nuke.thisNode().knob('sample').getValue()\n\noffset = nuke.thisNode().knob('offset').getValue()\n\n#iterations done here\nif k.name() == 'sample' :\n    if qualityValue < qualityLow:\n        qualityValue = qualityLow\n    elif qualityValue > qualityHigh:\n          qualityValue = qualityHigh\n    grp\['sample'].setValue(qualityValue)\n    \n\n    \n\n    iteration = int(grp\['sample'].value())\n\n\n\n\n#how to connect    \n    grp.begin()\n    begin = nuke.toNode('Begin')\n    end = nuke.toNode('End')\n    deepmerge = nuke.toNode('DeepMerge1')\n    deeptransform = nuke.toNode('DeepTransform1')\n    Xpos = begin.xpos()\n    Ypos = begin.ypos()\n   \n    \n#Making sure these nodes do not get deleted no matter what\n    for n in nuke.allNodes('DeepMerge2'):\n        if n.name() not in \['DeepMerge1']:\n            nuke.delete(n)\n    for n in nuke.allNodes('DeepTransform'):\n        if n.name() not in \['']:\n            nuke.delete(n)\n\n            \n    nuke.delete(deepmerge)\n    deepmerge = nuke.nodes.DeepMerge2(xpos = Xpos,ypos = Ypos + 200)\n    deepmerge.setName('DeepMerge1')\n    deepmerge.setInput(0, begin)\n    end.setInput(0,deepmerge)   \n            \n\n#creating the nodes for iterations    \n    new=\[]    \n    \n    for n in range(0,iteration):\n\n        deeptransform = nuke.nodes.DeepTransform(xpos = Xpos + (n + 1) * 100,ypos= Ypos + 100)\n        deeptransform.setName('DeepTransform_'+str(n+1))\n        deeptransform\['translate'].setValue(\[0,0,0])\n        deeptransform\['translate'].setExpression('(' + str(offset) + ' * 1 * int(\[string range \[value name] 14 end]))', 2)\n        deeptransform.setInput(0,begin)\n        new.append(deeptransform)\n        deeptransform.setInput(1,deeptransform)\n\n\n\n\n#dissolve input setups\n        if n==0:\n            deepmerge.setInput(n + 1,deeptransform)\n        else :\n            deepmerge.setInput(n+1,deeptransform)\n\n"
  xpos 510
  ypos -274
  hide_input true
  addUserKnob {20 User}
  addUserKnob {3 sample}
  addUserKnob {7 offset}
  offset 0.0001
  addUserKnob {26 qualityControl l "<b>Quality Control</b>"}
  addUserKnob {3 qualityLowEnd l quality}
  addUserKnob {3 qualityHighEnd l "" -STARTLINE}
  qualityHighEnd 100
 }
end_group
