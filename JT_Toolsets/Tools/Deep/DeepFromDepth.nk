Group {
 name DeepFromDepth1
 help "Uses the depth information to convert the input image to deep data.\n"
 onCreate "n = nuke.thisNode()\n\nif n.knob('useDepthAlpha').value() == 1:    \n    n\['alphaChannel'].setEnabled(False)\nelse:\n    n\['alphaChannel'].setEnabled(True)"
 knobChanged "import re\n\nn = nuke.thisNode()\nk = nuke.thisKnob()\n\nif k.name() == 'inputChange':\n    deepToImagePattern = re.compile(r'DeepToImage\\d*')\n    particlePattern = re.compile(r'Particle\\d*')\n    if n.input(0) is not None:\n        in_class = n.input(0).Class()\n        if (not deepToImagePattern.match(in_class) and 'Deep' in in_class) or particlePattern.match(in_class):\n            n.setInput(0, None)\n"
 tile_color 0x66ff
 selected true
 addUserKnob {20 deepToDepth l "Deep From Depth"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION DeepFromDepth
 addUserKnob {41 channels t "The follow channels will be converted to deep data." T DeepRecolor2.channels}
 addUserKnob {41 depthChannel l "depth channel" t "Select the depth channel you want to use to convert into deep data.\n\n<b><i>Note:</b> Please note this is a must for the conversion to happen." T Shuffle21.in}
 addUserKnob {41 alphaChannel l "alpha channel" t "Select your alpha channel you want to use for the alpha of your deep.\n\n<b><i>Note:</b> Please note this is a must for the conversion to happen." T Shuffle21.in2}
 addUserKnob {41 premult l premultiplied t "Set whether the input needs premultiplying. \nWhen disabled, Depth to Deep assumes that the input is already premultiplied." T DeepFromImage2.premult}
 addUserKnob {41 useDepthAlpha l "use depth as alpha" -STARTLINE T menu.useDepthAlpha}
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Deep From Depth</font><font color=#000060> v1.0"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "overview of the node" +STARTLINE T "<br><strong>•</br> \n<b>Deep From Depth</b> uses the depth to<br>convert the input image to deep data.\n<br></b><i>\n<br><strong>•</br> It is recommended to convert your<br>depth data from <b>(1/z) Normalized<br>depth</b> to <b>(Z) Real world units</b><br>before this node.\n\n<br><br></i>\n<b><a href=\"https://johntothvfx.com\" style=\"color:#000060;\">John Toth <b>© 2023 <br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#000060\">Tool Demo" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message('coming soon')" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#000060\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "version_number = \"1.0.2\"\ncontext = \"Deep\"\nmodified_date = \"30th July 2024\"\ndeveloper = \"John Toth © 2023\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- uses the depth/alpha to convert the image into deep data\n\"\"\"\nthank_you = \"\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    #f\"<b>Thank You:</b><br>\{thank_you\}<br>\{enter\}\"\n    f\"\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)"}
}
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x23232301
  label "<center>Don't Touch\n\n"
  note_font "Source Code Pro Light"
  note_font_size 40
  note_font_color 0xee453cff
  xpos -1001
  ypos 141
  bdwidth 243
  bdheight 149
 }
 Input {
  inputs 0
  name Input
  label "\[value number]"
  xpos -598
  ypos 152
 }
 Dot {
  name Dot3
  note_font_size 35
  note_font_color 0xffffff
  xpos -564
  ypos 243
 }
set N47659a00 [stack 0]
 Dot {
  name Dot1
  note_font_size 35
  note_font_color 0xffffff
  xpos -394
  ypos 243
 }
set N4768d000 [stack 0]
 Dot {
  name Dot2
  note_font_size 35
  note_font_color 0xffffff
  xpos -226
  ypos 243
 }
 Remove {
  channels depth
  name Remove1
  label "\[if \{ \[lsearch \"rgb rgba\"  \[value channels]] != -1 \} \{ return \"(\[value channels])\n\" \} else \{ return \"\"\}]\[if \{ \[value channels2] != \"none\"\} \{return \"(\[value channels2])\"\} else \{return \" \"\}]\[if \{ \[value channels3] != \"none\"\} \{return \"\n(\[value channels3])\"\} else \{return \" \"\}]\[if \{ \[value channels4] != \"none\"\} \{return \"\n(\[value channels4])\"\} else \{return \" \"\}]"
  xpos -260
  ypos 440
 }
 Dot {
  name Dot4
  note_font_size 35
  note_font_color 0xffffff
  xpos -226
  ypos 714
 }
push $N4768d000
 Shuffle {
  in depth
  red black
  green black
  blue black
  alpha red
  name Shuffle1
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos -428
  ypos 292
 }
 Expression {
  expr3 a==0?a:a/a
  name Expression11
  label "Divide Alpha by itself"
  xpos -428
  ypos 368
 }
push $N47659a00
 Shuffle {
  in depth
  in2 alpha
  red blue
  green blue
  alpha alpha2
  name Shuffle21
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos -598
  ypos 292
 }
 Copy {
  inputs 2
  channels alpha
  name Copy1
  xpos -598
  ypos 362
  disable {{!parent.useDepthAlpha}}
 }
 Shuffle {
  red blue
  green blue
  out deep
  name Shuffle28
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos -598
  ypos 436
 }
 DeepFromImage {
  name DeepFromImage2
  xpos -598
  ypos 566
 }
 DeepExpression {
  chans1 deep
  rgba.red 0
  rgba.green 0
  rgba.blue 0
  rgba.alpha a
  deep.front r==0?inf:r
  deep.back g==0?inf:g
  name DeepExpression1
  xpos -598
  ypos 590
 }
 DeepRecolor {
  inputs 2
  channels all
  name DeepRecolor2
  label "\[expr \{ \[value targetInputAlpha] ?  \"(target input alpha)\" : \"\"\}]"
  xpos -598
  ypos 698
 }
 Output {
  name Output1
  xpos -598
  ypos 854
 }
 NoOp {
  inputs 0
  name menu
  knobChanged "grp = nuke.thisGroup()\ntk = nuke.thisKnob()\n\nif tk.name() == \"useDepthAlpha\" and tk.value() == True:\n    grp.knob('alphaChannel').setEnabled(False)\nelse:\n    grp.knob('alphaChannel').setEnabled(True)\n"
  selected true
  xpos -920
  ypos 230
  addUserKnob {20 User}
  addUserKnob {6 useDepthAlpha l "use depth as alpha" t "Set whether your input image has an alpha or not.\nWhen enabled, Depth from Deep will use the selected depth channel to generate an alpha channel." +STARTLINE}
 }
end_group
