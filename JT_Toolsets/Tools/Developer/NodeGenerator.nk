Group {
 name NodeGenerator1
 help "Creates a NoOp or group node that is templates to the package, ready for node generation."
 tile_color 0xaaaaaaff
 label "(\[value node])\n"
 selected true
 addUserKnob {20 nodeGenerator l "Node Generator"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION NodeGenerator
 addUserKnob {4 node t "Type of node that will be created" M {NoOp Group "" ""}}
 addUserKnob {4 family t "This will automatically fill in the colors of the node created based on the family class." M {3D channel color deep draw filter keyer merge optical other particle utility time transform "quality check" developer custom "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 family custom
 addUserKnob {40 color l custom t "custom color" -STARTLINE}
 color 0x4766a1ff
 addUserKnob {22 createNode l "   create node   " t "Exports a base level for user to start building there tool.\n\nBase level for the JT Package" T "import nuke\n\nclass NodeGenerator:\n    def __init__(self, node):\n        self.node = node  # Initialize with the given node\n        self.node_type = self.node\['node'].value()  # Get the selected node type\n\n    @staticmethod\n    def interface_to_html(color):\n        # Extract the RGBA components from the integer value\n        red = (color >> 24) & 0xFF\n        green = (color >> 16) & 0xFF\n        blue = (color >> 8) & 0xFF\n        \n        # Format the color components as an HTML hex string\n        hex_color_html = '\{:02X\}\{:02X\}\{:02X\}'.format(red, green, blue)\n        \n        return hex_color_html\n\n\n    def family(self):\n        self.node_family = self.node\['family'].value()\n        self.color_integer = self.node\['color'].value()\n        \n        html_color = self.interface_to_html(self.color_integer)\n        \n        self.family_colors = \{\n            '3D': \[2617245951, 'CD0000'],\n            'channel': \[2654757887, '9E3C63'],\n            'color': \[2057961471, '7AA9FF'],\n            'deep': \[24831, '000060'],\n            'draw': \[None, 'CCCCCC'],\n            'filter': \[3430960895, 'CC804E'],\n            'keyer': \[16711935, '00FF00'],\n            'merge': \[1264502527, '4B5EC6'],\n            'optical': \[1565041151, '5D48A1'],\n            'particle': \[None, 'E7E7E7'],\n            'utility': \[679634175, '288264'],\n            'time': \[2963561983, 'B0A45D'],\n            'transform': \[2776279807, 'A57AAA'],\n            'quality check': \[2139062271, '7F7F7F'],\n            'developer': \[2863311615, 'AAAAAA'],\n            'custom': \[self.color_integer, html_color]\n        \}\n        \n        tile_color, text_color = self.family_colors.get(self.node_family, \[None, '000000'])\n        return tile_color, text_color\n\n    def add_common_knobs(self, node, text_color):\n        node_tab = nuke.Tab_Knob('node', 'Node')\n        classification = nuke.String_Knob('CLASSIFICATION', 'CLASSIFICATION')\n        inf_tab = nuke.Tab_Knob('info', 'Info')\n        version = nuke.Text_Knob('version', '')        \n        divider_001 = nuke.Text_Knob('divider_001', '')\n        bulletpoints = nuke.Text_Knob('bulletpoints', '')\n        divider_002 = nuke.Text_Knob('divider_002', '')\n        demo = nuke.PyScript_Knob(\n            'demo', \n            f'<a href=\"https://johntothvfx.com\"><span style=\"color:#\{text_color\}\">Tool Demo</span></a>'\n        )\n        log = nuke.PyScript_Knob(\n            'log', \n            f'<a href=\"https://johntothvfx.com\"><span style=\"color:#\{text_color\}\">Version Log</span></a>'\n        )\n\n        version.setValue(f'''<br><font size='5'>Node Name</font><font color=#\{text_color\}> v1.0</font>''')\n        version.setTooltip('Node version info, for more information look at version log')\n        bulletpoints.setValue(f'''<br><strong>•</strong><b>Node Name</b>\n<br><br>\n<b><a href=\"https://johntothvfx.com\" style=\"color:#\{text_color\};\">Developer Name © 2024</a></b><br>''')\n        bulletpoints.setTooltip('Overview of the node')\n        demo.setValue('nuke.message(\"coming soon\")')        \n        demo.setTooltip('Launches the web page where it will have more documentation or a video about the node.')\n        log.setValue('''\nversion_number = \"1.0.0\"\ncontext = \"Node Family\"\nmodified_date = \"18th November 1991\"\ndeveloper = \"Developers name © 1991\"\nsite = \"<a href='website linke here'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- discription of node here for version 1\n\"\"\"\nthank_you = \"thanks message here\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    f\"<b>Thank You:</b><br>\{thank_you\}<br>\{enter\}\"\n    f\"</i>\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)''')\n        log.setTooltip('''Contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made''')\n\n        node.addKnob(node_tab)\n        node.addKnob(classification)\n        node.addKnob(inf_tab)\n        node.addKnob(version)\n        node.addKnob(divider_001)\n        node.addKnob(bulletpoints)\n        node.addKnob(divider_002)\n        node.addKnob(demo)\n        node.addKnob(log)\n\n    def create_node(self):\n        base_x, base_y = self.node.xpos(), self.node.ypos()\n        tile_color, text_color = self.family()\n        \n        if text_color.startswith('0x'):\n            text_color = text_color\[2:]\n        \n        if self.node_type == 'Group':\n            with nuke.root():\n                group_node = nuke.createNode('Group', inpanel=False)\n                group_node.setName('EmptyNode')\n                group_node.setXpos(base_x + 100)\n                group_node.setYpos(base_y + 100)\n                group_node.setInput(0, None)\n                if tile_color is not None:\n                    group_node\['tile_color'].setValue(tile_color)\n                \n                with group_node:\n                    input_node = nuke.createNode('Input', inpanel=False)\n                    output_node = nuke.createNode('Output', inpanel=False)\n                    input_node.setName('Input')\n                    output_node.setName('Output')\n                    input_node.setXpos(-100)\n                    input_node.setYpos(0)\n                    output_node.setXpos(-100)\n                    output_node.setYpos(150)\n                    \n                    self.add_common_knobs(group_node, text_color)\n\n        else:\n            with nuke.thisParent():\n                created_node = nuke.createNode(self.node_type, inpanel=False)\n                created_node.setName('EmptyNode')\n                created_node.setXpos(base_x + 100)\n                created_node.setYpos(base_y + 100)\n                created_node.setInput(0, None)\n                if tile_color is not None:\n                    created_node\['tile_color'].setValue(tile_color)\n\n                self.add_common_knobs(created_node, text_color)\n\n# Create an instance of NodeGenerator with the current node\nnode_gen = NodeGenerator(nuke.thisNode())\nnode_gen.create_node()\n" +STARTLINE}
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" t "Node version info, for more information look at version log" +STARTLINE T "<br><font size='5'>Node Generator</font><font color=#AAAAAA> v1.0</font>"}
 addUserKnob {26 divider_001 l "" +STARTLINE}
 addUserKnob {26 bulletpoints l "" t "Overview of the node" +STARTLINE T "<br><strong>•</strong><b>Node Generator</b> exports either a<br>group or NoOp node with colors, info<br>tab, set to match the package format.\n<br><br>\nNode generation ready\n<br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#AAAAAA;\">John Toth © 2024</a></b><br>"}
 addUserKnob {26 divider_002 l "" +STARTLINE}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#AAAAAA\">Tool Demo</span></a>" t "Launches the web page where it will have more documentation or a video about the node." -STARTLINE +INVISIBLE T "nuke.message(\"coming soon\")"}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#AAAAAA\">Version Log</span></a>" t "Contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "# Constants\nversion_number = \"1.0.2\"\ncontext = \"DEVELOPER\"\nmodified_date = \"30th July 2024\"\ndeveloper = \"John Toth © 2024\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- Description of the node\n\"\"\"\nthank_you = \"Thanks message here\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = f\"<b>Date Last Modified: </b>\{modified_date\}\"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    f\"</i>\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)\n"}
}
 Input {
  inputs 0
  name Input
  label "\[value number]"
  xpos 209
  ypos -13
 }
 Output {
  name Output1
  xpos 209
  ypos 87
 }
end_group
