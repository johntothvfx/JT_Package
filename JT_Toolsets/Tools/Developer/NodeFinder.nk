NoOp {
 name NodeFinder1
 tile_color 0xaaaaaaff
 label "\n\[expr \{\[numvalue gizmoNodes] ? \"(Gizmo)\" : \"\" \}]\n\[expr \{\[numvalue groupNodes] ? \"(Group)\" : \"\" \}]\n\[expr \{\[numvalue pluginNodes] ? \"(plugin)\" : \"\" \}]\n\n-"
 selected true
 addUserKnob {20 nodeFinder l "Node Finder"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION NodeFinder
 addUserKnob {6 gizmoNodes l "gizmo nodes" +STARTLINE}
 gizmoNodes true
 addUserKnob {6 groupNodes l "group nodes" +STARTLINE}
 groupNodes true
 addUserKnob {6 pluginNodes l "plugin nodes" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {22 findNodes l "   find nodes   " T "import nuke\nimport os\n\n# PySide compatibility\ntry:\n    from PySide6 import QtWidgets, QtCore\nexcept ImportError:\n    from PySide2 import QtWidgets, QtCore\n\nfinder_dialog = None\n\ndef find_all_gizmos(main_node):\n    if not main_node or not main_node.knob(\"gizmoNodes\") or not main_node.knob(\"gizmoNodes\").value():\n        return \[]\n\n    gizmos = \[]\n\n    def recurse(nodes, context_chain=\[]):\n        for n in nodes:\n            if n.knob(\"gizmo_file\"):\n                gizmos.append((n, list(context_chain)))\n            elif isinstance(n, nuke.Group):\n                n.begin()\n                recurse(nuke.allNodes(), context_chain + \[n])\n                n.end()\n\n    recurse(nuke.allNodes())\n    return gizmos\n\ndef find_all_groups(main_node):\n    if not main_node or not main_node.knob(\"groupNodes\") or not main_node.knob(\"groupNodes\").value():\n        return \[]\n\n    groups = \[]\n\n    def recurse(nodes, context_chain=\[]):\n        for n in nodes:\n            if isinstance(n, nuke.Group) and not n.knob(\"gizmo_file\"):\n                groups.append((n, list(context_chain)))\n                n.begin()\n                recurse(nuke.allNodes(), context_chain + \[n])\n                n.end()\n\n    recurse(nuke.allNodes())\n    return groups\n\ndef find_all_plugins(main_node):\n    if not main_node or not main_node.knob(\"pluginNodes\") or not main_node.knob(\"pluginNodes\").value():\n        return \[]\n\n    #  USER-MAINTAINED LIST — Add your plugin node classes here:\n    plugin_class_whitelist = getattr(nuke, 'plugin_override_list', \[\n        'Relens',\n        'BorisFX_Glow',\n        'RedGiant_Unmult',\n        'ReVisionFX_MotionBlur'\n    ])\n\n\n    plugins = \[]\n\n    def is_inside_gizmo(context_chain):\n        return any(grp.knob(\"gizmo_file\") for grp in context_chain)\n\n    def recurse(nodes, context_chain=\[]):\n        for n in nodes:\n            class_name = n.Class()\n            is_group = isinstance(n, nuke.Group)\n            is_gizmo = n.knob(\"gizmo_file\") is not None\n            inside_gizmo = is_inside_gizmo(context_chain)\n\n            if (\n                class_name in plugin_class_whitelist and\n                not is_group and\n                not is_gizmo and\n                not inside_gizmo\n            ):\n                plugins.append((n, list(context_chain)))\n\n            if is_group:\n                n.begin()\n                recurse(nuke.allNodes(), context_chain + \[n])\n                n.end()\n\n    recurse(nuke.allNodes())\n    return plugins\n\ndef zoom_to_node(node, context_chain, open_properties=False):\n    while nuke.thisGroup() != nuke.root():\n        nuke.exit()\n\n    nuke.showDag(nuke.root())\n\n    if not context_chain:\n        for n in nuke.allNodes(recurseGroups=True):\n            n.setSelected(False)\n        node.setSelected(True)\n        nuke.zoom(1, \[node.xpos(), node.ypos()])\n        if open_properties:\n            nuke.show(node)\n        return\n\n    for group in context_chain:\n        nuke.showDag(group)\n\n    for group in context_chain:\n        group.begin()\n\n    for n in nuke.allNodes(recurseGroups=True):\n        n.setSelected(False)\n\n    node.setSelected(True)\n    nuke.zoom(1, \[node.xpos(), node.ypos()])\n    if open_properties:\n        nuke.show(node)\n\n    for _ in context_chain\[::-1]:\n        nuke.root().end()\n\ndef show_gizmo_finder_ui():\n    global finder_dialog\n\n    main_node = nuke.thisNode()\n    gizmo_items = \[(\"Gizmo\", n, c) for n, c in find_all_gizmos(main_node)]\n    group_items = \[(\"Group\", n, c) for n, c in find_all_groups(main_node)]\n    plugin_items = \[(\"Plugin\", n, c) for n, c in find_all_plugins(main_node)]\n\n    total_found = len(gizmo_items) + len(group_items) + len(plugin_items)\n\n    finder_dialog = QtWidgets.QDialog(parent=QtWidgets.QApplication.activeWindow())\n    finder_dialog.setWindowTitle(\"Node Finder\")\n\n    row_height = 30\n    max_rows = 10\n    num_rows = min(total_found, max_rows)\n    finder_dialog.resize(500, 120 + (row_height * num_rows))\n\n    outer_layout = QtWidgets.QVBoxLayout(finder_dialog)\n    label = QtWidgets.QLabel(f\"Found \{total_found\} Node(s):\")\n    outer_layout.addWidget(label)\n\n    open_props_checkbox = QtWidgets.QCheckBox(\"Open Properties on Find\")\n    outer_layout.addWidget(open_props_checkbox)\n\n    scroll_area = QtWidgets.QScrollArea()\n    scroll_area.setWidgetResizable(True)\n\n    scroll_widget = QtWidgets.QWidget()\n    scroll_layout = QtWidgets.QVBoxLayout(scroll_widget)\n    scroll_layout.setSpacing(4)\n\n    def make_callback(node_name, context_chain):\n        return lambda: zoom_to_node(nuke.toNode(node_name), context_chain, open_properties=open_props_checkbox.isChecked())\n\n    def add_section_header(title):\n        header = QtWidgets.QLabel(f\"— \{title\} —\")\n        header.setStyleSheet(\"color: gray; font-weight: bold; margin: 4px;\")\n        scroll_layout.addWidget(header)\n\n    def add_node_list(items, label):\n        if items:\n            add_section_header(label)\n            for node_type, node, context in items:\n                row = QtWidgets.QHBoxLayout()\n                name_label = QtWidgets.QLabel(f\"\[\{node_type\}] \{node.fullName()\}\")\n                name_label.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)\n                name_label.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)\n                find_button = QtWidgets.QPushButton(\"Find\")\n                find_button.clicked.connect(make_callback(node.fullName(), context))\n                row.addWidget(name_label)\n                row.addStretch()\n                row.addWidget(find_button)\n                scroll_layout.addLayout(row)\n\n    add_node_list(gizmo_items, \"Gizmo Nodes\")\n    add_node_list(group_items, \"Group Nodes\")\n    add_node_list(plugin_items, \"Plugin Nodes\")\n\n    scroll_widget.setLayout(scroll_layout)\n    scroll_area.setWidget(scroll_widget)\n    outer_layout.addWidget(scroll_area)\n\n    close_btn = QtWidgets.QPushButton(\"Close\")\n    close_btn.clicked.connect(finder_dialog.close)\n    outer_layout.addWidget(close_btn)\n\n    finder_dialog.setLayout(outer_layout)\n    finder_dialog.show()\n\n# Run it\nshow_gizmo_finder_ui()\n" +STARTLINE}
 addUserKnob {20 developer l Developer}
 addUserKnob {4 index t "sets of operation will run on the code" M {all selection input "" ""}}
 addUserKnob {78 execute_order l order n 1}
 execute_order 1
 addUserKnob {43 code t "custom code field"}
 code "n = nuke.thisNode()\n\n# Define the temporary override list\nnuke.plugin_override_list = \[\n    'OpticalFlares',\n    'Relens',\n    'RedGiant_Unmult'\n]\n\n# Run the Node Finder\nn\['findNodes'].execute()\n\n# Clean up so it doesn’t persist after this\ndel nuke.plugin_override_list\n"
 addUserKnob {6 disable_function l "disable function" t "This makes this nodes function not executable making the code null." +STARTLINE}
 addUserKnob {22 execute T "import nuke\n\nn = nuke.thisNode().knob('disable_function').getValue()\nif n == 0:\n    exec(nuke.thisNode().knob('code').value())\nelse:\n    pass\n" +STARTLINE}
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Node Finder</font><font color=#AAAAAA> v1.0</font>"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" +STARTLINE T "<br><strong>•</strong><b>Node Finder</b> will display a list of group,<br>gizmos and 3rd party plugins nodes<br>found in the nuke script\n<br><br>\n<i>• Please be aware for plugins, each 3rd party<br> plugins will have to be added to the list as they<br>are installed either in developer tab or main<br>source code.\n</i><br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#AAAAAA;\">John Toth © 2025</a></b><br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#AAAAAA\">Tool Demo</span></a>" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message(\"coming soon\")" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#AAAAAA\">Version Log</span></a>" t "Contains information about this node, including classification, context, date last modified, developer notes, version number, version log, and year made." -STARTLINE T "# Constants\nversion_number = \"1.0.0\"\ncontext = \"Developer\"\nmodified_date = \"5th April 2025\"\ndeveloper = \"John Toth © 2025\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- Finds and lists all gizmo,group and 3rd party plugins nodes in the node graph. (plugins will have to be maintained manually)\n\"\"\"\nthank_you = \"Thanks message here\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = f\"<b>Date Last Modified: </b>\{modified_date\}\"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    f\"</i>\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)\n"}
}
