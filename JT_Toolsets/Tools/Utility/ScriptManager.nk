NoOp {
 name ScriptManager1
 help "A set of buttons that run certain functions all to do with the script.\n\nThis is useful to manage script."
 onCreate "import nuke\nimport nukescripts\n\n\n\n#------------------------------------------------------------------------------------------------------------------------\n#Script manager class\n#------------------------------------------------------------------------------------------------------------------------\n\n# Creating class for script management based on manager and operation settings\nclass ScriptManager_execute:\n    def __init__(self):\n        pass\n\n\n\n\t#------------------------------------------------------------------------------------------------------------------------\n\t# reveal all inputs \n\t#------------------------------------------------------------------------------------------------------------------------\n\n    def reveal_all_inputs(self):\n        hidden_nodes = \[node.name() for node in nuke.allNodes() if node.knob('hide_input').value()]\n        for node_name in hidden_nodes:\n            nuke.toNode(node_name).knob('hide_input').setValue(False)\n        hidden_nodes.sort()\n        print(\"Hidden inputs that are now unhidden:\")\n        for node in hidden_nodes:\n            print(node)\n\n\n\t#------------------------------------------------------------------------------------------------------------------------\n\t# kill all viewers (including groups)\n\t#------------------------------------------------------------------------------------------------------------------------\n\n    def kill_all_viewers(self):      \n        # Loop through all nodes in nuke\n        for node in nuke.allNodes():\n            if 'Viewer' in node.Class():\n                try:\n                    nuke.delete(node)\n                except Exception as e:\n                    print(f\"Error deleting node \{node.name()\}: \{e\}\")\n\n        # Loop through all nodes in nukescripts.snap3d\n        for node in nukescripts.snap3d.allNodes():\n            if 'Viewer' in node.Class():\n                try:\n                    nuke.delete(node)\n                except Exception as e:\n                    print(f\"Error deleting node \{node.name()\}: \{e\}\")\n\n\n\n\t#------------------------------------------------------------------------------------------------------------------------\n\t# bake expressions\n\t#------------------------------------------------------------------------------------------------------------------------\n\n    def bake_expressions(self, node_mode):\n        nodes_to_process = nuke.allNodes(recurseGroups=False) if node_mode == \"all\" else nuke.selectedNodes()\n        if not nodes_to_process:\n            nuke.message(\"No node is selected\")\n            return\n        \n        root_node = nuke.root()\n        frame_range_panel = nukescripts.FrameRangePanel(root_node.frameRange().first(), root_node.frameRange().last())\n        step_knob = nuke.Double_Knob(\"step\", \"step\")\n        step_knob.setValue(1)\n        frame_range_panel.addKnob(step_knob)\n        \n        if frame_range_panel.showDialog():\n            start_frame = frame_range_panel.fromFrame.value()\n            end_frame = frame_range_panel.toFrame.value()\n            step_value = frame_range_panel.knobs()\['step'].value()\n            \n            for node in nodes_to_process:\n                for knob in node.allKnobs():\n                    if knob.hasExpression():\n                        for animation in knob.animations():\n                            if animation.expression() != 'curve':\n                                anim_name = f\"\{animation.knob().name()\}.\{animation.knobIndex()\}\"\n                                knob_full_name = f\"\{node.fullName()\}.\{anim_name\}\"\n                                nuke.animation(knob_full_name, \"generate\", (str(start_frame), str(end_frame), str(step_value), \"y\", anim_name))\n\n\n\n\n\t#------------------------------------------------------------------------------------------------------------------------\n\t# get upstream nodes\n\t#------------------------------------------------------------------------------------------------------------------------\n\n    def _get_upstream(self, starter, _visited=None):\n        if _visited is None:\n            _visited = set()\n        if starter in _visited:\n            return\n        _visited.add(starter)\n        yield starter\n        if 'disable' in starter.knobs() and starter\['disable'].value() and not starter\['disable'].hasExpression():\n            first_input = starter.input(0)\n            if first_input is not None:\n                yield from self._get_upstream(first_input, _visited)\n        else:\n            for input_node in starter.dependencies(nuke.HIDDEN_INPUTS | nuke.INPUTS | nuke.EXPRESSIONS):\n                yield from self._get_upstream(input_node, _visited)\n\n\n\n\t#------------------------------------------------------------------------------------------------------------------------\n\t# get downstream nodes\n\t#------------------------------------------------------------------------------------------------------------------------\n    def _get_downstream(self, starter, _visited=None):\n        if _visited is None:\n            _visited = set()\n        if starter in _visited:\n            return\n        _visited.add(starter)\n        yield starter\n        for output_node in starter.dependent(nuke.EXPRESSIONS | nuke.INPUTS | nuke.HIDDEN_INPUTS):\n            yield from self._get_downstream(output_node, _visited)\n    \n\n\n    #------------------------------------------------------------------------------------------------------------------------\n\t# select upstream nodes\n\t#------------------------------------------------------------------------------------------------------------------------\n    def select_upstream_nodes(self, selected_node):\n        if selected_node is None:\n            nuke.message(\"No node selected.\")\n            return\n        nuke.selectAll()\n        nuke.invertSelection()\n        upstream_nodes = list(self._get_upstream(selected_node))\n        for node in upstream_nodes:\n            node.setSelected(True)\n\n\n\n    #------------------------------------------------------------------------------------------------------------------------\n\t# select downstream nodes\n\t#------------------------------------------------------------------------------------------------------------------------\n\n    def select_downstream_nodes(self, selected_node):\n        if selected_node is None:\n            nuke.message(\"No node selected.\")\n            return\n        nuke.selectAll()\n        nuke.invertSelection()\n        downstream_nodes = list(self._get_downstream(selected_node))\n        for node in downstream_nodes:\n            node.setSelected(True)\n\n\n\n\n#------------------------------------------------------------------------------------------------------------------------\n# execute manager command\n#------------------------------------------------------------------------------------------------------------------------\nmanager = ScriptManager_execute()\n\n\n\n\n#------------------------------------------------------------------------------------------------------------------------\n# scriptmanager user interface change\n#------------------------------------------------------------------------------------------------------------------------\nclass Operation:\n    def __init__(self):\n        pass\n\n    def manager(self):\n        return nuke.thisNode().knob('manager').value()\n\n    def operation_node(self):\n        return nuke.thisNode().knob('operation_node').value()\n\n    def operation_script(self):\n        return nuke.thisNode().knob('operation_script').value()\n\n    def operation_viewers(self):\n        return nuke.thisNode().knob('operation_viewers').value()\n\nop = Operation()\n\ndef update_visibility():\n    n = nuke.thisNode()\n    manager_mode = n.knob('manager').value()\n\n    if manager_mode == 'node':\n        n\['operation_node'].setVisible(True)\n        n\['operation_script'].setVisible(False)\n        n\['operation_viewers'].setVisible(False)\n        \n        if n\['operation_node'].value() == 'bake expressions':\n            n\['all_and_selection'].setVisible(True)\n            n\['up_down'].setVisible(False)\n        elif n\['operation_node'].value() == 'select node streams':\n            n\['all_and_selection'].setVisible(False)\n            n\['up_down'].setVisible(True)\n        else:\n            n\['all_and_selection'].setVisible(False)\n            n\['select_stream'].setVisible(False)\n\n    elif manager_mode == 'script':\n        n\['operation_node'].setVisible(False)\n        n\['operation_script'].setVisible(True)\n        n\['operation_viewers'].setVisible(False)\n        n\['all_and_selection'].setVisible(False)\n        n\['up_down'].setVisible(False)\n\n    elif manager_mode == 'viewers':\n        n\['operation_node'].setVisible(False)\n        n\['operation_script'].setVisible(False)\n        n\['operation_viewers'].setVisible(True)\n        n\['all_and_selection'].setVisible(False)\n        n\['up_down'].setVisible(False)\n\n\n\n#------------------------------------------------------------------------------------------------------------------------\n# execute operation\n#------------------------------------------------------------------------------------------------------------------------\ndef execute_operation():\n    n = nuke.thisNode()\n    manager_mode = op.manager()\n    \n    if manager_mode == 'node':\n        operation_node = op.operation_node()\n        if operation_node == 'bake expressions':\n            node_mode = n\['all_and_selection'].value()\n            manager.bake_expressions(node_mode)\n            \n        elif operation_node == 'select node streams':\n            selected_node = nuke.selectedNode() if nuke.selectedNodes() else None\n            if n\['up_down'].value() == 'up':\n                manager.select_upstream_nodes(selected_node)\n            elif n\['up_down'].value() == 'down':\n                manager.select_downstream_nodes(selected_node)\n            \n    elif manager_mode == 'script':\n        operation_script = op.operation_script()\n        if operation_script == 'reveal all inputs':\n            manager.reveal_all_inputs()\n            \n    elif manager_mode == 'viewers':\n        operation_viewers = op.operation_viewers()\n        if operation_viewers == 'kill all viewers':\n            manager.kill_all_viewers()\n"
 knobChanged "# Define the knobChanged function\ndef knobChanged():\n    k = nuke.thisKnob()\n    if k.name() in ('manager', 'operation_node'):\n        update_visibility()\n\n# Ensure the visibility is updated when the node is created\nupdate_visibility()"
 tile_color 0x288264ff
 label "\[expr \{\n    \[numvalue manager] == 0 ? \n        (\[string compare \"\[value operation_node]\" \"bake expressions\"] == 0 ? \"(\[value operation_node])\\n(\[value all_and_selection])\" : \n        (\[string compare \"\[value operation_node]\" \"select node streams\"] == 0 ? \"(\[value operation_node])\\n(\[value up_down])\" : \"(\[value operation_node])\")) : \n    (\[numvalue manager] == 1 ? \"(\[value operation_script])\" : \"(\[value operation_viewers])\")\n\}]\n"
 note_font Verdana
 selected true
 addUserKnob {20 scriptManager l "Script Manager"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION ScriptManager
 addUserKnob {4 manager M {node script viewers "" "" "" "" "" "" "" "" "" "" ""}}
 manager viewers
 addUserKnob {4 operation_node l operation +HIDDEN M {"bake expressions" "select node streams" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {4 up_down l "" -STARTLINE +HIDDEN M {up down "" ""}}
 addUserKnob {4 all_and_selection l "" -STARTLINE +HIDDEN M {all selected "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {4 operation_script l operation +HIDDEN M {"reveal all inputs" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {4 operation_viewers l operation M {"kill all viewers" "" "" "" "" ""}}
 addUserKnob {26 ""}
 addUserKnob {22 execute t "This reveals all potential hidden inputs within the script." T "# Button script to execute the operations\nexecute_operation()" +STARTLINE}
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Script Manager</font><font color=#288264> v1.0"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "overview of the node" +STARTLINE T "<br><strong>•</br> \n<b>Script Manager</b> executes a certain function<br>which is all to do with the script.\n\n<br><br>\n<i>\n• This is useful to keep ontop of your script \n\n\n\n</i><br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#288264;\">John Toth <b>© 2020 <br>\n\n"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#288264\">Tool Demo" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message('coming soon')" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#288264\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\nversion_number = \"1.3.6\"\ncontext = \"AOV\"\n\n\ndate = \"30th January\"\nyear = \" 2024\"\n\ndeveloper = \"John Toth © 2020\"\nsite = \"<a href='https://johntothvfx.com'> <span style='color:#BBBBBB'>\"\n\n\n\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- manages the script using certain executable functions\n\"\"\"\n\n\n\n\nthankyou = \"\"\"- This node is based of N Depth Bubble as a learning curve of how to create a robust Pmatte and I would like to thanks Daniel Velikov and Ben Dickson\n\"\"\"\n\n\n\"\"\"Do not touch section below\"\"\"\nheader = \"Version Log:\"\nDLM = \"<b>Date Last Modified: </b>\" + date + year\n\nSPACE = \" \"\nENTER = \"<br><br>\"\nUPPER = \"<b>\"\nLOWER = \"</b>\"\n\n\n\nnuke.message(UPPER + header + ENTER + \"Name: \" + LOWER + name + \"<br>\" + UPPER + \"Version Number: \" + LOWER + version_number + \"<br>\" + UPPER + \"Context: \" + LOWER + context + ENTER + DLM + log + \"</i>\" + \"<br>\" + \"<b>Thankyou:</b><br>\" + thankyou + \"<br>\" + UPPER + site + developer + ENTER + \"</a>\") \n\n\n"}
}
