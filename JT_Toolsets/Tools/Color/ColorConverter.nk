NoOp {
 name ColorConverter1
 help "Converts a certain color into interger, hex and html value of a certain color."
 knobChanged "def rgb_color_callback():\n    knob = nuke.thisKnob()\n    node = nuke.thisNode()\n\n    def update_hex_case(hex_value, capital):\n        if capital == \"upper\":\n            return hex_value.upper()\n        elif capital == \"lower\":\n            return hex_value.lower()\n        return hex_value\n\n    if knob.name() == 'rgb':\n        rgb = knob.value()\n\n        if not isinstance(rgb, list):\n            rgb = \[rgb] * 3\n\n        if len(rgb) == 3:\n            rgb.append(1)\n\n        rgb = \[int(v * 255) for v in rgb]\n        rgb = tuple(rgb)\n\n        interface = int('%02x%02x%02x%02x' % rgb, 16)\n        interface *= int((rgb\[:3] != (0,) * 3))\n\n        hex_color_nuke = '0x\{:02X\}\{:02X\}\{:02X\}'.format(rgb\[0], rgb\[1], rgb\[2])\n        hex_color_html = '#\{:02X\}\{:02X\}\{:02X\}'.format(rgb\[0], rgb\[1], rgb\[2])\n\n        html_capital = node.knob('htmlCapital').value()\n        hex_capital = node.knob('hexCapital').value()\n\n        hex_color_nuke = update_hex_case(hex_color_nuke, html_capital)\n        hex_color_html = update_hex_case(hex_color_html, hex_capital)\n\n        for knobName in \['interface', 'tile_color']:\n            node.knob(knobName).setValue(interface)\n        \n        node.knob('htmlHex').setValue(hex_color_nuke)\n        node.knob('hex').setValue(hex_color_html)\n\n    elif knob.name() == 'interface':\n        interface = int(knob.value())\n        alpha = (interface >> 24) & 0xFF\n        red = (interface >> 16) & 0xFF\n        green = (interface >> 8) & 0xFF\n        blue = interface & 0xFF\n        rgb = \[red / 255.0, green / 255.0, blue / 255.0, alpha / 255.0]\n\n        hex_color_nuke = '0x\{:02X\}\{:02X\}\{:02X\}'.format(red, green, blue)\n        hex_color_html = '#\{:02X\}\{:02X\}\{:02X\}'.format(red, green, blue)\n\n        html_capital = node.knob('htmlCapital').value()\n        hex_capital = node.knob('hexCapital').value()\n\n        hex_color_nuke = update_hex_case(hex_color_nuke, html_capital)\n        hex_color_html = update_hex_case(hex_color_html, hex_capital)\n\n        node.knob('rgb').setValue(rgb\[:3])\n        node.knob('htmlHex').setValue(hex_color_nuke)\n        node.knob('hex').setValue(hex_color_html)\n\n    elif knob.name() == 'htmlHex':\n        hex_value = knob.value().lstrip('0x')\n        if len(hex_value) == 6:\n            rgb = tuple(int(hex_value\[i:i+2], 16) / 255.0 for i in (0, 2, 4))\n            interface = int(hex_value + 'FF', 16)\n\n            node.knob('rgb').setValue(rgb)\n            node.knob('interface').setValue(interface)\n            node.knob('tile_color').setValue(interface)\n            hex_color_html = '#\{:02X\}\{:02X\}\{:02X\}'.format(*\[int(hex_value\[i:i+2], 16) for i in (0, 2, 4)])\n            node.knob('hex').setValue(update_hex_case(hex_color_html, node.knob('hexCapital').value()))\n\n    elif knob.name() == 'hex':\n        hex_value = knob.value().lstrip('#')\n        if len(hex_value) == 6:\n            rgb = tuple(int(hex_value\[i:i+2], 16) / 255.0 for i in (0, 2, 4))\n            interface = int(hex_value + 'FF', 16)\n\n            node.knob('rgb').setValue(rgb)\n            node.knob('interface').setValue(interface)\n            node.knob('tile_color').setValue(interface)\n            hex_color_nuke = '0x\{:02X\}\{:02X\}\{:02X\}'.format(*\[int(hex_value\[i:i+2], 16) for i in (0, 2, 4)])\n            node.knob('htmlHex').setValue(update_hex_case(hex_color_nuke, node.knob('htmlCapital').value()))\n\n    elif knob.name() in \['htmlCapital', 'hexCapital']:\n        # Update hex values based on the capital settings\n        html_capital = node.knob('htmlCapital').value()\n        hex_capital = node.knob('hexCapital').value()\n\n        html_hex_value = node.knob('htmlHex').value()\n        hex_value = node.knob('hex').value()\n\n        node.knob('htmlHex').setValue(update_hex_case(html_hex_value, html_capital))\n        node.knob('hex').setValue(update_hex_case(hex_value, hex_capital))\n\nnuke.addKnobChanged(rgb_color_callback)\n"
 tile_color 0x7aa9ffff
 selected true
 addUserKnob {20 colorConverterTab l ColorConverter}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION ColorConverter
 addUserKnob {18 rgb}
 rgb {0.4784313738 0.6627451181 1}
 addUserKnob {6 rgb_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 rgbColor_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 rgbColor_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 rgbColor_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 rgbColor_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 rgbColor_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 ""}
 addUserKnob {3 interface t "Decimal representation in nuke.\nMust be an integer.\n\nrange: 255(0xFF) - 4294967295(0xFFFFFFFF)\n"}
 interface 2057961471
 addUserKnob {1 htmlHex l "html hex" t "Hex representation format in nuke:\n\n0xRRGGBBAA\nrange: 0xFF - 0xFFFFFFFF\n\n Alpha defaults to 1 and is represented by FF.\n"}
 htmlHex 0X7AA9FF
 addUserKnob {4 htmlCapital l "" -STARTLINE M {upper lower ""}}
 addUserKnob {1 hex t "Hex representation format in html:\n\n#RRGGBB\nrange: #000000 - #FFFFFF\n"}
 hex #7AA9FF
 addUserKnob {4 hexCapital l "" -STARTLINE M {upper lower "" ""}}
 addUserKnob {26 ""}
 addUserKnob {22 export T "# John Toth\n\n# Defining shortcuts\nn = nuke.thisNode()\n\n#position of nodes to when exported\nx_pos = n.xpos() + 100\ny_pos = n.ypos() + 50\n\n# gathering node information\ncolor = n\['rgb'].getValue()\n\nconst_node = nuke.createNode('Constant')\n \nconst_node\['color'].setValue(\[color\[0], color\[1], color\[2], 1.0]) \nconst_node.setXYpos(x_pos, y_pos)" +STARTLINE}
 addUserKnob {1 output l INVISIBLE +INVISIBLE}
 output "\[value interface]"
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Color Converter</font><font color=#7AA9FF> v1.0"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" +STARTLINE T "<br><strong>•</br> \n<b>Color Converter</b> will display the html,<br>hex, interger value of a certain color in<br>a linear format.\n\n<br></b>\n\n\n\n</i>\n<br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#7AA9FF;\">John Toth <b>© 2024 <br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#7AA9FF\">Tool Demo" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#7AA9FF\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\nversion_number = \"1.1.2\"\ncontext = \"Color\"\nmodified_date = \"16th September 2024\"\ndeveloper = \"John Toth © 2023\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- samples the color of a pixel coordinate to give that color value\n\"\"\"\nthank_you = \"\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    #f\"<b>Thank You:</b><br>\{thank_you\}<br>\{enter\}\"\n    f\"\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)"}
}
