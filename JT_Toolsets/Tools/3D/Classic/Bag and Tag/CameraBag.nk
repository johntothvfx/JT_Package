Group {
 name CameraBag1
 help "Bags the information from the input Camera.\nThis is used to store data which can then be feed to a Camera Tag.\n\nThis allows the user to update the incoming camera and all Camera tags update at once."
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\n\n\nif k.name() == 'inputChange':\n    classList = \['Camera','Camera2','Camera3','Axis','Axis2','Axis3','Group','Light','Light2','Light3','Light4','DirectLight','Spotlight','Environment','Gizmo','NoOp','Dot','Switch']\n\n    if n.input(0) is not None:\n        if n.input(0).Class() not in classList:\n           n.setInput(0, None)\n"
 tile_color 0x9c0000ff
 selected true
 addUserKnob {20 cameraBagTab l "Camera Bag"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION CameraBag
 addUserKnob {1 output l INVISIBLE +INVISIBLE}
 output "\[knob tile_color \[value cameraTypeColor]]\[value cameraType]"
 addUserKnob {4 cameraType l "" +STARTLINE M {Default MasterCam TrackCam SlateCam RenderCam "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 cameraType MasterCam
 addUserKnob {3 cameraTypeColor l INVISIBLE -STARTLINE +INVISIBLE}
 cameraTypeColor {{"cameraType == 0 ? 577296127 : cameraType == 1 ? 2617245951 : cameraType == 2 ? 782318079 : cameraType == 3 ?  3165597183 : cameraType == 4 ? 3241845759 : 2617245696"}}
 addUserKnob {22 cameraTagButton l "   Create Camera Tag   " -STARTLINE T "#############################\n#Grabs the CameraBag's name\n\ngetName = nuke.thisNode().knob('name').getValue()\ngetColor = nuke.thisNode().knob('tile_color').getValue()\n\n#############################\n#creates nodes outside of group\n\ngrp = nuke.thisNode()\nwith nuke.thisParent():\n\n#############################\n# Create Camera Tag\n\n CameraTag = nuke.nodes.Camera2()\n CameraTag.setName('CameraTag')\n CameraTag\['tile_color'].setValue(0x349cff)\n\n#############################\n# Position of the node placement when created\n\n CameraTag.setXpos(grp.xpos() + 100)\n CameraTag.setYpos(grp.ypos() + 100)\n\n#############################\n# Creating Set Expressions with new conditional logic\n\n CameraTag\['translate'].setExpression('\[value code] == 1 ? \[value topnode \[value cameraName].translate.x(\[value refFrameHidden])] : 0', 0)\n CameraTag\['translate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].translate.y(\[value refFrameHidden])] : 0\}]', 1)\n CameraTag\['translate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].translate.z(\[value refFrameHidden])] : 0\}]', 2)\n\n CameraTag\['rotate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].rotate.x(\[value refFrameHidden])] : 0\}]', 0)\n CameraTag\['rotate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].rotate.y(\[value refFrameHidden])] : 0\}]', 1)\n CameraTag\['rotate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].rotate.z(\[value refFrameHidden])] : 0\}]', 2)\n\n CameraTag\['scaling'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].scaling.x(\[value refFrameHidden])] : 0\}]', 0)\n CameraTag\['scaling'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].scaling.y(\[value refFrameHidden])] : 0\}]', 1)\n CameraTag\['scaling'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].scaling.z(\[value refFrameHidden])] : 0\}]', 2)\n\n CameraTag\['uniform_scale'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].uniform_scale(\[value refFrameHidden])] : 0\}]')\n\n CameraTag\['skew'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].skew.x(\[value refFrameHidden])] : 0\}]', 0)\n CameraTag\['skew'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].skew.y(\[value refFrameHidden])] : 0\}]', 1)\n CameraTag\['skew'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].skew.z(\[value refFrameHidden])] : 0\}]', 2)\n\n CameraTag\['pivot_translate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].pivot_translate.x(\[value refFrameHidden])] : 0\}]', 0)\n CameraTag\['pivot_translate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].pivot_translate.y(\[value refFrameHidden])] : 0\}]', 1)\n CameraTag\['pivot_translate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].pivot_translate.z(\[value refFrameHidden])] : 0\}]', 2)\n\n CameraTag\['pivot_rotate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].pivot_rotate.x(\[value refFrameHidden])] : 0\}]', 0)\n CameraTag\['pivot_rotate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].pivot_rotate.y(\[value refFrameHidden])] : 0\}]', 1)\n CameraTag\['pivot_rotate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].pivot_rotate.z(\[value refFrameHidden])] : 0\}]', 2)\n\n CameraTag\['focal'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].focal(\[value refFrameHidden])] : 0\}]')\n CameraTag\['haperture'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].haperture(\[value refFrameHidden])] : 0\}]')\n CameraTag\['vaperture'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].vaperture(\[value refFrameHidden])] : 0\}]')\n CameraTag\['near'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].near(\[value refFrameHidden])] : 0\}]')\n CameraTag\['far'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].far(\[value refFrameHidden])] : 0\}]')\n\n CameraTag\['win_translate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].win_translate.u(\[value refFrameHidden])] : 0\}]', 0)\n CameraTag\['win_translate'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].win_translate.v(\[value refFrameHidden])] : 0\}]', 1)\n\n CameraTag\['win_scale'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].win_scale.u(\[value refFrameHidden])] : 0\}]', 0)\n CameraTag\['win_scale'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].win_scale.v(\[value refFrameHidden])] : 0\}]', 1)\n\n CameraTag\['winroll'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].winroll(\[value refFrameHidden])] : 0\}]')\n CameraTag\['focal_point'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].focal_point(\[value refFrameHidden])] : 0\}]')\n CameraTag\['fstop'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].focal_point(\[value refFrameHidden])] : 0\}]')\n\n CameraTag\['help'].setValue('<b>Camera Tag: </b>can be linked to another camera based on that nodes name. <br> To grab all the camera data from that node simple put the name of that node into the <b>Camera Tag</b> knob. This camera will then have the exact same properties as that camera.<br><br> The purpose of this is to be able to have multiple Cameras that feed one one master camera which can be updated dynamically with everything else in the script updating at once.<br><br><b>Camera:</b> Cameras may be connected to either the Scene node or the ScanlineRender node. Camera connected to a ScanlineRender node define the projection for use by the 3D renderer. You can connect additional cameras to the Scene node and switch between them by choosing the viewing camera from the dropdown menu at the top of the Viewer. You can also read in .fbx and .abc scene files containing standard cameras, though only one camera per Camera node can be read.<br><br>Cameras can also be used to project 2D textures onto 3D objects in a scene using the controls on the Projection tab and a Project3D node.')\n\n CameraTag\['knobChanged'].setValue('''n = nuke.thisNode()\nk = nuke.thisKnob()\n\nif k.name() in ('mode', 'showPanel'):\n    visible = n\['mode'].value() == 'framehold'\n    for knob in ('refFrame', 'setcurrentframe'):\n        n\[knob].setVisible(visible)''')\n\n CameraTag\['label'].setValue('(world matrix)')\n\n#############################\n# Use Local Matrix\n\n CameraTag\['useMatrix'].setValue(True)\n\n for i in range (16):\n  CameraTag\['matrix'].setExpression('\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]', i)\n\n#############################\n# Setting values to knob creations\n\n camTagTab = nuke.Tab_Knob ('CameraTagTab', 'Camera Tag')\n classification = nuke.String_Knob ('CLASSIFICATION', '')\n output = nuke.String_Knob ('output', '')\n operation = nuke.String_Knob ('operation', '')\n tag = nuke.Enumeration_Knob('tag', ' tag', \['3448063\\tDefault', '2617245951\\tMasterCam', '782318079 \\tTrackCam', '3165597183\\tSlateCam', '3241845759\\tRenderCam'])\n initialize = nuke.Boolean_Knob('initialize', 'initialize')\n camName = nuke.String_Knob ('cameraName', 'camera name')\n grabNameButton = nuke.PyScript_Knob ('grabName', 'grab name')\n findParentButton = nuke.PyScript_Knob ('findParent', 'find')\n clearButton = nuke.PyScript_Knob ('clear', '   clear   ')\n parentMessageButton = nuke.PyScript_Knob ('parentMessage', 'INVISIBLE')\n divider002 = nuke.Text_Knob('divider002', '')\n methodPulldown = nuke.Enumeration_Knob('mode', '', \['animate', 'framehold'])\n frameHoldValue = nuke.Int_Knob('refFrame', '')\n CurrentFrameButton = nuke.PyScript_Knob ('setcurrentframe', 'set current frame')\n fOffset = nuke.Double_Knob('frameOffset', 'frame offset') \n rfOffset = nuke.Double_Knob('refFrameHidden', 'INVISIBLE') \n code = nuke.Multiline_Eval_String_Knob('code', 'INVISIBLE')\n divider_empty = nuke.Text_Knob('', '')\n switchButton = nuke.PyScript_Knob('switch', '     switch to translate/rotate/scale     ')\n\n helpTab = nuke.Tab_Knob ('info', 'Info')\n CamTagV = nuke.Text_Knob ('versions', \"\")\n divider003 = nuke.Text_Knob('divider003', '')\n bulletpoints = nuke.Text_Knob ('bulletpoints', \"\")\n divider_empty2 = nuke.Text_Knob('', '')\n demoButton = nuke.PyScript_Knob ('demo', '<a href=\"https://johntothvfx.com\"><span style=\"color:#CD0000\">Tool Demo')\n logButton = nuke.PyScript_Knob ('log', '<a href=\"https://johntothvfx.com\"><span style=\"color:#CD0000\">Version Log')\n\n#############################\n# Setting knob properties\n\n classification.setFlag(nuke.INVISIBLE)\n output.setFlag(nuke.INVISIBLE)\n operation.setFlag(nuke.INVISIBLE)\n parentMessageButton.clearFlag(nuke.STARTLINE)\n parentMessageButton.setFlag(nuke.INVISIBLE)\n rfOffset.setFlag(nuke.INVISIBLE)\n code.setFlag(nuke.INVISIBLE)\n demoButton.setFlag(nuke.INVISIBLE)\n\n initialize.clearFlag(nuke.STARTLINE)\n initialize.setValue(True)\n grabNameButton.clearFlag(nuke.STARTLINE)\n findParentButton.clearFlag(nuke.STARTLINE)\n clearButton.clearFlag(nuke.STARTLINE)\n frameHoldValue.clearFlag(nuke.STARTLINE)\n frameHoldValue.setVisible(False)\n CurrentFrameButton.clearFlag(nuke.STARTLINE)\n CurrentFrameButton.setVisible(False)\n logButton.clearFlag(nuke.STARTLINE)\n\n fOffset.setRange(-1,1)\n fOffset.setValue(0)\n rfOffset.setRange(-1,1)\n frameHoldValue.setValue(1001)\n\n tag.setTooltip('List of preset name tags based on the camera type. If \\'Initialize\\' is enabled (set to 1), selecting a tag will also dynamically update the camera\\'s color based on the chosen tag.')\n initialize.setTooltip('Enables automatic setup of camera attributes. When active (value = 1), selecting a name tag will also apply a corresponding color to the camera node.')\n camName.setTooltip('Copy the name of the camera you want to grab the information from. (Usually a camera bag node or another camera which will be the master camera)\\n<i>\\nThis is capital sensitive. You can either type it manually or select the node and click \"Grab Name\" button which will automatically grab that nodes name and auto fill this in for you\\n\\n• If you have the name spelled wrong it will default to a nuke\\'s default camera\\n\\n• If the string is empty all knob values will be set to 0.')\n grabNameButton.setTooltip('Grab button - simply grabs the selected nodes name and pastes it into the Camera String.')\n findParentButton.setTooltip('Zooms in the node that is in the string path.\\n\\n<b><i>Example:</b><i> If the string path has Grade1 in it when this button is pressed it will find Grade1 in the nodegraph and zoom into it.')\n clearButton.setTooltip('Clears the contents of the <b>cameraName</b> string input.')\n methodPulldown.setTooltip('Choose how to use the referenced camera:\\n•<b>Animate</b> keeps animation\\n•<b>FrameHold</b> locks it to the selected reference frame.')\n frameHoldValue.setTooltip('This value will determine which frame the camera will be frozen on.')\n CurrentFrameButton.setTooltip('This will set the current frame you are on in the timeline to the framehold knob.')\n fOffset.setTooltip('This allows you to offset the camera animation curve by a certain value.')\n switchButton.setTooltip('Toggles between <b>World Matrix</b> and <b>Translate/Rotate/Scale</b> modes. Updates internal control and label accordingly.')\n\n#############################\n# Creating knobs\n\n CameraTag.addKnob(camTagTab)\n CameraTag.addKnob(classification)\n CameraTag.addKnob(output)\n CameraTag.addKnob(operation)\n CameraTag.addKnob(tag)\n CameraTag.addKnob(initialize)\n CameraTag.addKnob(camName)\n CameraTag.addKnob(grabNameButton)\n CameraTag.addKnob(findParentButton)\n CameraTag.addKnob(clearButton)\n CameraTag.addKnob(parentMessageButton)\n CameraTag.addKnob(divider002)\n CameraTag.addKnob(methodPulldown)\n CameraTag.addKnob(frameHoldValue)\n CameraTag.addKnob(CurrentFrameButton)\n CameraTag.addKnob(fOffset)\n CameraTag.addKnob(rfOffset)\n CameraTag.addKnob(code)\n CameraTag.addKnob(divider_empty)\n CameraTag.addKnob(switchButton)\n CameraTag.addKnob(helpTab)\n CameraTag.addKnob(CamTagV)\n CameraTag.addKnob(divider003)\n CameraTag.addKnob(bulletpoints)\n CameraTag.addKnob(divider_empty2)\n CameraTag.addKnob(demoButton)\n CameraTag.addKnob(logButton)\n\n#############################\n# Setting output and operation for the node\n\n CameraTag\['CLASSIFICATION'].setValue('CameraTag')\n CameraTag\['output'].setValue('\[value cameraName]\[expr \{\[value initialize] ?\[knob tile_color \[value tag]] : \"\"\}]')\n CameraTag\['operation'].setValue('\[expr \{\[numvalue mode] ? \" \[value refFrameHidden]\" : \"\" \}]')\n\n#############################\n# Entering Camera Bag's Name in cameraName string\n\n CameraTag\['cameraName'].setValue(getName)\n\n#############################\n# Setting tag value to match camera type\n\n # Get the camera type value and set the tag accordingly\n cameraType = getColor\n if cameraType == 3448063:      # Default\n     CameraTag\['tag'].setValue(0)\n elif cameraType == 2617245951: # MasterCam  \n     CameraTag\['tag'].setValue(1)\n elif cameraType == 782318079:  # TrackCam\n     CameraTag\['tag'].setValue(2)\n elif cameraType == 3165597183: # SlateCam\n     CameraTag\['tag'].setValue(3)\n elif cameraType == 3241845759: # RenderCam\n     CameraTag\['tag'].setValue(4)\n else:\n     CameraTag\['tag'].setValue(0)  # Default to first option\n\n#############################\n# Setting expression for reference frame hidden\n\n rfOffset.setExpression('\[numvalue mode] == 0 ? frame + \[value frameOffset] : \[value refFrame] + \[value frameOffset]')\n\n#############################\n# Code expression\n\n CameraTag\['code'].setValue('''\[expr \{\n  \[string length \[string trim \[value cameraName]]] > 0 &&\n  \[exists \[value cameraName]] &&\n  (\n    \[string match \"Camera*\" \[class \[value cameraName]]] ||\n    \[string match \"Group*\" \[class \[value cameraName]]] ||\n    \[string match \"NoOp*\" \[class \[value cameraName]]]\n  )\n\}]''')\n\n#############################\n# Python script for Grab Name Button\n\n CameraTag\['grabName'].setValue(\"\"\"node = nuke.thisNode()\nparentKnob = node.knob('cameraName')\n\n\nselection = nuke.selectedNodes()\nif selection:\n    selection = selection\[0]\n    if selection != node:\n        parentKnob.setValue(selection.name())\nelse:\n    nuke.message('No node selected')\"\"\")\n\n#############################\n# Python script for Find Button\n\n CameraTag\['findParent'].setValue(\"\"\"def findParent(knobName):\n    \n    n = nuke.thisNode()\n    \n    # make functions available\n    n.knob(\"parentMessage\").execute()\n    \n    parentName = nuke.thisNode().knob(knobName).value()\n    FindParent(parentName)\n    \nfindParent(\"cameraName\")\"\"\")\n\n#############################\n# Python script for Clear Button\n\n CameraTag\['clear'].setValue(\"nuke.thisNode().knob('cameraName').setValue('')\")\n\n#############################\n# Python script for Parent Message button (invisible button)\n\n CameraTag\['parentMessage'].setValue(\"\"\"def FindParent(parentName):\n    \n    #Jump to node in the nodegraph \n    \n    \n    if not parentName:\n        nuke.message('No Tag Found')\n        return\n        \n    parentNode = nuke.toNode(parentName)\n    if not parentNode:\n        nuke.message('No node named \{\}'.format(parentName))\n        return\n        \n    nuke.zoom( 2, \[parentNode.xpos(), parentNode.ypos()])\"\"\")\n\n#############################\n# Python script for Set Current Frame\n\n CameraTag\['setcurrentframe'].setValue(\"\"\"nuke.thisNode().knob('refFrame').setValue(nuke.frame())\"\"\")\n\n#############################\n# Python script for Switch Button\n\n CameraTag\['switch'].setValue(\"\"\"import nuke\n\nclass KnobSwitcher:\n    def __init__(self, node):\n        self.node = node\n        self.switch_labels = \[\n            \"     switch to world matrix     \",\n            \"     switch to translate/rotate/scale     \"\n        ]\n\n    def switch(self):\n        knob = nuke.thisKnob()\n        label = knob.label()\n        use_matrix_mode = int(label == self.switch_labels\[0])  # 1 = world matrix, 0 = TRS\n\n        # Set the knob label\n        knob.setLabel(self.switch_labels\[use_matrix_mode])\n\n        # Set the control knob (drives conditional expressions)\n        self.node\['useMatrix'].setValue(use_matrix_mode)\n\n        # Optionally update the node label too\n        self.node\['label'].setValue(\"(world matrix)\" if use_matrix_mode else \"\")\n\n# Example usage\nnode = nuke.thisNode()\nswitcher = KnobSwitcher(node)\nswitcher.switch()\n\"\"\")\n\n#############################\n# Version/bulletPoints\n\n CamTagV.setValue('<br><font size=\"5\">Camera Tag</font><font color=#CD0000> v1.3')\n\n bulletpoints.setValue('<br><strong>•</br> <b>Camera Tag</b> can be linked to another camera<br>based on it\\'s name.<br></b><i><br><strong>•</br> Purpose of this is to be able to copy the camera<br>any where in the script and have it feed of one<br>camera.<br></b><br><strong>•</br> We recommend you connect the master camera<br>to <b>Camera Bag</b> node which stores the input camera\\'s<br>data.<br>Then have Camera Tag (this node) feed of that. This <br>way if the  master camera gets updated all camera<br>get updated at once.</i><br><br><b>John Toth © 2020 <br>')\n\n#############################\n# Log button\n\n CameraTag\['log'].setValue(\"\"\"version_number = \"1.3\"\ncontext = \"CameraTag\"\nmodified_date = \"8th June 2025\"\ndeveloper = \"John Toth © 2020\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\n\nlog = \\\"\\\"\\\"\n<br></i><b> v 1.0 </b><i>\n- creation of the tool\n<br></i><b> v 1.1 </b><i>\n- Find button was created which locates the node it's connected to\n<br></i><b> v 1.2 </b><i>\n-if camera name string is empty or something that is not a camera class or written done in string this node will now go to 0 and not read \"errors\"\n- grabe name/clear button was added\n<br></i><b> v 1.3 </b><i>\n- optimization\n- user interface update\n- swap between world matrix and translaters/rotate/scale\n\n\\\"\\\"\\\"\n\nthank_you = \"\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    f\"\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)\"\"\")\n\n#############################\n# Workaround for the TCL expression to trigger\n\n for n in nuke.selectedNodes():\n     n\['selected'].setValue(False)\n   \n CameraTag\['selected'].setValue(True)\n\n xpos = CameraTag.xpos()\n ypos = CameraTag.ypos()\n nuke.duplicateSelectedNodes()\n new = nuke.selectedNode()\n new.setXYpos(xpos,ypos)\n nuke.delete(CameraTag)"}
 addUserKnob {6 color_rgb_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 world_matrixTitle l "" +STARTLINE T "world matrix"}
 addUserKnob {41 world_matrix l "" +STARTLINE T DeveloperCam1.world_matrix}
 addUserKnob {20 camera l Camera +INVISIBLE}
 addUserKnob {41 transform T DeveloperCam1.transform}
 addUserKnob {41 xform_order l "Transform Order" T DeveloperCam1.xform_order}
 addUserKnob {41 rot_order l "Rotation Order" T DeveloperCam1.rot_order}
 addUserKnob {41 translate l Translate T DeveloperCam1.translate}
 addUserKnob {41 rotate l Rotate T DeveloperCam1.rotate}
 addUserKnob {41 scaling l Scale T DeveloperCam1.scaling}
 addUserKnob {41 uniform_scale l "Uniform Scale" T DeveloperCam1.uniform_scale}
 addUserKnob {41 skew l Skew T DeveloperCam1.skew}
 addUserKnob {41 pivot_translate l "Pivot Translate" T DeveloperCam1.pivot_translate}
 addUserKnob {41 pivot_rotate l "Pivot Rotate" T DeveloperCam1.pivot_rotate}
 addUserKnob {26 ""}
 addUserKnob {41 useMatrix l "Specify Matrix" T DeveloperCam1.useMatrix}
 addUserKnob {41 matrix l "" +STARTLINE T DeveloperCam1.matrix}
 addUserKnob {20 projection l Projection +INVISIBLE}
 addUserKnob {41 focal l "Focal Length" T DeveloperCam1.focal}
 addUserKnob {41 haperture l "Horizontal Aperture" T DeveloperCam1.haperture}
 addUserKnob {41 vaperture l "Vertical Aperture" T DeveloperCam1.vaperture}
 addUserKnob {41 near l Near T DeveloperCam1.near}
 addUserKnob {41 far l Far T DeveloperCam1.far}
 addUserKnob {41 win_translate l "Window Translate" T DeveloperCam1.win_translate}
 addUserKnob {41 win_scale l "Window Scale" T DeveloperCam1.win_scale}
 addUserKnob {41 winroll l "Window Roll" T DeveloperCam1.winroll}
 addUserKnob {41 focal_point l "Focal Distance" T DeveloperCam1.focal_point}
 addUserKnob {41 fstop l Fstop T DeveloperCam1.fstop}
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Camera Bag </font><font color=#9C0000> v1.3"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" +STARTLINE T "<br><strong>•</br> <b>Camera Bag</b> stores the input camera data.\n\n<br></b><i><br><strong>•</br>This purpose of this is to keep the camera fluid<br> and changable at any given time including<br> the name anywhere in the script.\n\n<br></b><br><strong>•</br> Creating a Camera Tag will instantly feed off this<br>Camera Bags stored data.<br>This allows the user to copy the Camera Tag in the<br>script as many times as they want knowing that if<br>the input camera updates all Camera Tags will update.\n\n</i><br><br><b>John Toth © 2020 <br>\n"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#9C0000\">Tool Demo" +INVISIBLE T "nuke.message('coming soon')" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#9C0000\">Version Log</a>\n" -STARTLINE T "version_number = \"1.3\"\ncontext = \"3D/Tag & Bag\"\nmodified_date = \"17th May 2025\"\ndeveloper = \"John Toth © 2020\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\n\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- stores input camera data\n<br></i><b> v 1.1 </b><i>\n- camera parameters from incoming input no longer get round up\n<br></i><b> v 1.2 </b><i>\n- renamed from camera collector to camera bag\n- new user interface was added\n- create camera tag button was added\n<br></i><b> v 1.3 </b><i>\n- exports new camera tag\n- user interface updated\n\"\"\"\n\nthank_you = \"\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    #f\"<b>Thank You:</b><br>\{thank_you\}<br>\{enter\}\"\n    f\"\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)\n"}
}
 Input {
  inputs 0
  name Cam
  label "\[value number]"
  xpos -40
  ypos 14
 }
 Camera3 {
  matrix {
      {{curve} {curve} {curve} {curve}}
      {{curve} {curve} {curve} {curve}}
      {{curve} {curve} {curve} {curve}}
      {{curve} {curve} {curve} {curve}}
    }
  focal {{"\[expr \{\[string length \[value code]] > 0 ? \[value \[value code].focal] : 0\}]"}}
  haperture {{"\[expr \{\[string length \[value code]] > 0 ? \[value \[value code].haperture] : 0\}]"}}
  vaperture {{"\[expr \{\[string length \[value code]] > 0 ? \[value \[value code].vaperture] : 0\}]"}}
  near {{"\[expr \{\[string length \[value code]] > 0 ? \[value \[value code].near] : 0\}]"}}
  far {{"\[expr \{\[string length \[value code]] > 0 ? \[value \[value code].far] : 0\}]"}}
  win_translate {{"\[expr \{\[string length \[value code]] > 0 ? \[value \[value code].win_translate.u] : 0\}]"} {"\[expr \{\[string length \[value code]] > 0 ? \[value \[value code].win_translate.v] : 0\}]"}}
  win_scale {{"\[expr \{\[string length \[value code]] > 0 ? \[value \[value code].win_scale.u] : 0\}]"} {"\[expr \{\[string length \[value code]] > 0 ? \[value \[value code].win_scale.v] : 0\}]"}}
  winroll {{"\[expr \{\[string length \[value code]] > 0 ? \[value \[value code].winroll] : 0\}]"}}
  focal_point {{"\[expr \{\[string length \[value code]] > 0 ? \[value \[value code].focal_point] : 0\}]"}}
  fstop {{"\[expr \{\[string length \[value code]] > 0 ? \[value \[value code].fstop] : 0\}]"}}
  name DeveloperCam1
  tile_color 0xaaaaaaff
  xpos -30
  ypos 186
  addUserKnob {20 developer l Developer}
  addUserKnob {1 class_type l "class type" t "Pattern used to identify the upstream node type.\nSupports wildcards (e.g. 'Camera*', 'Axis*') and comma-separated lists for multiple types.\n\nThe expression will traverse upstream until it finds the first node that matches one of these class patterns."}
  class_type Camera*
  addUserKnob {3 input_number l "input no." t "Specifies which external input to trace when this node is used inside a Group.\n\nFor example, if DeveloperCam is connected to 'Input1' inside a Group, set this to 1 to follow the correct upstream connection.\n\nHas no effect when used outside a Group."}
  addUserKnob {43 code t "custom code field"}
  code "\[expr \{\n    \[catch \{\n        # Determine correct entry point\n        set test \[node this.input0]\n        if \{\[string match \"Input*\" \[class \$test]]\} \{\n            set idx \[value input_number]\n            set connected \[node parent.input\$idx]\n        \} else \{\n            set connected \$test\n        \}\n\n        # Walk upstream to find a matching class\n        set n \$connected\n        set found 0\n        set patterns \[split \[value class_type] \",\"]\n        while \{\n            !(\$found) &&\n            \[class \$n] != \"Input\" &&\n            \$n != \[topnode \$n]\n        \} \{\n            set found 0\n            foreach p \$patterns \{\n                if \{\[string match \[string trim \$p] \[class \$n]]\} \{\n                    set found 1\n                \}\n            \}\n            if \{!\$found\} \{\n                # Try to get the next upstream node\n                set next_n \"\"\n                catch \{set next_n \[node \$n.input0]\}\n                if \{\$next_n == \"\"\} \{\n                    break\n                \}\n                set n \$next_n\n            \}\n        \}\n\n        # Final validation\n        set r \"\"\n        foreach p \$patterns \{\n            if \{\[string match \[string trim \$p] \[class \$n]]\} \{\n                set r \$n\n            \}\n        \}\n        set r\n    \}] == 0 ? \$r : \"\"\n\}]"
  addUserKnob {20 info l Info}
  addUserKnob {26 version_1 l "" +STARTLINE T "<br><font size='5'>Developer Cam</font><font color=#AAAAAA> v1.0</font>"}
  addUserKnob {26 ""}
  addUserKnob {26 bulletpoints l "" t "Overview of the node" +STARTLINE T "<strong>•</strong><b>DeveloperCam</b> is a flexible camera node<br>designed for internal tool-building or group use.<br>\nIt dynamically inherits camera data (focal length,<br>matrix, etc.) from upstream connections—whether<br>inside or outside a Group.<br>\nIdeal for automation, or procedural setups.\n\n</i><br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#AAAAAA;\">John Toth © 2025</a></b><br>"}
  addUserKnob {26 ""}
  addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#AAAAAA\">Tool Demo</span></a>" t "Launches the web page where it will have more documentation or a video about the node." T "nuke.message(\"coming soon\")" +STARTLINE}
  addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#AAAAAA\">Version Log</span></a>" t "Contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "# Constants\nversion_number = \"1.0.1\"\ncontext = \"DeveloperCam\"\nmodified_date = \"19th May 2025\"\ndeveloper = \"John Toth © 2025\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b>v 1.0</b><i>\n- Dynamic upstream class detection\n- Group-safe camera traversal\n- Toggleable world matrix integration\n- Multiple class type support via class_type knob\n\"\"\"\nthank_you = \"\"\n\n# Retrieve node name\nname = nuke.thisNode().name()\n\n# Message components\nheader = \"Version Log:\"\ndlm = f\"<b>Date Last Modified: </b>\{modified_date\}\"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Node: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    f\"</i>\{upper\}\{site\}\{developer\}\{lower\}</span></a><br><br>\"\n    #f\"<i>\{thank_you\}</i>\"\n)\n\n# Display the message\nnuke.message(message)\n"}
 }
 Output {
  name Output1
  xpos -40
  ypos 350
 }
end_group
