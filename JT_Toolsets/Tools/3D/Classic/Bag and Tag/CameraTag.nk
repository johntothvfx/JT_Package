Camera3 {
 translate {{"\[value code] == 1 ? \[value topnode \[value cameraName].translate.x(\[value refFrameHidden])] : 0"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].translate.y(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].translate.z(\[value refFrameHidden])] : 0\}]\n"}}
 rotate {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].rotate.x(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].rotate.y(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].rotate.z(\[value refFrameHidden])] : 0\}]\n"}}
 scaling {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].scaling.x(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].scaling.y(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].scaling.z(\[value refFrameHidden])] : 0\}]\n"}}
 uniform_scale {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].uniform_scale(\[value refFrameHidden])] : 0\}]\n"}}
 skew {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].skew.x(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].skew.y(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].skew.z(\[value refFrameHidden])] : 0\}]\n"}}
 pivot_translate {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].pivot_translate.x(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].pivot_translate.y(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].pivot_translate.z(\[value refFrameHidden])] : 0\}]\n"}}
 pivot_rotate {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].pivot_rotate.x(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].pivot_rotate.y(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].pivot_rotate.z(\[value refFrameHidden])] : 0\}]\n"}}
 useMatrix true
 matrix {
     {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"}}
     {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"}}
     {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"}}
     {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].world_matrix(\[value refFrameHidden])] : 0\}]\n"}}
   }
 focal {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].focal(\[value refFrameHidden])] : 0\}]\n"}}
 haperture {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].haperture(\[value refFrameHidden])] : 0\}]\n"}}
 vaperture {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].vaperture(\[value refFrameHidden])] : 0\}]\n"}}
 near {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].near(\[value refFrameHidden])] : 0\}]\n"}}
 far {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].far(\[value refFrameHidden])] : 0\}]\n"}}
 win_translate {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].win_translate.u(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].win_translate.v(\[value refFrameHidden])] : 0\}]\n"}}
 win_scale {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].win_scale.u(\[value refFrameHidden])] : 0\}]\n"} {"\[expr \{\[value code] ? \[value topnode \[value cameraName].win_scale.v(\[value refFrameHidden])] : 0\}]\n"}}
 winroll {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].winroll(\[value refFrameHidden])] : 0\}]\n"}}
 focal_point {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].focal_point(\[value refFrameHidden])] : 0\}]\n"}}
 fstop {{"\[expr \{\[value code] ? \[value topnode \[value cameraName].focal_point(\[value refFrameHidden])] : 0\}]\n"}}
 name CameraTag6
 help "<b>Camera Tag: </b>can be linked to another camera based on that nodes name. <br> To grab all the camera data from that node simple put the name of that node into the <b>Camera Tag</b> knob. This camera will then have the exact same properties as that camera.<br><br> The purpose of this is to be able to have multiple Cameras that feed one one master camera which can be updated dynamically with everything else in the script updating at once.<br><br><b>Camera:</b> Cameras may be connected to either the Scene node or the ScanlineRender node. Camera connected to a ScanlineRender node define the projection for use by the 3D renderer. You can connect additional cameras to the Scene node and switch between them by choosing the viewing camera from the dropdown menu at the top of the Viewer. You can also read in .fbx and .abc scene files containing standard cameras, though only one camera per Camera node can be read.<br><br>Cameras can also be used to project 2D textures onto 3D objects in a scene using the controls on the Projection tab and a Project3D node."
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\nif k.name() in ('mode', 'showPanel'):\n    visible = n\['mode'].value() == 'framehold'\n    for knob in ('refFrame', 'setcurrentframe'):\n        n\[knob].setVisible(visible)"
 tile_color 0x349cff
 label "(world matrix)"
 selected true
 addUserKnob {20 CameraTagTab l "Camera Tag"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION CameraTag
 addUserKnob {1 output l INVISIBLE +INVISIBLE}
 output "\[value cameraName]\[expr \{\[value initialize] ?\[knob tile_color \[value tag]] : \"\"\}]"
 addUserKnob {1 operation l INVISIBLE +INVISIBLE}
 operation "\[expr \{\[numvalue mode] ? \" \[value refFrameHidden]\" : \"\" \}]"
 addUserKnob {4 tag l " tag" t "List of preset name tags based on the camera type. If 'Initialize' is enabled (set to 1), selecting a tag will also dynamically update the camera's color based on the chosen tag." M {"3448063\tDefault" "2617245951\tMasterCam" "782318079 \tTrackCam" "3165597183\tSlateCam" "3241845759\tRenderCam" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {6 initialize t "Enables automatic setup of camera attributes. When active (value = 1), selecting a name tag will also apply a corresponding color to the camera node." -STARTLINE}
 initialize true
 addUserKnob {1 cameraName l "camera name" t "Copy the name of the camera you want to grab the information from. (Usually a camera bag node or another camera which will be the master camera)\n<i>\nThis is capital sensitive. You can either type it manually or select the node and click \"Grab Name\" button which will automatically grab that nodes name and auto fill this in for you\n\n• If you have the name spelled wrong it will default to a nuke's default camera\n\n• If the string is empty all knob values will be set to 0."}
 addUserKnob {22 grabName l "grab name" t "Grab button - simply grabs the selected nodes name and pastes it into the Camera String." -STARTLINE T "node = nuke.thisNode()\nparentKnob = node.knob('cameraName')\n\n\nselection = nuke.selectedNodes()\nif selection:\n    selection = selection\[0]\n    if selection != node:\n        parentKnob.setValue(selection.name())\nelse:\n    nuke.message('No node selected')"}
 addUserKnob {22 findParent l find t "Zooms in the node that is in the string path.\n\n<b><i>Example:</b><i> If the string path has Grade1 in it when this button is pressed it will find Grade1 in the nodegraph and zoom into it." -STARTLINE T "def findParent(knobName):\n    \n    n = nuke.thisNode()\n    \n    # make functions available\n    n.knob(\"parentMessage\").execute()\n    \n    parentName = nuke.thisNode().knob(knobName).value()\n    FindParent(parentName)\n    \nfindParent(\"cameraName\")"}
 addUserKnob {22 clear l "   clear   " t "Clears the contents of the <b>cameraName</b> string input." -STARTLINE T nuke.thisNode().knob('cameraName').setValue('')}
 addUserKnob {22 parentMessage l INVISIBLE -STARTLINE +INVISIBLE T "def FindParent(parentName):\n    \n    #Jump to node in the nodegraph \n    \n    \n    if not parentName:\n        nuke.message('No Tag Found')\n        return\n        \n    parentNode = nuke.toNode(parentName)\n    if not parentNode:\n        nuke.message('No node named \{\}'.format(parentName))\n        return\n        \n    nuke.zoom( 2, \[parentNode.xpos(), parentNode.ypos()])"}
 addUserKnob {26 divider002 l "" +STARTLINE}
 addUserKnob {4 mode t "Choose how to use the referenced camera:\n•<b>Animate</b> keeps animation\n•<b>FrameHold</b> locks it to the selected reference frame." M {animate framehold "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {3 refFrame l "" t "This value will determine which frame the camera will be frozen on." -STARTLINE +HIDDEN}
 refFrame 1001
 addUserKnob {22 setcurrentframe l "set current frame" t "This will set the current frame you are on in the timeline to the framehold knob." -STARTLINE +HIDDEN T nuke.thisNode().knob('refFrame').setValue(nuke.frame())}
 addUserKnob {7 frameOffset l "frame offset" t "This allows you to offset the camera animation curve by a certain value." R -1 1}
 addUserKnob {7 refFrameHidden l INVISIBLE +INVISIBLE R -1 1}
 refFrameHidden {{"\[numvalue mode] == 0 ? frame + \[value frameOffset] : \[value refFrame] + \[value frameOffset]\n"}}
 addUserKnob {43 code l INVISIBLE +INVISIBLE}
 code "\[expr \{\n  \[string length \[string trim \[value cameraName]]] > 0 &&\n  \[exists \[value cameraName]] &&\n  \[string match \"Camera*\" \[class \[value cameraName]]]\n\}]\n"
 addUserKnob {26 ""}
 addUserKnob {22 switch l "     switch to translate/rotate/scale     " t "Toggles between <b>World Matrix</b> and <b>Translate/Rotate/Scale</b> modes. Updates internal control and label accordingly." T "import nuke\n\nclass KnobSwitcher:\n    def __init__(self, node):\n        self.node = node\n        self.switch_labels = \[\n            \"     switch to world matrix     \",\n            \"     switch to translate/rotate/scale     \"\n        ]\n\n    def switch(self):\n        knob = nuke.thisKnob()\n        label = knob.label()\n        use_matrix_mode = int(label == self.switch_labels\[0])  # 1 = world matrix, 0 = TRS\n\n        # Set the knob label\n        knob.setLabel(self.switch_labels\[use_matrix_mode])\n\n        # Set the control knob (drives conditional expressions)\n        self.node\['useMatrix'].setValue(use_matrix_mode)\n\n        # Optionally update the node label too\n        self.node\['label'].setValue(\"(world matrix)\" if use_matrix_mode else \"\")\n\n# Example usage\nnode = nuke.thisNode()\nswitcher = KnobSwitcher(node)\nswitcher.switch()\n" +STARTLINE}
 addUserKnob {20 info l Info}
 addUserKnob {26 versions l "" +STARTLINE T "<br><font size=\"5\">Camera Tag</font><font color=#CD0000> v1.3"}
 addUserKnob {26 divider003 l "" +STARTLINE}
 addUserKnob {26 bulletpoints l "" +STARTLINE T "<br><strong>•</br> <b>Camera Tag</b> can be linked to another camera<br>based on it's name.<br></b><i><br><strong>•</br> Purpose of this is to be able to copy the camera<br>any where in the script and have it feed of one<br>camera.<br></b><br><strong>•</br> We recommend you connect the master camera<br>to <b>Camera Bag</b> node which stores the input camera's<br>data.<br>Then have Camera Tag (this node) feed of that. This <br>way if the  master camera gets updated all camera<br>get updated at once.</i><br><br><b>John Toth © 2020 <br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#CD0000\">Tool Demo" +INVISIBLE T "nuke.message('coming soon')" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#CD0000\">Version Log" -STARTLINE T "version_number = \"1.3\"\ncontext = \"CameraTag\"\nmodified_date = \"17th May 2025\"\ndeveloper = \"John Toth © 2020\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\n\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- creation of the tool\n<br></i><b> v 1.1 </b><i>\n- Find button was created which locates the node it's connected to\n<br></i><b> v 1.2 </b><i>\n-if camera name string is empty or something that is not a camera class or written done in string this node will now go to 0 and not read \"errors\"\n- grabe name/clear button was added\n\n\"\"\"\n\nthank_you = \"\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    #f\"<b>Thank You:</b><br>\{thank_you\}<br>\{enter\}\"\n    f\"\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)\n"}
}
