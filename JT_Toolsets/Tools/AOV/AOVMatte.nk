Group {
 name AOVMatte1
 help "Generates a matte/shape based on the incoming channel information."
 tile_color 0x119911ff
 selected true
 addUserKnob {20 AOVMatte}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION AOVMatte
 addUserKnob {1 operation l INVISIBLE +INVISIBLE}
 operation "\[expr \{\[numvalue replace] ? \"\" : \"\[value operations]\" \}]"
 addUserKnob {1 mix l INVISIBLE +INVISIBLE}
 mix "\[value opacity]"
 addUserKnob {41 channels t "The matte is generated from the channel selected.\n\nThis is usually Position/Normal channels." T Shuffle1.in}
 addUserKnob {6 unpremultiply t "Divides the selected channel layer by the incoming alpha if any.\n\nThis is highly adviced as it can cause every pixel to be correctly calculated and causes less artefacts around edges." +STARTLINE}
 addUserKnob {41 visualizeOutput_1 l "visualize output" t "When enabled the generated matte will overlay the image based on the settings in the Visualize tab." -STARTLINE T visual.visualizeOutput}
 addUserKnob {41 visualizeIn3D l "visualize in 3D" t "When enabled the generated matte will be represented in 3D space as a point cloud with the AOVMatte shape based on the settings in the Visualize tab." -STARTLINE T visual.visualizeIn3D}
 addUserKnob {26 ""}
 addUserKnob {4 operations l operation t "B is the incoming alpha layer.\nA is the generated matte.\n\n<b>• absminus abs(A-B) </b>- how much the pixels differ. \n\n<b>• b if not a A?A:B </b>- shows A wherever A exists; otherwise shows B. \n\n<b>• divide A/B, 0 if A<0 and B<0 </b>- divides the values but stops two negative values from becoming a positive number. \n\n<b>• from (B-A) </b>- subtracts A from B. \n\n<b>• in Ab </b>- only shows the areas of image A that overlap with the alpha of B. \n\n<b>• max (max(A,B)) </b>- selects the lighter of the two colors as the resulting color. Only areas darker than B are replaced, while areas lighter than B do not change. \n\n<b>• min (min(A,B)) </b>- selects the darker of the two colors as the resulting color. Any parts that are lighter than B are substituted. Any parts of the image that are darker than B don’t change. \n\n<b>• minus (A-B) </b>- subtracts B from A. \n\n<b>• multiply (AB, A if A<0 and B<0)</b> - multiplies A by B. The result is always darker. Blending with black gives black and with white returns the color unchanged. \n\n<b>• out A(1-b) </b>- only shows the areas of image A that do not overlap with the alpha of B. \n\n<b>• plus A+B </b>- the sum of the two colors. Increases brightness to lighten A and reflect B. \n\n<b>• stencil B(1-a) </b>- this is the reverse of the out operation. Only shows the areas of image B that do not overlap with the alpha of A. \n\n<b>• union A+B-AB </b>- shows both image A and B. \n\n<b>• xor A+B-2AB </b>- shows both image A and B where the images do not overlap." +DISABLED M {absminus "b if not a " "divide " from in max min minus multiply out plus stencil union xor "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 operations plus
 addUserKnob {41 replace t "When enabled, existing alpha channel is replaced with generated matte from this node.\n\nIf this is disabled you can use the operations to combine the generated matte and the previous coming alpha." -STARTLINE T menu.replace}
 addUserKnob {4 sampling t "The generated matte will be scaled up 2x in scale and reformated back down which may cause a softer edge." M {none "2x sampling" "" "" "" "" "" ""}}
 addUserKnob {7 opacity t "Dissolves between the effect from 0 to 1, The full effect at 1.\n\nThis is mostly useful with the replace feature. To stack Mattes together"}
 opacity 1
 addUserKnob {26 ""}
 addUserKnob {4 shape t "Shape of the matte being generated." M {sphere cube ""}}
 shape cube
 addUserKnob {6 invert t "Invert the solid area of the shape " -STARTLINE}
 addUserKnob {41 useAxis l "use input axis" t "Use an axis to drive the location of the matte.\n\nWhen enabled a axis input will be created. Connect an axis node to it and it will be generated.\n\nIf you happen to have a mannual selection in the position knob. This will be stored when you toggle this on/off." -STARTLINE T Picker.useAxis}
 addUserKnob {41 position t "Position of the center point of where the shape/matte will be generated from." T Picker.position}
 addUserKnob {13 rotate t "Rotate of the shape/matte"}
 addUserKnob {13 scale t "Scale of the shape/matte"}
 scale {1 1 1}
 addUserKnob {7 radius l "uniform Scale" t "Scale shape/matte uniformly in xyz." R 0 100}
 radius 1
 addUserKnob {26 ""}
 addUserKnob {4 falloff_type l fallloff t "Applies a mathematic falloff to each pixel" M {linear smooth quadratic cubic exponential "" "" "" "" "" ""}}
 addUserKnob {7 gain t "Clamp at 0 to 1. 1 being the softest with the value going down making darker values go white."}
 gain 1
 addUserKnob {7 gamma t "Applies a constant gamma value to the result of the generated matte. This lightens or darkens the midtones." R 0 5}
 gamma 1
 addUserKnob {6 color_rgb_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
 addUserKnob {20 noise l Noise}
 addUserKnob {6 addNoise l "add noise" t "add noise inside the generated matte" +STARTLINE}
 addUserKnob {26 space001 l "" +STARTLINE +INVISIBLE T "\t"}
 addUserKnob {4 type t "noise type" M {fBm turbulence ""}}
 addUserKnob {6 invertNoise l invert t "Invert noise pattern. Whatever is 0 will become 1 and anything 1 will become 0." -STARTLINE}
 addUserKnob {4 fractalBlur l "fractal blur" t "Noise is applied to more transparent values and the white is kept intact.\n" M {none nonlinear linear "" "" "" "" "" ""}}
 addUserKnob {26 ""}
 addUserKnob {13 translateNoise l translate t "Translate the noise in xyz"}
 addUserKnob {13 rotateNoise l rotate t "Rotate the noise in xyz"}
 addUserKnob {13 scaleNoise l scale t "Scale noise independently in xyz\n"}
 scaleNoise {1 1 1}
 addUserKnob {7 uniform_scaleNoise l "uniform scale" t "Scale noise uniformly in xyz." R 0.001 10}
 uniform_scaleNoise 1
 addUserKnob {26 ""}
 addUserKnob {3 octaves t "Number of perlin noise functions to add"}
 octaves 10
 addUserKnob {7 lacunarity t "Each octave is mutlpies frequency by this amount" R 1 10}
 lacunarity 2
 addUserKnob {7 gainNoise l gain t "Each octave is mutlpies amplitude by this amount" R 0.1 1}
 gainNoise 0.5
 addUserKnob {7 gammaNoise l gamma t "Applies a constant gamma value to the result of the noise. This lightens or darkens the midtones." R 0.1 1}
 gammaNoise 0.5
 addUserKnob {26 ""}
 addUserKnob {7 mixNoise l mix t "Dissolves between the original image at 0 and the full effect (noise) at 1."}
 mixNoise 1
 addUserKnob {20 visualize l Visualize}
 addUserKnob {41 visualizeOutput l "visualize output" t "When enabled the generated matte will overlay the image based on the settings in the Visualize tab." T visual.visualizeOutput}
 addUserKnob {18 newMatte l "new matte" t "Generated matte respresentation overlay in the viewport."}
 newMatte {1 0 0}
 addUserKnob {6 newMatte_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 aovMatte_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 selectedMatte_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {18 oldMatte l "old matte" t "Incoming alpha respresentation overlay in the viewport.\n\nThis is only visible if \"replace\" is disbaled."}
 oldMatte {0 1 0}
 addUserKnob {6 oldMatte_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 inputMatte_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 visualizeColor_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
 addUserKnob {7 visualizeMix l mix t "Dissolves between no visualize colour overlay on the image from 0 and 1 when visualize output is enabled.\n\n1 Being full effect"}
 visualizeMix 0.5
 addUserKnob {26 ""}
 addUserKnob {41 visualizeIn3D_1 l "visualize in 3D" t "When enabled the generated matte will be represented in 3D space as a point cloud with the AOVMatte shape based on the settings in the Visualize tab." T visual.visualizeIn3D}
 addUserKnob {41 detail l "point detail" t "Controls the number of available points in the viewer.\n0 = No points, 1 = All available points" T PositionToPoints1.detail}
 addUserKnob {41 pointSize l "point size" t "Controls the display size of the points to display in the viewer." T PositionToPoints1.pointSize}
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>AOV Matte</font><font color=#119911> v1.3"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "overview of the node" +STARTLINE T "<br><strong>•</br> \n<b>AOVMatte</b> using the incoming channel information<br>to generate a matte based on a shape.\n\n<br><br>\n<i>\n• This node is usually for Normals and position layers.\n<br>\n• If you have an animated axis and Pworld you can enable<br>\"use input axis\" to replicate Pobject.\n\n\n</i><br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#119911;\">John Toth <b>© 2020 <br>\n\n"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#119911\">Tool Demo" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message('coming soon')" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#119911\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\nversion_number = \"1.3.7\"\ncontext = \"AOV\"\n\n\ndate = \"30th January\"\nyear = \" 2024\"\n\ndeveloper = \"John Toth © 2020\"\nsite = \"<a href='https://johntothvfx.com'> <span style='color:#BBBBBB'>\"\n\n\n\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- generates a shape/matte based on a selection\n<br></i><b> v 1.1 </b><i>\n- 2D visual overlay was added\n- noise was added\n<br></i><b> v 1.2 </b><i>\n- fixed minor bug with the rotation on the cube shape\n- will generate solid alpha if no alpha is present\n<br></i><b> v 1.3 </b><i>\n- user interface updated\n- information tab was re-written\n- shape can be inverted\n- uniform scale has been added\n- merging incoming alpha and generated\n- replace button was added\n- more mathematical falloff options added\n- gamma slider was added\n- axis option was added\n- visualize now displayed old matte\n- visualize 3D now will display the shape in 3D space\n- noise can be invert\n- fractal blur has been added to the noise\n- noise uniform scale,translate,rotate,scale now work independently\n- mix for the noise was added\n\"\"\"\n\n\n\n\nthankyou = \"\"\"- This node is based of N Depth Bubble as a learning curve of how to create a robust Pmatte and I would like to thanks Daniel Velikov and Ben Dickson\n\"\"\"\n\n\n\"\"\"Do not touch section below\"\"\"\nheader = \"Version Log:\"\nDLM = \"<b>Date Last Modified: </b>\" + date + year\n\nSPACE = \" \"\nENTER = \"<br><br>\"\nUPPER = \"<b>\"\nLOWER = \"</b>\"\n\n\n\nnuke.message(UPPER + header + ENTER + \"Name: \" + LOWER + name + \"<br>\" + UPPER + \"Version Number: \" + LOWER + version_number + \"<br>\" + UPPER + \"Context: \" + LOWER + context + ENTER + DLM + log + \"</i>\" + \"<br>\" + \"<b>Thankyou:</b><br>\" + thankyou + \"<br>\" + UPPER + site + developer + ENTER + \"</a>\") \n\n\n"}
}
 BackdropNode {
  inputs 0
  name BackdropNode1
  tile_color 0x23232301
  label "<center>Don't Touch\n\n"
  note_font "Source Code Pro Light"
  note_font_size 40
  note_font_color 0xee453cff
  xpos 618
  ypos 580
  bdwidth 730
  bdheight 759
 }
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0xff9900ff
  label "<center>Visualize Output\n<i><font size=1>(bottom section is to mimic ChannelMerge operations)\n\n"
  note_font "Source Code Pro Light"
  note_font_size 24
  note_font_color 0xee453cff
  xpos 430
  ypos 3076
  bdwidth 468
  bdheight 1020
 }
 BackdropNode {
  inputs 0
  name BackdropNode3
  tile_color 0xff9900ff
  label "<center>Visualize Output 3D\n\n\n"
  note_font "Source Code Pro Light"
  note_font_size 24
  note_font_color 0xee453cff
  xpos 650
  ypos 4606
  bdwidth 473
  bdheight 315
 }
 Cube {
  inputs 0
  display off
  selectable false
  render_mode off
  rows 1
  columns 1
  uniform_scale 2
  name Cube1
  xpos 1170
  ypos 877
  disable {{"parent.visual.visualizeIn3D == 1 ? ( parent.shape == 0 ? 1 : 0) : 1"}}
 }
 Sphere {
  inputs 0
  display off
  selectable false
  render_mode off
  rows 10
  columns 10
  name Sphere1
  xpos 1060
  ypos 877
  disable {{"parent.visual.visualizeIn3D == 1 ? ( parent.shape == 1 ? 1 : 0) : 1"}}
 }
 Dot {
  name Dot2
  note_font_size 35
  note_font_color 0xffffff
  xpos 1094
  ypos 1001
 }
 Switch {
  inputs 2
  which {{parent.shape}}
  name Switch1
  xpos 1170
  ypos 997
 }
 TransformGeo {
  display wireframe
  selectable false
  render_mode off
  translate {{parent.position.r} {parent.position.g} {parent.position.b}}
  rotate {{parent.rotate.x} {parent.rotate.y} {parent.rotate.z}}
  scaling {{parent.scale} {parent.scale} {parent.scale}}
  uniform_scale {{parent.radius}}
  name TransformGeo1
  xpos 1170
  ypos 1069
  disable {{!parent.visual.visualizeIn3D}}
 }
push 0
 ScanlineRender {
  inputs 2
  conservative_shader_sampling false
  motion_vectors_type distance
  name ScanlineRender1
  xpos 1170
  ypos 1141
  disable {{!parent.visual.visualizeIn3D}}
 }
 Dot {
  name Dot12
  note_font_size 35
  note_font_color 0xffffff
  xpos 1204
  ypos 1290
 }
 Input {
  inputs 0
  name Input
  label "\[value number]"
  xpos 110
  ypos 679
 }
 Dot {
  name Dot8
  note_font_size 35
  note_font_color 0xffffff
  xpos 144
  ypos 785
 }
set N16c5aa00 [stack 0]
 Dot {
  name Dot13
  note_font_size 35
  note_font_color 0xffffff
  xpos 544
  ypos 785
 }
 Unpremult {
  channels all
  name Unpremult1
  xpos 510
  ypos 830
  disable {{!parent.unpremultiply}}
 }
 Shuffle {
  in none
  in2 rgba
  out rgb
  name Shuffle1
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos 510
  ypos 868
 }
 Dot {
  name Dot1
  note_font_size 35
  note_font_color 0xffffff
  xpos 544
  ypos 977
 }
set N37022600 [stack 0]
 Switch {
  inputs 2
  name Switch2
  label "to proc 3D display"
  xpos 510
  ypos 1280
 }
 Dot {
  name Dot3
  note_font_size 35
  note_font_color 0xffffff
  xpos 544
  ypos 1505
 }
set N37025800 [stack 0]
 Dot {
  name Dot19
  note_font_size 35
  note_font_color 0xffffff
  xpos 544
  ypos 1601
 }
set N37025e00 [stack 0]
 Dot {
  name Dot18
  note_font_size 35
  note_font_color 0xffffff
  xpos 654
  ypos 1601
 }
 Reformat {
  type scale
  scale 2
  filter impulse
  name Reformat3
  label "x2 over sampling"
  xpos 620
  ypos 1951
  disable {{!parent.sampling}}
 }
 Dot {
  name Dot17
  note_font_size 35
  note_font_color 0xffffff
  xpos 654
  ypos 2215
 }
push $N37025e00
 Add {
  channels rgb
  value {{-parent.position.r} {-parent.position.g} {-parent.position.b} 0}
  name Add1
  label "center position"
  xpos 510
  ypos 1669
 }
 ColorMatrix {
  matrix {
      {{cos(radians(parent.rotate.y))} 0 {-sin(radians(parent.rotate.y))}}
      {0 1 0}
      {{sin(radians(parent.rotate.y))} 0 {cos(radians(parent.rotate.y))}}
    }
  name ColorMatrix8
  label y
  xpos 510
  ypos 1707
 }
 ColorMatrix {
  matrix {
      {1 0 0}
      {0 {cos(radians(parent.rotate.x))} {sin(radians(parent.rotate.x))}}
      {0 {-sin(radians(parent.rotate.x))} {cos(radians(parent.rotate.x))}}
    }
  name ColorMatrix7
  label "x\n"
  xpos 510
  ypos 1745
 }
 ColorMatrix {
  matrix {
      {{cos(radians(parent.rotate.z))} {sin(radians(parent.rotate.z))} 0}
      {{-sin(radians(parent.rotate.z))} {cos(radians(parent.rotate.z))} 0}
      {0 0 1}
    }
  name ColorMatrix9
  label "z\n"
  xpos 510
  ypos 1783
 }
 Add {
  channels rgb
  value {{parent.position.r} {parent.position.g} {parent.position.b} 0}
  name Add2
  label "revert position to origin"
  xpos 510
  ypos 1821
 }
 Reformat {
  type scale
  scale 2
  filter impulse
  name Reformat1
  label "x2 over sampling"
  xpos 510
  ypos 1951
  disable {{!parent.sampling}}
 }
 Expression {
  temp_name0 sphere
  temp_expr0 "r == 0 && g == 0 && b == 0 ? 0 : (parent.rotate.x != 1 || parent.rotate.y != 1 || parent.rotate.z != 1?1-(sqrt(pow2((parent.position.r-r)+((offset*cos(radians(about)))*cos(radians(round))))/pow2(parent.scale.x)+pow2((parent.position.g-g)+(offset*sin(radians(about))))/pow2(parent.scale.y)+pow2((parent.position.b-b)+((offset*cos(radians(about)))*sin(radians(round))))/pow2(parent.scale.z ))/parent.radius):1-(sqrt(pow2((parent.position.r-r)+((offset*cos(radians(about)))*cos(radians(round))))+pow2((parent.position.g-g)+(offset*sin(radians(about))))+pow2((parent.position.b-b)+((offset*cos(radians(about)))*sin(radians(round)))))/parent.radius))"
  temp_name1 Cube_OLD
  temp_expr1 "r == 0 && g == 0 && b == 0 ? 0 : 1-max(abs(normX.x * (parent.position.r - r) + normX.y * (parent.position.g - g)+normX.z * (parent.position.b - b)) / (parent.radius - (1 - parent.scale.x )) * 2 , abs(normY.x * (parent.position.r - r) + normY.y * (parent.position.g - g) + normY.z * (parent.position.b - b)) / (parent.radius - (1 - parent.scale.y )) * 2, abs(normZ.x * (parent.position.r - r) + normZ.y * (parent.position.g - g) + normZ.z * (parent.position.b - b)) / (parent.radius - (1 - parent.scale.z )) * 2) / 2"
  temp_name3 cube_NEW
  temp_expr3 "r == 0 && g == 0 && b == 0 ? 0 : min(1 - sqrt(pow2((r - parent.position.r) / (parent.scale.x * parent.radius))), 1 - sqrt(pow2((g - position.g) / (parent.scale.y * parent.radius))), 1 - sqrt(pow2((b - parent.position.b) / (parent.scale.z * parent.radius))))\n"
  expr3 " parent.invert == 0 ? clamp (parent.shape == 0 ? sphere : cube_NEW) : (1 - (clamp (parent.shape == 0 ? sphere : cube_NEW))) * alpha"
  name Shape1
  xpos 510
  ypos 2030
  addUserKnob {20 User}
  addUserKnob {6 pos_center_panelDropped l "panel dropped state" +HIDDEN +STARTLINE}
  addUserKnob {6 pos_center_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 pos_center_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 pos_center_panelDropped_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 pos_center_panelDropped_1_1_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {7 offset R -100 100}
  addUserKnob {7 round R -180 180}
  addUserKnob {7 about R -180 180}
  addUserKnob {26 cubeTitle l "<b> Cube </b>"}
  addUserKnob {26 ""}
  addUserKnob {13 rad}
  rad {{radians(parent.rotate.x)} {radians(parent.rotate.y)} {radians(parent.rotate.z)}}
  addUserKnob {13 normX}
  normX {{cos(rad.z)*(cos(rad.y))} {sin(rad.z)*(cos(rad.y))} {-sin(rad.y)}}
  addUserKnob {13 normY}
  normY {{cos(rad.z)*(sin(rad.y)*(-sin(rad.x)))-sin(rad.z)*(cos(rad.x))} {sin(rad.z)*(sin(rad.y)*(-sin(rad.x)))+cos(rad.z)*(cos(rad.x))} {(cos(rad.y)*(-sin(rad.x)))}}
  addUserKnob {13 normZ}
  normZ {{cos(rad.z)*(sin(rad.y)*cos(rad.x))-sin(rad.z)*sin(rad.x)} {sin(rad.z)*(sin(rad.y)*cos(rad.x))+cos(rad.z)*sin(rad.x)} {cos(rad.y)*cos(rad.x)}}
 }
 Expression {
  temp_name0 falloff_math
  temp_expr0 "alpha * (1/ clamp( parent.gain ,0.00001,1) )"
  expr3 "parent.falloff_type == 0 ? falloff_math : parent.falloff_type == 1 ? smoothstep( 0 , 1 , falloff_math ) : parent.falloff_type == 2 ? clamp( pow2 ( falloff_math ) ) : parent.falloff_type == 3 ? clamp( falloff_math ** 3 ) : pow( 1 - pow( 1 - falloff_math , 1 ) , 1 )"
  name falloff1
  xpos 510
  ypos 2054
 }
 Grade {
  channels alpha
  gamma {{max(parent.gamma,0.2)}}
  white_clamp true
  name Grade3
  xpos 510
  ypos 2080
 }
 Copy {
  inputs 2
  from0 rgba.red
  to0 rgba.red
  from1 rgba.green
  to1 rgba.green
  from2 rgba.blue
  to2 rgba.blue
  name Copy1
  xpos 510
  ypos 2193
 }
 Add {
  channels rgb
  value {{-parent.position.r} {-parent.position.g} {-parent.position.b} 0}
  name Add4
  label "center position"
  xpos 510
  ypos 2261
 }
 ColorMatrix {
  matrix {
      {1 0 0}
      {0 {cos(radians(angle))} {-sin(radians(angle))}}
      {0 {sin(radians(angle))} {cos(radians(angle))}}
    }
  name X2
  label "rotate noise x"
  xpos 510
  ypos 2293
  disable {{"parent.rotateNoise.x== 0 ? parent.rotateNoise.y == 0 ? parent.rotateNoise.z == 0 ? 1 : 0 : 0 : 0"}}
  addUserKnob {20 User}
  addUserKnob {7 angle R -180 180}
  angle {{parent.rotateNoise.x}}
 }
 ColorMatrix {
  matrix {
      {{cos(radians(angle))} 0 {sin(radians(angle))}}
      {0 1 0}
      {{-sin(radians(angle))} 0 {cos(radians(angle))}}
    }
  name Y2
  label "rotate noise y"
  xpos 510
  ypos 2331
  disable {{"parent.rotateNoise.x== 0 ? parent.rotateNoise.y == 0 ? parent.rotateNoise.z == 0 ? 1 : 0 : 0 : 0"}}
  addUserKnob {20 User}
  addUserKnob {7 angle R -180 180}
  angle {{parent.rotateNoise.y}}
 }
 ColorMatrix {
  matrix {
      {{cos(radians(angle))} {-sin(radians(angle))} 1.224646799e-16}
      {{sin(radians(angle))} {cos(radians(angle))} 0}
      {0 0 1}
    }
  name Z2
  label "rotate noise z"
  xpos 510
  ypos 2369
  disable {{"parent.rotateNoise.x== 0 ? parent.rotateNoise.y == 0 ? parent.rotateNoise.z == 0 ? 1 : 0 : 0 : 0"}}
  addUserKnob {20 User}
  addUserKnob {7 angle R -180 180}
  angle {{parent.rotateNoise.z}}
 }
 Add {
  channels rgb
  value {{parent.position.r} {parent.position.g} {parent.position.b} 0}
  name Add3
  label "revert position to origin"
  xpos 510
  ypos 2411
 }
 Expression {
  temp_name0 fBmNoise
  temp_expr0 "fBm((r+parent.translateNoise.x)*1/((1 - parent.scaleNoise.x) + parent.uniform_scaleNoise),(g+parent.translateNoise.y)*1/((1 - parent.scaleNoise.y) + parent.uniform_scaleNoise),(b+parent.translateNoise.z)*1/((1 - parent.scaleNoise.z) + parent.uniform_scaleNoise),parent.octaves,parent.lacunarity,parent.gainNoise)*.5+0.5"
  temp_name1 turbNoise
  temp_expr1 "turbulence((r + parent.translateNoise.x) * 1 / ((1 - parent.scaleNoise.x) + parent.uniform_scaleNoise), (g + parent.translateNoise.y) * 1 / ((1 - parent.scaleNoise.y) + parent.uniform_scaleNoise), (b + parent.translateNoise.z) * 1 / ((1 - parent.scaleNoise.z) + parent.uniform_scaleNoise), parent.octaves, parent.lacunarity, parent.gainNoise)"
  temp_name2 type
  temp_expr2 "parent.invertNoise == 0 ? (parent.type== 0 ? fBmNoise : parent.type == 1 ? turbNoise:0) : (parent.type== 0 ? 1 - fBmNoise : parent.type == 1 ?1 - turbNoise:0) "
  temp_name3 operation
  temp_expr3 "parent.fractalBlur == 0 ? (a < 1.1 ? (a * type) : a) : parent.fractalBlur == 1 ? pow(max(a, 0.000001), 1.0 / max(type, 0.000001)) : parent.fractalBlur == 2 ? (a < 1.1 ? (a + (a * type) * a) * a : a) : a\n"
  channel0 rgba
  expr3 operation
  mix {{parent.mixNoise}}
  name Noise
  xpos 510
  ypos 2511
  disable {{!parent.addNoise}}
 }
 Gamma {
  channels alpha
  value {{parent.gammaNoise}}
  mix {{parent.mixNoise}}
  name Gamma2
  xpos 510
  ypos 2555
  disable {{!parent.addNoise}}
 }
 Reformat {
  type scale
  scale 0.5
  name Reformat2
  label "revert over sampling to origin\nx0.5"
  xpos 510
  ypos 2617
  disable {{!parent.sampling}}
 }
 Expression {
  expr0 isnan(r)?0:r
  expr1 isnan(g)?0:g
  expr2 isnan(b)?0:b
  expr3 isnan(a)?0:a
  name Expression25
  label "nan to black (0)"
  xpos 510
  ypos 2720
 }
 Expression {
  expr0 isinf(r)?0:r
  expr1 isinf(g)?0:g
  expr2 isinf(b)?0:b
  expr3 isinf(a)?0:a
  name Expression5
  label "inf to black (0)"
  xpos 510
  ypos 2758
 }
 Clamp {
  channels alpha
  name Clamp1
  label "\[expr \{\[value minimum_enable]? \"\[value minimum] min\" : \"\"\}]\[expr \{\[value minimum_enable] && \[value maximum_enable]? \"\n\" : \"\"\}]\[expr \{\[value maximum_enable]? \"\[value maximum] max\" : \"\"\}]"
  xpos 510
  ypos 2828
 }
 Dot {
  name Dot10
  xpos 544
  ypos 2946
 }
set N53156e00 [stack 0]
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle2
  tile_color 0xffffffff
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos 510
  ypos 3196
 }
 Grade {
  multiply {{parent.newMatte} {parent.newMatte} {parent.newMatte} 1}
  white_clamp true
  name Grade4
  label "position matte"
  xpos 510
  ypos 3296
 }
 Dot {
  name Dot20
  note_font_size 35
  note_font_color 0xffffff
  xpos 544
  ypos 3570
 }
set N5341c800 [stack 0]
 Dot {
  name Dot9
  note_font_size 35
  note_font_color 0xffffff
  xpos 544
  ypos 3930
 }
set N177d8e00 [stack 0]
 Dot {
  name Dot25
  note_font_size 35
  note_font_color 0xffffff
  xpos 544
  ypos 3996
 }
push $N177d8e00
push $N5341c800
 Dot {
  name Dot23
  note_font_size 35
  note_font_color 0xffffff
  xpos 654
  ypos 3570
 }
 Expression {
  channel0 none
  channel1 none
  channel2 none
  channel3 alpha
  expr3 "a>0.0000001? 1:0"
  name Hard_Alpha1
  tile_color 0xffffffff
  xpos 620
  ypos 3608
  disable {{"parent.operations == 1 ? 0 : 1"}}
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle9
  tile_color 0xbbbbbbff
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos 620
  ypos 3652
  disable {{"parent.operations == 0 ? 0 : parent.operations == 3 ? 0 : parent.operations == 6 ? 0 : parent.operations == 7 ? 0 : 1"}}
 }
 Grade {
  multiply {{parent.oldMatte} {parent.oldMatte} {parent.oldMatte} 1}
  white_clamp true
  name Grade1
  label "input matte"
  xpos 620
  ypos 3728
  disable {{"parent.operations == 0 ? 0 : parent.operations == 3 ? 0 : parent.operations == 6 ? 0 : parent.operations == 7 ? 0 : 1"}}
 }
 Dot {
  name Dot22
  note_font_size 35
  note_font_color 0xffffff
  xpos 654
  ypos 3858
 }
push $N37025800
 Dot {
  name Dot7
  note_font_size 35
  note_font_color 0xffffff
  xpos 764
  ypos 1505
 }
set N534b3600 [stack 0]
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle3
  tile_color 0xffffffff
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos 730
  ypos 3196
 }
 Grade {
  multiply {{parent.oldMatte} {parent.oldMatte} {parent.oldMatte} 1}
  white_clamp true
  name Grade2
  label "input matte"
  xpos 730
  ypos 3296
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle8
  tile_color 0xbbbbbbff
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos 730
  ypos 3652
  disable {{"parent.operations == 8 ? 0 : 1"}}
 }
 Grade {
  multiply {{parent.newMatte} {parent.newMatte} {parent.newMatte} 1}
  white_clamp true
  name Grade5
  label "position matte"
  xpos 730
  ypos 3728
  disable {{"parent.operations == 8 ? 0 : 1"}}
 }
 Merge2 {
  inputs 2
  operation {{"parent.operations == 0 ? 6 : parent.operations == 1 ? 27 : parent.operations == 2 ? 8 : parent.operations == 3 ? 10 : parent.operations == 4 ? 14 : parent.operations == 5 ? 17 : parent.operations == 6 ? 18 : parent.operations == 7 ? 19 : parent.operations == 8 ? 20 : parent.operations == 9? 21 : parent.operations == 10? 24 : parent.operations == 11? 27 : parent.operations == 12? 22 : parent.operations == 13? 29 : 22"}}
  name Merge3
  label "mix: \[value mix] (\[value bbox])"
  xpos 730
  ypos 3848
 }
 Merge2 {
  inputs 2
  name Merge4
  label "mix: \[value mix] (\[value bbox])"
  xpos 730
  ypos 3920
  disable {{"parent.operations == 1 ? 0 : 1"}}
 }
 Switch {
  inputs 2
  which {{parent.replace}}
  name Switch3
  label replace
  xpos 730
  ypos 3986
 }
 Clamp {
  channels rgb
  maximum_enable false
  name Clamp2
  label "\[expr \{\[value minimum_enable]? \"\[value minimum] min\" : \"\"\}]\[expr \{\[value minimum_enable] && \[value maximum_enable]? \"\n\" : \"\"\}]\[expr \{\[value maximum_enable]? \"\[value maximum] max\" : \"\"\}]"
  xpos 730
  ypos 4040
 }
 Dot {
  name Dot6
  note_font_size 35
  note_font_color 0xffffff
  xpos 764
  ypos 4433
 }
push $N53156e00
push $N16c5aa00
 Shuffle {
  in none
  alpha black
  out alpha
  name Shuffle4
  tile_color 0x111111ff
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos 110
  ypos 867
  disable {{!parent.replace}}
 }
 ChannelMerge {
  inputs 2
  operation {{"parent.replace == 1 ? 10 : parent.operations"}}
  mix {{parent.opacity}}
  name ChannelMerge1
  xpos 110
  ypos 2930
 }
 Clamp {
  channels alpha
  name Clamp3
  label "\[expr \{\[value minimum_enable]? \"\[value minimum] min\" : \"\"\}]\[expr \{\[value minimum_enable] && \[value maximum_enable]? \"\n\" : \"\"\}]\[expr \{\[value maximum_enable]? \"\[value maximum] max\" : \"\"\}]"
  xpos 110
  ypos 3068
 }
 Dot {
  name Dot21
  note_font_size 35
  note_font_color 0xffffff
  xpos 144
  ypos 4265
 }
set N13e3c200 [stack 0]
 Dot {
  name Dot5
  note_font_size 35
  note_font_color 0xffffff
  xpos 302
  ypos 4265
 }
 Merge2 {
  inputs 2
  output rgb
  mix {{parent.visualizeMix}}
  name Merge1
  label "mix: \[value mix] (\[value bbox])"
  xpos 268
  ypos 4423
 }
 Dot {
  name Dot4
  note_font_size 35
  note_font_color 0xffffff
  xpos 302
  ypos 4577
 }
push $N13e3c200
 Switch {
  inputs 2
  which {{parent.visualizeOutput}}
  name Switch4
  xpos 110
  ypos 4573
 }
 Dot {
  name Dot16
  note_font_size 35
  note_font_color 0xffffff
  xpos 144
  ypos 4721
 }
set N13e3f000 [stack 0]
 Output {
  name Output1
  xpos 110
  ypos 5053
 }
 Axis3 {
  inputs 0
  skew {84 21 48}
  name Axis1
  label "axis input"
  xpos 740
  ypos 779
 }
push $N534b3600
 Dot {
  name Dot15
  note_font_size 35
  note_font_color 0xffffff
  xpos 984
  ypos 1505
 }
 Remove {
  operation keep
  channels rgba
  name Remove2
  label "\[if \{ \[lsearch \"rgb rgba\"  \[value channels]] != -1 \} \{ return \"(\[value channels])\n\" \} else \{ return \"\"\}]\[if \{ \[value channels2] != \"none\"\} \{return \"(\[value channels2])\"\} else \{return \" \"\}]\[if \{ \[value channels3] != \"none\"\} \{return \"\n(\[value channels3])\"\} else \{return \" \"\}]\[if \{ \[value channels4] != \"none\"\} \{return \"\n(\[value channels4])\"\} else \{return \" \"\}]"
  xpos 950
  ypos 4711
 }
push $N13e3f000
 Shuffle {
  alpha white
  name Shuffle5
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos 730
  ypos 4707
 }
 Dot {
  name Dot14
  note_font_size 35
  note_font_color 0xffffff
  xpos 764
  ypos 4841
 }
 PositionToPoints2 {
  inputs 2
  display textured
  selectable false
  render_mode textured
  cast_shadow false
  receive_shadow false
  P_channel {{{N_channel}}}
  pointSize 0.1
  name PositionToPoints1
  xpos 950
  ypos 4837
  disable {{!parent.visual.visualizeIn3D}}
 }
push $N37022600
 Dot {
  name Dot11
  note_font_size 35
  note_font_color 0xffffff
  xpos 764
  ypos 977
 }
 NoOp {
  name Picker
  knobChanged "node = nuke.thisNode()\nknob = nuke.thisKnob()\n\nif knob.name() == \"useAxis\":\n\n#list of knobs to disable\n    knobs = \['position']\n   \n    nuke.Undo.disable()\n\n    #safety making sure input 2 is disconnected before being deleted\n    nuke.thisGroup().setInput(1, None)    \n    \n    # Loop through all Input nodes and delete those not named 'axis'\n    parent_group = nuke.thisNode().parent()\n    for node in parent_group.nodes():\n        if node.Class() == 'Input' and node.name() != 'Input':\n            nuke.delete(node)\n   \n    node = nuke.thisNode()\n    position = node.knob('position').getValue()\n    backup = node.knob('backup').getValue()\n               \n#    if knob.value() == 1:      \n#        node.knob('backup').setValue(position)\n#        node.knob('position').setExpression('axis')\n\n\n    if knob.value() == 1:\n        if node.knob('position').isAnimated():\n            node.knob('backup').copyAnimations(node.knob('position').animations())\n            node.knob('position').clearAnimated()\n            node.knob('position').setExpression('axis')\n        else:\n            node.knob('backup').setValue(position)\n            node.knob('position').setExpression('axis')\n\n\n\n#enabling knobs\n        for x in knobs:\n            nuke.thisGroup().knob(x).setEnabled(False)\n\n        try:\n            input0 = nuke.thisGroup().input(0)\n            input1 = nuke.thisGroup().input(1)\n            nuke.thisGroup().setInput(1, None)\n        except: pass\n\n        axisInput = nuke.toNode(\"Axis1\")\n\n\n        # create input\n        inputNode = nuke.nodes.Input()\n        inputNode.setName(\"Axis\")\n        inputNode\['number'].setValue(1)\n\n        axisNode = nuke.toNode(\"Axis1\")\n        axisNode.setInput(0, inputNode)\n\n        inputNode.knob(\"xpos\").setValue(axisNode.knob(\"xpos\").value() + axisNode.screenWidth()/2 - inputNode.screenWidth()/2)\n        inputNode.knob(\"ypos\").setValue(axisNode.knob(\"ypos\").value() - 100)\n        inputNode.knob(\"label\").setValue(\"\[value number]\")\n\n    else:\n        \n        if node.knob('backup').isAnimated():\n            node.knob('position').clearAnimated()\n            node.knob('position').copyAnimations(node.knob('backup').animations())\n            node.knob('backup').clearAnimated()\n        else:\n            node.knob('position').clearAnimated()\n            node.knob('position').setValue(backup)\n    \n\n\n\n\n#list of knobs to disable\n        for x in knobs:\n            nuke.thisGroup().knob(x).setEnabled(True)\n\n        # delete input\n        try:\n            input0 = nuke.thisGroup().input(0)\n            nuke.thisGroup().setInput(1, None)\n        except: pass\n\n        inputNode = nuke.toNode(\"Axis\")\n\n\n        axisNode = nuke.toNode(\"Axis1\")\n\n        if inputNode:\n            nuke.delete(inputNode)\n\n    nuke.Undo.enable()"
  xpos 730
  ypos 1117
  addUserKnob {20 picker l Picker}
  addUserKnob {18 position}
  position {0 0 0}
  addUserKnob {6 position_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {6 color_rgb_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {18 backup}
  backup {0 0 0}
  addUserKnob {6 backup_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
  addUserKnob {26 ""}
  addUserKnob {6 useAxis l "use input axis" +STARTLINE}
  addUserKnob {18 axis}
  axis {{Axis1.world_matrix.3} {Axis1.world_matrix.7} {Axis1.world_matrix.11}}
  addUserKnob {6 axis_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 }
 NoOp {
  inputs 0
  name menu
  knobChanged "grp = nuke.thisGroup()\ntk = nuke.thisKnob()\n\nif tk.name() == \"replace\" and tk.value() == True:\n    grp.knob('operations').setEnabled(False)\n#    grp.knob('oldMatte').setEnabled(False)\n#    grp.knob('disable_inputMatte').setEnabled(False)\n\nelse:\n    grp.knob('operations').setEnabled(True)\n#    grp.knob('oldMatte').setEnabled(True)\n#    grp.knob('disable_inputMatte').setEnabled(True)\n"
  xpos 840
  ypos 1117
  addUserKnob {20 User}
  addUserKnob {6 replace +STARTLINE}
  replace true
 }
 NoOp {
  inputs 0
  name visual
  xpos 950
  ypos 1118
  addUserKnob {20 User}
  addUserKnob {6 visualizeOutput l "visualize output" +STARTLINE}
  visualizeOutput true
  addUserKnob {6 visualizeIn3D l "visualize in 3D" +STARTLINE}
 }
end_group
