Group {
name PositionToAxis1
help "Creates 3D axis nodes based on the positions selected from the incoming channel."
tile_color 0x119911ff
selected true
addUserKnob {20 positionToAxis l "Position To Axis"}
addUserKnob {1 CLASSIFICATION +INVISIBLE}
CLASSIFICATION PositionToAxis
addUserKnob {1 operation l INVISIBLE +INVISIBLE}
operation "\[expr \{\[numvalue number] ? \"\[value number]\" : \"\" \}]"
addUserKnob {41 channels t "Select the channel layer you wish to sample from" T Shuffle1.in}
addUserKnob {3 number l " " +DISABLED +INVISIBLE}
addUserKnob {22 lockToggle l lock/unlock -STARTLINE +INVISIBLE T "nuke.thisNode()\['number'].setEnabled( not nuke.thisNode()\['number'].enabled() )"}
addUserKnob {22 removeKnobs l remove -STARTLINE +INVISIBLE T "import re\n\ndef removeKnob(knob):\n    node = nuke.thisNode()\n    \n    match = re.search(r\"position_(\\d+)\", knob.name())\n    if not match:\n        return\n    \n    c = match.group(1)\n\n    # Remove knobs from the group node\n    for knobName, knobObj in list(node.knobs().items()):\n        if re.match(f\"position_\{c\}(_.*)?\", knobName):\n            node.removeKnob(knobObj)\n\n    # Check if there are any remaining position knobs in the group node\n    if not any(re.match(r\"position_\\d+\", k) for k in node.knobs()):\n        node.knob(\"divider03\").setVisible(False)\n        \n    # Update the number knob\n    num = node\['number'].value() - 1\n    if num < 0:\n        num = 0\n    node\['number'].setValue(num)\n    \n    # Remove the corresponding knobs from the Picker1 node\n    picker = nuke.toNode(\"Picker1\")\n    if picker:\n        for knobName, knobObj in list(picker.knobs().items()):\n            if re.match(f\"picker_color_\{c\}\", knobName):\n                picker.removeKnob(knobObj)\n\n"}
addUserKnob {4 class l "axis class" M {Axis Axis2 Axis3 Axis4}}
class Axis3
addUserKnob {26 "" +STARTLINE}
addUserKnob {41 position t "Position of where the axis will be created from when export is executed" T Picker1.position}
addUserKnob {26 ""}
addUserKnob {26 divider03 l "" +STARTLINE +HIDDEN}
addUserKnob {22 add t "add a new dynamic knob" T "import nuke\n\n# Code to get the existing Picker1 node inside the group\ndef getOrCreatePicker():\n    node = nuke.thisGroup()\n    \n    with node:\n        try:\n            picker = nuke.toNode(\"Picker1\")\n            if not picker:\n                nuke.message(\"Picker1 node not found inside the group.\")\n                return None\n            return picker\n        except Exception as e:\n            nuke.message(f\"Error: \{e\}\")\n            return None\n\n# Code for removing knobs\nRemoveKnobCode = \"\"\"nuke.thisNode().knob(\"removeKnobs\").execute(); removeKnob(nuke.thisKnob())\"\"\"\n\n# Main function to add knobs\ndef addKnob():\n    node = nuke.thisNode()\n\n    index = node\['number'].value() + 1\n    node\['number'].setValue(index)\n\n    index = \"01\"\n    while node.knob(f\"position_\{index\}\"):\n        index = str(int(index) + 1).zfill(2)\n\n    # Get the Picker1 node inside the group\n    picker = getOrCreatePicker()\n    if picker is None:\n        return\n\n    # Create the position Link_Knob and link it to the Picker1's Color_Knob\n    name_knob = nuke.Link_Knob(f\"position_\{index\}\", \" position \")\n    color_knob_name = f\"picker_color_\{index\}\"\n    \n    # Add the new Color_Knob to the Picker1 node if it doesn't exist\n    if not picker.knob(color_knob_name):\n        color_knob = nuke.Color_Knob(color_knob_name, f\"Picker Color \{index\}\")\n        picker.addKnob(color_knob)\n    \n    name_knob.setLink(f'Picker1.\{color_knob_name\}')\n    name_knob.setTooltip('Position of where the axis will be created from when export is executed')\n    name_knob.setFlag(nuke.STARTLINE)\n\n    # Spacer and remove button\n    space = nuke.Text_Knob(f\"position_\{index\}_space\", \"\")\n    space.setValue(\"   \")\n    space.clearFlag(nuke.STARTLINE)\n\n    remove_knob = nuke.PyScript_Knob(f\"position_\{index\}_remove\", \"remove\")\n    remove_knob.setValue(RemoveKnobCode)\n    remove_knob.setTooltip('Remove the dynamic \"position\" knob')\n    remove_knob.clearFlag(nuke.STARTLINE)\n\n    # Re-order the existing knobs\n    order_knobs = \[node.knob(k) for k in \[\"divider03\", \"add\", \"clear\", \"export\", \"info\", \"version\", \"divider04\", \"bulletpoints\", \"divider05\", \"demo\", \"log\"]]\n    for knob in order_knobs:\n        node.removeKnob(knob)\n\n    # Add the new knobs\n    for knob in \[name_knob, space, remove_knob]:\n        node.addKnob(knob)\n\n    # Re-add the previously removed knobs\n    for knob in order_knobs:\n        node.addKnob(knob)\n\n    # Finalize the knob setup\n    nuke.thisKnob().setFlag(0)\n    node.knob(\"divider03\").setVisible(True)\n\n# Call the function to add the knob\naddKnob()\n" +STARTLINE}
addUserKnob {22 clear l "clear all" t "removes all dynamic knobs" -STARTLINE T "def clearAllKnobs():\n    node = nuke.thisNode()\n    \n    import re\n    \n    for knobName, knob in node.knobs().items():\n        if re.match(r\"position_\\d*\", knobName):\n            node.removeKnob(knob)\n    \n    node.knob(\"divider03\").setVisible(False)\n    node.knob('number').setValue(0) \n   \n    picker = nuke.toNode(\"Picker1\")\n    if picker:\n        for knobName, knob in list(picker.knobs().items()):\n            if re.match(r\"picker_color_\\d*\", knobName):\n                picker.removeKnob(knob)\n\nclearAllKnobs()\n"}
addUserKnob {22 export l "   export   " t "Exports all dynamic point data from knobs into a axis nodes" -STARTLINE T "import nuke\nimport re\n\n# Get the currently selected node\nselected_node = nuke.thisNode()\n\nnuke.root().end()\n\n# Initial X position for the first Axis node\nx_pos = selected_node.xpos() + 150\n\n# Get the value from the 'class' pulldown knob to determine the type of Axis node to create\naxis_class = selected_node\['class'].value()\n\n# Regular expression to match \"position\" or \"position_\{number\}\"\nposition_pattern = re.compile(r\"^position(_\\d\{2\})?\$\")\n\n# Iterate over all knobs in the selected node\nfor knob_name in selected_node.knobs():\n    # Check if the knob name matches the pattern\n    if position_pattern.match(knob_name):\n        # Check if the knob is a Color_Knob\n        if isinstance(selected_node\[knob_name], nuke.Color_Knob):\n            # Create the Axis node based on the selected class\n            axis = nuke.createNode(axis_class, inpanel=False)\n            axis.setInput(0, None)\n            axis.setInput(1, None)\n\n            # Set the X position and Y position for the Axis node\n            axis.setXpos(x_pos)\n            axis.setYpos(selected_node.ypos() + 100)\n\n            # Iterate over the RGB channels\n            for i in range(3):\n                # Check if the channel is animated\n                if selected_node\[knob_name].isAnimated(i):\n                    # Copy the entire animation curve\n                    axis\['translate'].setAnimated(i)\n                    axis\['translate'].copyAnimations(selected_node\[knob_name].animations(i))\n                else:\n                    # Set the static value if not animated\n                    value = selected_node\[knob_name].getValue(i)\n                    axis\['translate'].setValue(float(value), i)\n\n            # Update the X position for the next Axis node\n            x_pos += 150"}
addUserKnob {20 info l Info}
addUserKnob {26 version l "" t "Node version info, for more information look at version log" +STARTLINE T "<br><font size='5'>Position To Axis</font><font color=#119911> v1.2"}
addUserKnob {26 divider04 l "" +STARTLINE}
addUserKnob {26 bulletpoints l "" t "overview of the node" +STARTLINE T "<br><strong>•</br> \n<b>Position To Axis</b> using the incoming channel<br>information to select a position and create an axis<br>based on that selected\n\n</i><br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#119911;\">John Toth <b>© 2020 <br>\n\n"}
addUserKnob {26 divider05 l "" +STARTLINE}
addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#119911\">Tool Demo</a>\n" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message(\"Coming Soon\")" +STARTLINE}
addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#119911\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\nversion_number = \"1.0.0\"\ncontext = \"AOV\"\nmodified_date = \"9th August 2024\"\ndeveloper = \"John Toth © 2024\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- creates an axis node based on the position selected\n<br></i><b> v 1.1 </b><i>\n- RGBA input stays now ontop and the selection is done as an underlying channel so more accurate and better selection\n- can now create multiple axis nodes from multiple position selections\n<br></i><b> v 1.2 </b><i>\n- is dynamic knobs are animated, animation will transfer to exported axis nodes\n- option to export axis class version nodes was added\n- dynamic knobs no longer make it's own NoOp node but is placed into Picker1 node\n\"\"\"\nthank_you = \"Special Thanks to Daniel Velikov as the math from worldspace to screenspace (tracker) is his\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    #f\"<b>Thank You:</b><br>\{thank_you\}<br>\{enter\}\"\n    f\"\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)"}
}
BackdropNode {
inputs 0
name BackdropNode2
tile_color 0x23232301
label "<center>Don't Touch\n\n"
note_font "Source Code Pro Light"
note_font_size 24
note_font_color 0xee453cff
xpos -1048
ypos 219
bdwidth 130
bdheight 214
}
Input {
inputs 0
name Input
label "\[value number]"
xpos -916
ypos 107
}
Dot {
name Dot1
note_font_size 35
note_font_color 0xffffff
xpos -882
ypos 282
}
set Na6729a00 [stack 0]
Output {
name Output
xpos -916
ypos 519
}
push $Na6729a00
Dot {
name Dot2
note_font_size 35
note_font_color 0xffffff
xpos -992
ypos 282
}
Shuffle {
in none
name Shuffle1
label "<b>\[value in]</b> &rarr; \[value out]"
xpos -1026
ypos 317
}
NoOp {
name Picker1
xpos -1026
ypos 375
addUserKnob {20 picker l Picker}
addUserKnob {18 position}
position {0 0 0}
addUserKnob {6 color_rgb_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
}
end_group
