Switch {
 which {{"index == 0 ? \[value built_code_field]  : \[value custom_code_field]"}}
 name CustomSwitch1
 help "Easy accessibility to set a certain value to trigger the which knob. \n\nThis is based on the knodes name and knob name of that node."
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\nbuilt = \['operations','setValue','make','makeValue','otherwise', 'otherwiseValue','formula','generateFormula','lockToggle']\ncustom = \['custom_code_field']    \n        \nif k.name() in ('index', 'showPanel'):\n    CONTROLS_type = n\['index'].value()\n    if CONTROLS_type == 'custom':\n        for i in custom:\n            n\[i].setVisible(True)\n        for i in built:\n            n\[i].setVisible(False)\n\n    elif CONTROLS_type == 'built':\n        for i in custom:\n            n\[i].setVisible(False)\n        for i in built:\n            n\[i].setVisible(True)"
 tile_color 0x434343ff
 label "\[value which] / \[expr \{\[value inputs] - (\[value inputs] > 1 ? 1 : 0)\}]"
 selected true
 addUserKnob {20 indexTab l Index}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION ModularSwitch
 addUserKnob {4 index t "\n• <b> built</b> will allows the user to use sliders to create the expression they want for the which knob output.\n\n• <b> Custom</b> will allows the user to add  there own custom code to the which knob output." M {built custom "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {26 ""}
 addUserKnob {26 space000 l "" +STARTLINE T "\t"}
 addUserKnob {1 parentName l "node name" t "The parent node that this node will link to if the <b>\"set link to parent\"</b> is clicked."}
 addUserKnob {1 parentKnob l "knob name" -STARTLINE}
 addUserKnob {22 node_add l add -STARTLINE T "nuke.thisNode().knob(\"selected\").setValue(False)\n\nif nuke.selectedNodes():\n    nuke.thisNode().knob(\"parentName\").setValue(nuke.selectedNode().name())\n\n\nn = nuke.selectedNode()\ntn =nuke.thisNode()\n\n\n#This section of the code is if you want to do your own selected knobs to not appear in the list\ndef visible_knobs(n):\n    visible_knobs = \[]\n\n    interested = True\n\n    for i in range(n.numKnobs()):\n        k = n.knob(i)\n        print(k)\n\n        if k.Class() == \"String_Knob\" and k.name() == \"name\":\n            # Don't clone anything after the \"name\" knob in the last panel\n            interested = False\n        elif k.name() == \"mapsize\":\n        # ..except everything after gizmo_file to pick up user-knobs on gizmo\n           interested = True\n        elif interested:\n            visible_knobs.append(k)\n    return visible_knobs\n\ndef filter_linkable(knobs):\n    ignore_class = \[\"Obsolete_Knob\", \"PyScript_Knob\", \"Tab_Knob\", \"Script_Knob\", \"Text_Knob\", \"Transform2d_Knob\"]\n    filtered = \[]\n    for k in knobs:\n        if k.Class() in ignore_class: continue\n        if not k.visible(): continue # Don't show invisible knobs\n        if k in filtered: continue # eh?\n        filtered.append(k)\n\n    return filtered\n   \nnames = ''\n\nknob_list = filter_linkable(visible_knobs(n))\n\nfor k in knob_list:\n    names += ' %s' % k.name()\nnames += ' disable'\n\np = nuke.Panel('Select Knob')\np.addEnumerationPulldown('Knobs', names)\np.show()\n\nknob = p.value('Knobs')\n\ntn\['parentKnob'].setValue(knob)"}
 addUserKnob {22 addGLOBAL l add -STARTLINE +INVISIBLE T "nuke.thisNode().knob(\"selected\").setValue(False)\n\nif nuke.selectedNodes():\n    nuke.thisNode().knob(\"parentName\").setValue(nuke.selectedNode().name())\n\n\nn = nuke.selectedNode()\ntn =nuke.thisNode()\n\n\n#This section of the code is if you want to do your own selected knobs to not appear in the list\nnames = ''\nfor k in n.knobs():\n    if k not in \['xpos', 'ypos', 'name', 'label', 'knobChanged', 'onCreate', 'onDestroy', 'user', 'selected', 'updateUI', 'autolabel', 'help', 'output']:\n        names += ' %s' % k\n\np = nuke.Panel('Select Knob')\np.addEnumerationPulldown('Knobs', names)\np.show()\n\nknob = p.value('Knobs')\n\ntn\['parentKnob'].setValue(knob)"}
 addUserKnob {22 node_clear l clear t "This will remove this node from the parent node.\n" -STARTLINE T "nuke.thisNode().knob(\"parentName\").setValue(\"\")\nnuke.thisNode().knob(\"parentKnob\").setValue(\"\")"}
 addUserKnob {7 knobValue l "knob value" t "This is the knob Name value from the selected node."}
 knobValue {{"\[value parentName].\[value parentKnob]"}}
 addUserKnob {4 operations l "" t "\n\n• <b> < </b> Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true. <b>(A < B) is true.</b>\n\n\n\n• <b> <= </b>Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.<b>(A <= B) is true.</b>\n\n• <b> == </b>Checks if the values of two operands are equal or not, if yes then condition becomes true. <b>(A == B) is not true.</b>\n\n\n\n• <b> != </b>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.<b>(A != B) is true.</b>\n\n• <b>>=</b>Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.<b>(A >= B) is not true.</b>\n\n\n• <b>> </b>Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.<b>(A > B) is not true.</b>" -STARTLINE M {< <= == != >= > "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {7 setValue l "" t "This is the condition value." -STARTLINE}
 setValue 1
 addUserKnob {26 make l "" t "\n\nIf Condition is true? Then value X : Otherwise value Y\n" -STARTLINE T " ? "}
 addUserKnob {3 makeValue l "" t "If the operation is <b>true</b> this is what the input value of the switch will be." -STARTLINE}
 makeValue 1
 addUserKnob {26 otherwise l "" t "\n\nIf Condition is true? Then value X : Otherwise value Y\n" -STARTLINE T " : "}
 addUserKnob {3 otherwiseValue l "" t "If the operation is<b> False </b> this is what the input value of the switch will be." -STARTLINE}
 addUserKnob {26 space001 l "" +STARTLINE T "\t"}
 addUserKnob {1 formula t "The formula written down based on the input knobs."}
 addUserKnob {22 generateFormula l "Generate Formula" t "generates a formul for the user to user if needed." -STARTLINE T "n = nuke.thisNode()\nbuilt = n.knob('built_code_field').getValue()\npName = n.knob('parentName').getValue()\npKnob = n.knob('parentKnob').getValue()\n\nif pName == '':\n    n.knob('formula').setValue('')\n    nuke.message('No node/knob has been added')\nelse:\n    n.knob('formula').setValue(built)\n    \n"}
 addUserKnob {22 lockToggle l lock/unlock t "locks and unlocks the formula" -STARTLINE T "nuke.thisNode()\['formula'].setEnabled(not nuke.thisNode()\['formula'].enabled() )"}
 addUserKnob {26 ""}
 addUserKnob {1 built_code_field l INVISIBLE +INVISIBLE}
 built_code_field "\[value parentName].\[value parentKnob]\[value operations] \[value setValue] ? \[value makeValue] : \[value otherwiseValue]"
 addUserKnob {43 custom_code_field l "Custom Code" t "custom field where the user can add there own code to make the which knob anything they want based on the node/knob name." +HIDDEN}
 custom_code_field "knobValue == 1 ? 1 : \nknobValue== 2 ? 2 : \n0 "
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Custom Switch</font><font color=#747474> v1.0"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" +STARTLINE T "<br><strong>•</br> \n<b>Custom Switch</b> allows the which knob to<br>be connected to an external node/knob within<br>the script.\n<br></b>\n\n<br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#777;\">John Toth <b>© 2022 <br>"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">Tool Demo" t "Opens a web page that will take you to a demo video about this nuke tool." +INVISIBLE T "nuke.message('Coming Soon')" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\nversion_number = \"1.0.1\"\ncontext = \"Merge\"\n\n\ndate = \"28th June\"\nyear = \" 2024\"\n\ndeveloper = \"John Toth © 2022\"\nsite = \"<a href='https://johntothvfx.com'> <span style='color:#BBBBBB'>\"\n\n\n\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- allows you to customize/control the switch based on another knobs value\n\"\"\"\n\n\n\nthankyou = \"\"\"\n\"\"\"\n\n\n\"\"\"Do not touch section below\"\"\"\nheader = \"Version Log:\"\nDLM = \"<b>Date Last Modified: </b>\" + date + year\n\nSPACE = \" \"\nENTER = \"<br><br>\"\nUPPER = \"<b>\"\nLOWER = \"</b>\"\n\n\n\nnuke.message(UPPER + header + ENTER + \"Name: \" + LOWER + name + \"<br>\" + UPPER + \"Version Number: \" + LOWER + version_number + \"<br>\" + UPPER + \"Context: \" + LOWER + context + ENTER + DLM + log + \"</i>\" + \"<br>\" + UPPER + site + developer + \"</a>\") \n\n\n"}
}
