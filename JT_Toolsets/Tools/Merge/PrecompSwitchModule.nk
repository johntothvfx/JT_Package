NoOp {
 name PrecompSwitchModule1
 knobChanged "import nuke\n\ndef toggle():\n    \"\"\"\n    Locate all PrecompSwitch nodes in the script. Check whether the majority is enabled or disabled \n    and change all nodes (with `initialize` set to 1) to the opposite state.\n    \"\"\"\n    \n    node = nuke.thisNode()\n    status = node.knob(\"status\")\n\n    PrecompSwitch_nodes = \[]\n    for PrecompSwitch in nuke.allNodes():\n        knob = PrecompSwitch.knob(\"CLASSIFICATION\")\n        if not knob or knob.value() != \"PrecompSwitch\":\n            continue\n        \n        # Check if node has 'initialize' knob and if its value is 1\n        init_knob = PrecompSwitch.knob(\"initialize\")\n        if not init_knob or init_knob.value() != 1:\n            continue\n\n        PrecompSwitch_nodes.append(PrecompSwitch)\n\n    # Return if no valid PrecompSwitch nodes found\n    if not PrecompSwitch_nodes:\n        nuke.message(\"Unable to locate any Precomp Switch nodes that can be initialized\")\n        return\n\n    # Determine the most common state (disabled/enabled)\n    current_states = \[n.knob(\"disable\").value() for n in PrecompSwitch_nodes]\n    print(current_states)\n    new_state = not max(set(current_states), key=current_states.count)\n    print(new_state)\n\n    # Set the new state for eligible nodes\n    for n in PrecompSwitch_nodes:\n        n.knob(\"disable\").setValue(new_state)\n\n    # Update the status knob\n    node.knob(\"status\").setValue(new_state)\n\n    # Display a message\n    nuke.message(\"<center>\\n \{\} PrecompSwitch nodes in the script have now been \{\}.\\n\".format(\n        len(PrecompSwitch_nodes), \[\"enabled\", \"disabled\"]\[int(new_state)]\n    ))\n\n#--------------------------------------------------------------------------------------------------------------\nif nuke.thisKnob().name() == \"disable\":\n    toggle()\n"
 tile_color 0xffc2ff
 label "\n-"
 selected true
 hide_input true
 addUserKnob {20 PrecompSwitchModule l "Precomp Switch Module"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION PrecompSwitchToggle
 addUserKnob {1 output t "DIMatters : \[expr \{\[value status] ? \"disabled\" : \"enabled\"\}]\n\[knob tile_color \[ expr \{ \[value status]? 1128481791 : 528810239 \}]]" +INVISIBLE}
 output "\[expr \{\[numvalue status] ? \"disabled\" : \"enabled\" \}]\[knob tile_color \[ expr \{ \[value status]? 1128481791 : 16761599 \}]]"
 addUserKnob {3 status t "status of the precomp switch module" +DISABLED}
 addUserKnob {22 lock l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">lock/unlock</a>\n" -STARTLINE +INVISIBLE T "nuke.thisNode()\['status'].setEnabled( not nuke.thisNode()\['status'].enabled() )\n"}
 addUserKnob {6 disable +INVISIBLE +STARTLINE}
 disable true
 addUserKnob {22 Toggle l "     toggle  precomp switch on/off    " t "Enables or disabled the Precomp Switch nodes in the nuke script on a global level. The Precomp Switch node must have the knob initialize ticked to register with this node, otherwise it is working independently. \n\nThis does not work on precomp switch nodes inside a group node." T "import nuke\n\ndef toggle():\n    \"\"\"\n    Locate all PrecompSwitch nodes in the script. Check whether the majority is enabled or disabled and change all nodes to the opposite.\n    \"\"\"\n\n    node = nuke.thisNode()\n    status = node.knob(\"status\")\n\n\n    PrecompSwitch_nodes = \[]\n    for PrecompSwitch in nuke.allNodes():\n\n        knob = PrecompSwitch.knob(\"CLASSIFICATION\")\n        if not knob:\n            continue\n\n        if knob.value() != \"PrecompSwitch\":\n            continue\n\n        PrecompSwitch_nodes.append(PrecompSwitch)       \n    \n    # return if no PrecompSwitch nodes in the script\n    if not PrecompSwitch_nodes:\n        nuke.message(\"Unable to locate any Precomp Switch nodes.\")\n        return\n\n    # figure out what the most common state (disabled/enabled) is\n    current_states = \[n.knob(\"disable\").value() for n in PrecompSwitch_nodes]\n    print(current_states)\n    new_state = not max(set(current_states), key = current_states.count)\n    print(new_state)\n\n    # set value\n    \[n.knob(\"disable\").setValue(new_state) for n in PrecompSwitch_nodes]\n    node.knob(\"status\").setValue(new_state)\n\n    nuke.message(\"<center>\\n \{\} PrecompSwitch nodes in the script have now been \{\}.\\n\".format(len(PrecompSwitch_nodes), \[\"enabled\", \"disabled\"]\[int(new_state)]))\n\n#--------------------------------------------------------------------------------------------------------------\n\n#    def knob_changed():\ntoggle()\n\n" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 exportOptions l export +INVISIBLE M {"Precomp Switch only" "Precomp switch setup" "" ""}}
 exportOptions "Precomp switch setup"
 addUserKnob {22 export l "     export    " t "Exports a Precomp Switch node ready to be used." -STARTLINE T "import nuke\n\ndef precomp_switch():\n    \"\"\"\n    Creates a PrecompSwitch node in Nuke, duplicates it, and removes the original to ensure TCL expressions trigger correctly.\n    \"\"\"\n\n    grp = nuke.thisNode()  # Get the exporting node\n    with nuke.thisParent():  # Ensure it is created outside the group\n\n        # Create the node\n        node = nuke.createNode(\"Switch\", inpanel=False)\n        node.setName(\"PrecompSwitch\")\n        node\[\"tile_color\"].setValue(0xffc2ff)\n        node\[\"note_font\"].setValue(\"Bitstream Vera Sans\")\n        node\['label'].setValue(\"\")\n        node\['which'].setValue(1)\n\n        # Set inputs to None\n        node.setInput(0, None)\n        node.setInput(1, None)\n\n        # Add custom user knobs\n        node.addKnob(nuke.Tab_Knob(\"precomp_1\", \"Precomp\"))\n        node.addKnob(nuke.String_Knob(\"CLASSIFICATION\", \"CLASSIFICATION\"))\n        node\[\"CLASSIFICATION\"].setValue(\"PrecompSwitch\")\n        node\[\"CLASSIFICATION\"].setVisible(False)\n\n        node.addKnob(nuke.String_Knob(\"output\", \"output\"))\n        node\[\"output\"].setValue('\[expr \{(\[value which] && !\[value disable]) ? \"precomp\" : \"live\"\} ]\[knob tile_color \[expr \{(\[value which] && !\[value disable]) ? \[value live] : \[value precomp]\}]]')\n        node\[\"output\"].setVisible(False)\n\n        node.addKnob(nuke.Int_Knob(\"live\", \"Live\"))\n        node\[\"live\"].setValue(16761599)\n        node\[\"live\"].setVisible(False)  \n\n        node.addKnob(nuke.Int_Knob(\"precomp\", \"Precomp\"))\n        node\[\"precomp\"].setValue(1128481791)\n        node\[\"precomp\"].setVisible(False)  \n\n        node.addKnob(nuke.Boolean_Knob(\"initialize\", \"Initialize\"))\n        node\[\"initialize\"].setValue(True)\n        node\[\"initialize\"].setTooltip('''When this knob is enabled, it will allow the Precomp Switch Module node to disable/enable this node. If disable it will work as a independent node.''')        \n\n        node.addKnob(nuke.Tab_Knob(\"info\", \"Info\"))\n        node.addKnob(nuke.Text_Knob(\"version\", \"\", \"<br><font size='5'>Precomp Switch</font><font color=#747474> v1.0\"))\n        node.addKnob(nuke.Text_Knob(\"bulletpoints\", \"\", \"<br><strong>•</strong><b>Precomp Switch</b> will visually update colors and<br>label if the node is disabled or which knob a value<br>of 0 - 1.<br><br>\\n<i>• If the node is either disabled or which knob a value<br>of 0, it will be set to 'live'; otherwise, it will be set to<br>'precomp'.<br><br></i><b><a href='https://johntothvfx.com' style='color:#747474;'>John Toth © 2024</a></b><br>\"))\n\n        node.addKnob(nuke.Text_Knob(\"divider\", \"\"))\n\n        # Demo button (hidden)\n        demo_btn = nuke.PyScript_Knob(\"demo\", \"<a href='https://johntothvfx.com'><span style='color:#747474'>Tool Demo</span></a>\", 'nuke.message(\"coming soon\")')\n        node.addKnob(demo_btn)\n        node\[\"demo\"].setVisible(False)\n\n        # Version Log Button\n        log_btn = nuke.PyScript_Knob(\n            \"log\", \n            \"<a href='https://johntothvfx.com'><span style='color:#747474'>Version Log</span></a>\", \n            '''\nversion_number = \"1.0.0\"\ncontext = \"Merge/Precomp Switch\"\nmodified_date = \"14th August 2024\"\ndeveloper = \"John Toth © 2024\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- visually displays if the node is set to 'live' or 'precomp'\n\"\"\"\n\n# Retrieve node name\nname = nuke.thisNode()\[\"CLASSIFICATION\"].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    f\"\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)\n            '''\n        )\n        node.addKnob(log_btn)\n\n        # Ensure the node is selected for duplication\n        for n in nuke.selectedNodes():\n            n\['selected'].setValue(False)\n        node\['selected'].setValue(True)\n\n        # Store the exporting node's position\n        parent_xpos, parent_ypos = grp.xpos(), grp.ypos()\n\n        # Duplicate the node\n        nuke.duplicateSelectedNodes()\n        \n        # Get the new duplicated node (exported version)\n        exported_node = nuke.selectedNode()\n\n        # Set its position relative to the original node\n        exported_node.setXYpos(parent_xpos + 100, parent_ypos + 150)\n\n        # Delete the original node to trigger TCL properly\n        nuke.delete(node)\n\n        return exported_node\n\nprecomp_switch()\n"}
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Precomp Switch Module</font><font color=#747474> v1.0"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" +STARTLINE T "<br><strong>•</br> \n<b>Precomp Switch Module</b> disables/enabled all PrecompsSwitch<br>nodes on a global level in the node graph either by disabling this node<br>or manually clicking the button.\n\n<br><br>\n<i>\n<b>• </b>Does not effect Precomp Switches in Groups nodes.\n\n\n</i><br><br><b>John Toth © 2023 <br>\n\n"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">Tool Demo" +INVISIBLE T "nuke.message('coming soon')" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#747474\">Version Log</a>\n" -STARTLINE T "\nversion_number = \"1.0.1\"\ncontext = \"Merge/Precomp Switch\"\nmodified_date = \"22th August 2025\"\ndeveloper = \"John Toth © 2023\"\nsite = \"<a href='https://johntothvfx.com'><span style='color:#BBBBBB'>\"\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- disables/enabled all PrecompsSwitch nodes on a global level in the node graph\n\"\"\"\nthank_you = \"\"\n\n# Retrieve node name\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\n\n# Message components\nheader = \"Version Log:\"\ndlm = \"<b>Date Last Modified: </b>\" + modified_date\nspace = \" \"\nenter = \"<br><br>\"\nupper = \"<b>\"\nlower = \"</b>\"\n\n# Formatted message\nmessage = (\n    f\"\{upper\}\{header\}\{enter\}\"\n    f\"Name: \{lower\}\{name\}<br>\"\n    f\"\{upper\}Version Number: \{lower\}\{version_number\}<br>\"\n    f\"\{upper\}Context: \{lower\}\{context\}\{enter\}\"\n    f\"\{dlm\}\{log\}<br>\"\n    #f\"<b>Thank You:</b><br>\{thank_you\}<br>\{enter\}\"\n    f\"\{upper\}\{site\}\{developer\}\{lower\}</span></a>\"\n)\n\n# Display the message\nnuke.message(message)"}
}
