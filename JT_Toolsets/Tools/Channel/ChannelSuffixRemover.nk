Group {
 name ChannelSuffixRemover1
 help "Removes a single channel suffix layer in all channels.\n\n<b>Example:</b> If rgba.red was selected, the '.red' will be removed from all channels."
 tile_color 0x9e3c63ff
 selected true
 addUserKnob {20 channelSuffixRemover l "Channel Suffix Remover"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION ChannelSuffixRemover
 addUserKnob {41 channels t "Enables the associated controller channel to the right. Disabling this checkbox is the same as setting the channel to none. \n\nThe channel layer selected will be removed from all channels.\n\n<b>Exmaple:</b> If you selected rgba.red, the \".red\" meaning the red channel will be removed from all channels that contain \".red\"." T Copy.from0}
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Channel Suffix Removers</font><font color=#9E3C63> v1.0"}
 addUserKnob {26 ""}
 addUserKnob {26 bulletpoints l "" t "overview of the node" +STARTLINE T "<br><strong>•</br> \n<b>Channel Suffix Remover</b> removes a single<br>channel suffix layer in all channels.\n\n</i><br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#9E3C63;\">John Toth <b>© 2024 <br>\n"}
 addUserKnob {26 ""}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#9E3C63\">Tool Demo" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message(\"Coming Soon\")" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#913c63\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\nversion_number = \"1.0.1\"\ncontext = \"Channel\"\n\n\ndate = \"20th July\"\nyear = \" 2024\"\n\ndeveloper = \"John Toth © 2024\"\nsite = \"<a href='https://johntothvfx.com'> <span style='color:#BBBBBB'>\"\n\n\n\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- removes a suffix channel layer in all channels\n\"\"\"\n\n\n\n\nthankyou = \"\"\"\n\"\"\"\n\n\n\"\"\"Do not touch section below\"\"\"\nheader = \"Version Log:\"\nDLM = \"<b>Date Last Modified: </b>\" + date + year\n\nSPACE = \" \"\nENTER = \"<br><br>\"\nUPPER = \"<b>\"\nLOWER = \"</b>\"\n\n\n\nnuke.message(UPPER + header + ENTER + \"Name: \" + LOWER + name + \"<br>\" + UPPER + \"Version Number: \" + LOWER + version_number + \"<br>\" + UPPER + \"Context: \" + LOWER + context + ENTER + DLM + log + \"</i>\" + \"<br>\" + UPPER + site + developer + ENTER + \"</a>\") \n\n\n"}
}
 BackdropNode {
  inputs 0
  name BackdropNode2
  tile_color 0x23232301
  label "<center>Don't Touch\n\n"
  note_font "Source Code Pro Light"
  note_font_size 40
  note_font_color 0xee453cff
  xpos -98
  ypos -657
  bdwidth 197
  bdheight 353
 }
 Input {
  inputs 0
  name Input
  label "\[value number]"
  xpos 180
  ypos -685
 }
 Dot {
  name Dot1
  note_font_size 35
  note_font_color 0xffffff
  xpos 214
  ypos -390
 }
set N1bf29c00 [stack 0]
 NoOp {
  name Begin
  tile_color 0x3066ff
  xpos 180
  ypos -273
 }
 NoOp {
  name End
  tile_color 0x3066ff
  xpos 180
  ypos 999
 }
 Output {
  name Output1
  xpos 180
  ypos 1071
 }
push $N1bf29c00
 Constant {
  inputs 0
  channels none
  name Constant1
  xpos -40
  ypos -541
 }
 Copy {
  inputs 2
  name Copy
  onCreate "import nuke\n\ndef remove_specified_channels():\n    # Get the current node (the node this callback is set on)\n    current_node = nuke.thisNode()\n\n    # Get the value from the \"from0\" knob\n    filter_value = current_node\['from0'].value()\n    print(f\"Filter value from 'from0' knob: \{filter_value\}\")\n\n    # Get the parent group of the current node\n    parent_group = current_node.fullName().split('.')\[0]\n\n    # Enter the parent group context\n    parent_group_node = nuke.toNode(parent_group)\n    parent_group_node.begin()\n\n    # Get the \"thisNode\" inside the group\n    group_this_node = nuke.toNode(current_node.name())\n\n    # Find and delete existing Remove nodes\n    all_nodes = nuke.allNodes()\n    for node in all_nodes:\n        if node.Class() == 'Remove':\n            print(f\"Deleting existing Remove node: \{node.fullName()\}\")\n            nuke.delete(node)\n\n    # Get the Begin and End nodes inside the group\n    begin_node = nuke.toNode('Begin')\n    end_node = nuke.toNode('End')\n\n    # Check if Begin and End nodes exist\n    if not begin_node or not end_node:\n        print(\"Begin or End node not found.\")\n        parent_group_node.end()\n        return\n\n    # Get the list of channels in the input0 node of the group\n    input_node = nuke.toNode('Input')\n    if not input_node:\n        print(\"Input0 node not found.\")\n        parent_group_node.end()\n        return\n\n    # Get the list of channels in the input node\n    channels = input_node.channels()\n    print(f\"Channels in input node: \{channels\}\")\n\n    # Filter the channels based on the filter_value\n    suffix = filter_value.split('.')\[-1]\n    filtered_channels = \[channel for channel in channels if channel.endswith(f\".\{suffix\}\")]\n    print(f\"Filtered channels: \{filtered_channels\}\")\n\n    if filtered_channels:\n        # Initialize the position below the Begin node\n        begin_pos = begin_node\['xpos'].value(), begin_node\['ypos'].value()\n        current_pos = begin_pos\n\n        # Function to create and position a new Remove node\n        def create_remove_node(position):\n            remove_node = nuke.createNode('Remove', inpanel=False)\n            remove_node\['operation'].setValue('remove')\n            remove_node\['xpos'].setValue(position\[0])\n            remove_node\['ypos'].setValue(position\[1] + 100)\n            return remove_node\n\n        # Create the first Remove node and connect it to the Begin node\n        current_remove_node = create_remove_node(current_pos)\n        current_remove_node.setInput(0, begin_node)\n\n        # Track the number of channels added to the current Remove node\n        channel_count = 0\n        channel_knobs = \['channels', 'channels2', 'channels3', 'channels4']\n\n        for channel in filtered_channels:\n            # If the current Remove node has 4 channels, create a new one\n            if channel_count >= 4:\n                new_pos = current_remove_node\['xpos'].value(), current_remove_node\['ypos'].value() + 100\n                current_remove_node = create_remove_node(new_pos)\n                channel_count = 0\n\n            # Get the base channel name without the suffix\n            base_channel_name = channel.rsplit('.', 1)\[0]\n\n            if suffix == 'alpha':\n                # Special case for alpha: keep the alpha and remove the other components\n                removal_value = f'-\{base_channel_name\}.red -\{base_channel_name\}.green -\{base_channel_name\}.blue \{channel\}'\n            else:\n                # General case for other suffixes\n                removal_value = f'-\{base_channel_name\}.* \{channel\}'\n            \n            # Set the channel removal value\n            current_remove_node\[channel_knobs\[channel_count]].setValue(removal_value)\n            print(f\"Added channel \{channel\} with removal value \{removal_value\} to \{channel_knobs\[channel_count]\} of Remove node \{current_remove_node.fullName()\}\")\n            channel_count += 1\n\n        # Connect the End node to the last created Remove node\n        end_node.setInput(0, current_remove_node)\n\n    # Exit the group context\n    parent_group_node.end()"
  knobChanged "# Ensure the function is available when the node is created\nremove_specified_channels()\n"
  xpos -40
  ypos -397
 }
end_group
