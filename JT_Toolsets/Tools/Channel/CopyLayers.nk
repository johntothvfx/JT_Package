Group {
 inputs 2
 name CopyLayers1
 help "Copies all the selected channels from A to B."
 tile_color 0x9e3c63ff
 label "\[if \{ \[lsearch \"none\"  \[value channels1]] != 0 \} \{ return \"(\[value channels1])\n\" \} else \{ return \"\"\}]\[if \{ \[value channels2] != \"none\"\} \{return \"(\[value channels2])\"\} else \{return \" \"\}]\n\[if \{ \[value channels3] != \"none\"\} \{return \"(\[value channels3])\"\} else \{return \" \"\}]\n\[if \{ \[value channels4] != \"none\"\} \{return \"(\[value channels4])\"\} else \{return \" \"\}]"
 selected true
 addUserKnob {20 copyLayers l "Copy Layers"}
 addUserKnob {1 CLASSIFICATION +INVISIBLE}
 CLASSIFICATION CopyLayers
 addUserKnob {4 bbox l "set BBox to" t "Output bbox. When set to copy one of the inputs, any data outside that box from other inputs is clipped." M {union "B side" "A side" "" "" "" "" "" "" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {3 number l "" t "The number of \"layer copy\" that have been added, that do not include the the default 4." -STARTLINE +DISABLED}
 addUserKnob {22 removeKnobs l remove t "Code which gets added to the remove knobs" -STARTLINE +INVISIBLE T "def removeKnob(knob):\n    node = nuke.thisNode()\n    \n    c = knob.name().split(\"_\")\[1]  \n\n    import re \n    for knobName, knob in node.knobs().items():\n        if c in knobName:\n            node.removeKnob(knob)\n\n    with node:\n        copy = nuke.toNode(c)\n        nuke.delete(copy)\n    node.end()    \n \n    import re\n    if not any(\[re.match(r\"knob_Copy\\d*_\", k) for k in node.knobs()]):\n        node.knob(\"divider03\").setVisible(False)\n        \n    num = node\['number'].value()-1\n    if num < 0 :\n        num = 0\n    node\['number'].setValue(num)"}
 addUserKnob {1 operation l INVISIBLE +INVISIBLE}
 operation "\[expr \{\[numvalue number] ? \"\[value number]\" : \"\" \}]"
 addUserKnob {26 ""}
 addUserKnob {41 channels1 l "layer copy" t "Copy all these channels from A to B, if they exist in A. If they are not in A, use B unchanged. Thus settings this to \"all\" will copy all the channels that exists in A." T Copy1.channels}
 addUserKnob {41 channels2 l "layer copy" t "Copy all these channels from A to B, if they exist in A. If they are not in A, use B unchanged. Thus settings this to \"all\" will copy all the channels that exists in A." T Copy2.channels}
 addUserKnob {41 channels3 l "layer copy" t "Copy all these channels from A to B, if they exist in A. If they are not in A, use B unchanged. Thus settings this to \"all\" will copy all the channels that exists in A." T Copy3.channels}
 addUserKnob {41 channels4 l "layer copy" t "Copy all these channels from A to B, if they exist in A. If they are not in A, use B unchanged. Thus settings this to \"all\" will copy all the channels that exists in A." T Copy4.channels}
 addUserKnob {26 divider01 l "" +STARTLINE +HIDDEN}
 addUserKnob {26 divider02 l "" +STARTLINE}
 addUserKnob {26 divider03 l "" +STARTLINE +HIDDEN}
 addUserKnob {22 add t "Adds a dynamic \"layer copy\" knob to the node, with the feature to remove it later." T "def createCopy():\n\n    node = nuke.thisGroup()\n\n    with node:\n        o = nuke.toNode(\"Output\").dependencies()\[0]\n        o.selectOnly()\n        copy = nuke.createNode('Copy', inpanel = False)\n        copy\['from0'].setValue('None')\n        copy\['to0'].setValue('None')\n        copy.setInput(1, nuke.toNode(\"Shuffle1\"))\n        copy.setInput(0, o)\n        name = copy.name()\n        o\['selected'].setValue(0)\n    node.end()\n    \n    return name\n\n####################################\nRemoveKnobCode = \"\"\"nuke.thisNode().knob(\"removeKnobs\").execute(); removeKnob(nuke.thisKnob())\"\"\"\n\n####################################\ndef addKnob():\n    \n    node = nuke.thisNode()\n\n    index = node\['number'].value() + 1\n    node\['number'].setValue(index)\n    \n    name = createCopy()\n    nameKnob = nuke.Link_Knob(\"knob_\{\}_name\".format(name), \" layer copy \")\n    nameKnob.setLink('%s.channels' % name)\n    nameKnob.setValue(\"none\")\n    nameKnob.setTooltip('Copy all these channels from A to B, if they exist in A. If they are not in A, use B unchanged. Thus settings this to \"all\" will copy all the channels that exists in A.')\n    nameKnob.setFlag(nuke.STARTLINE)\n\n    space = nuke.Text_Knob(\"knob_\{\}_space\".format(name), \"\".format(name))\n    space.setValue(\"   \")\n    space.clearFlag(nuke.STARTLINE)\n    \n    removeKnob = nuke.PyScript_Knob(\"knob_\{\}_remove\".format(name), \"remove\".format(name))\n    removeKnob.setValue(RemoveKnobCode)\n    removeKnob.setTooltip('remove the dynamic \"layer copy\" knob')\n    removeKnob.clearFlag(nuke.STARTLINE)\n    \n    # temorarily remove order knobs\n    orderKnobs = \[node.knob(k) for k in \[\"divider03\", \"add\",\"clear\",\"info\", \"version\", \"divider04\", \"bulletpoints\", \"divider05\", \"demo\", \"log\"]]\n    for knob in orderKnobs:\n        node.removeKnob(knob)\n       \n    # add new knobs \n    for knob in \[nameKnob, space, removeKnob]:\n        node.addKnob(knob)\n        \n    # add back old knobs\n    for knob in orderKnobs:\n        node.addKnob(knob)\n        \n    # switch back to tab with the button\n    nuke.thisKnob().setFlag(0)\n    \n    # unhide divider  \n    node.knob(\"divider03\").setVisible(True)\n    \naddKnob()" +STARTLINE}
 addUserKnob {22 clear l "clear all" t "Clear all dynamic \"layer copy\" knobs." -STARTLINE T "def knobClear():\n    node = nuke.thisNode()\n    \n    with node:\n        for n in nuke.allNodes('Copy'):\n            if n.name() not in \['Copy1', 'Copy2', 'Copy3', 'Copy4']:\n                nuke.delete(n)\n    \n    import re \n    for knobName, knob in node.knobs().items():\n        if re.match(r\"knob_Copy\\d*_\", knobName):\n            node.removeKnob(knob)\n            \n    node.knob(\"divider03\").setVisible(False)\n    node.knob('number').setValue(0)\n\nknobClear()"}
 addUserKnob {20 info l Info}
 addUserKnob {26 version l "" +STARTLINE T "<br><font size='5'>Copy Layers</font><font color=#9E3C63> v1.2"}
 addUserKnob {26 divider04 l "" +STARTLINE}
 addUserKnob {26 bulletpoints l "" t "overview of the node" +STARTLINE T "<br><strong>•</br> \n<b>Copy Layers</b> transfers multiple layers from<br> the A stream into the B stream.\n\n</i><br><br><b><a href=\"https://johntothvfx.com\" style=\"color:#9E3C63;\">John Toth <b>© 2018 <br>\n"}
 addUserKnob {26 divider05 l "" +STARTLINE}
 addUserKnob {22 demo l "<a href=\"https://johntothvfx.com\"><span style=\"color:#9E3C63\">Tool Demo" t "Launches the web page where it will have more documentation or a video about the node." +INVISIBLE T "nuke.message(\"Coming Soon\")" +STARTLINE}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#913c63\">Version Log</a>\n" t "contains information about this node.\n\n- classification\n- context\n- date last modified\n- developer notes\n- version number\n- version log\n- year made" -STARTLINE T "\nname = nuke.thisNode()\['CLASSIFICATION'].getValue()\nversion_number = \"1.2.1\"\ncontext = \"Channel\"\n\n\ndate = \"7th February\"\nyear = \" 2024\"\n\ndeveloper = \"John Toth © 2018\"\nsite = \"<a href='https://johntothvfx.com'> <span style='color:#BBBBBB'>\"\n\n\n\nlog = \"\"\"\n<br></i><b> v 1.0 </b><i>\n- copies channel layers from A stream into B\n<br></i><b> v 1.1 </b><i>\n- renamed node from Copy Extra to CopyLayers\n- add button was added to copy as many channel layers as desired\n<br></i><b> v 1.2 </b><i>\n- fixing the default alpha to be set to none instead of rgba.alpha when creating new layer\n\"\"\"\n\n\n\n\nthankyou = \"\"\"Samantha Maiolo for helping with the dynamic knob coding.\n\"\"\"\n\n\n\"\"\"Do not touch section below\"\"\"\nheader = \"Version Log:\"\nDLM = \"<b>Date Last Modified: </b>\" + date + year\n\nSPACE = \" \"\nENTER = \"<br><br>\"\nUPPER = \"<b>\"\nLOWER = \"</b>\"\n\n\n\nnuke.message(UPPER + header + ENTER + \"Name: \" + LOWER + name + \"<br>\" + UPPER + \"Version Number: \" + LOWER + version_number + \"<br>\" + UPPER + \"Context: \" + LOWER + context + ENTER + DLM + log + \"</i>\" + \"<br>\" + \"<b>Thankyou:</b><br>\" + thankyou + \"<br>\" + UPPER + site + developer + ENTER + \"</a>\") \n\n\n"}
}
 Input {
  inputs 0
  name A
  label "\[value number]"
  xpos -5
  ypos -40
  number 1
 }
 Shuffle {
  name Shuffle1
  label "<b>\[value in]</b> &rarr; \[value out]"
  xpos -5
  ypos 76
 }
set N6e2ee200 [stack 0]
push $N6e2ee200
push $N6e2ee200
push $N6e2ee200
 Input {
  inputs 0
  name B
  label "\[value number]"
  xpos 305
  ypos -40
 }
 Copy {
  inputs 2
  name Copy1
  tile_color 0x5d48a1ff
  xpos 305
  ypos 80
 }
 Copy {
  inputs 2
  name Copy2
  tile_color 0x5d48a1ff
  xpos 305
  ypos 152
 }
 Copy {
  inputs 2
  name Copy3
  tile_color 0x5d48a1ff
  xpos 305
  ypos 224
 }
 Copy {
  inputs 2
  name Copy4
  tile_color 0x5d48a1ff
  xpos 305
  ypos 296
 }
 Output {
  name Output
  xpos 305
  ypos 542
 }
end_group