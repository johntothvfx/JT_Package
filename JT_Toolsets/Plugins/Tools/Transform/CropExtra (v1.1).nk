Group {
 name Crop_Extra
 knobChanged "# For callback:\nn = nuke.thisNode()\nk = nuke.thisKnob()\n\n\nif k.name() in ('operation', 'to input format'):\n    CONTROLS_type = n\['operation'].value()\n\n    if CONTROLS_type == 'with overscan':\n        n\['CE_reformat'].setValue(0)\n        n\['CE_intersect'].setValue(1)\n        n\['CE_overscan'].setVisible(True)\n\n\n#############################\n\n    if CONTROLS_type == 'to input format':\n        n\['CE_reformat'].setValue(1)\n        n\['CE_intersect'].setValue(0)\n        n\['CE_overscan'].setVisible(False)\n\n\n#############################\n\n    if CONTROLS_type == 'to input bbox':\n        n\['CE_reformat'].setValue(1)\n        n\['CE_intersect'].setValue(0)\n        n\['CE_overscan'].setVisible(False)\n\n\n\n\n\n\n\n"
 tile_color 0xa57aaaff
 note_font "Bitstream Vera Sans"
 selected true
 addUserKnob {20 CropExtra_tab l "Crop Extra"}
 addUserKnob {4 operation l crop t "overscan:\nkeep a percentage of the overscan\n\nto input format:\nexpression added to instantly crop to the incoming format.\n\nto input bbox (bounding box):\nExpression added to instantly crop to the bbox of the incoming bbox" M {"with overscan" "to input format" "to input bbox" "" "" "" "" "" "" "" "" "" ""}}
 addUserKnob {7 CE_overscan l overscan t "This is used if you have a big bounding box of the incoming input is big it will trim it and keep a certain amount 1 beingthe format.\n\n" R 1 1.5}
 CE_overscan 1.1
 addUserKnob {6 CE_reformat l reformat t "When enabled, the image output format is changed to match the cropped image. \nWhen disabled, the original image output format is used.\n" +STARTLINE}
 addUserKnob {6 CE_intersect l intersect t "When enabled, the output bounding box is an intersection of the crop bounding box and the incoming bounding box. \nWhen disabled, the output bounding box matches the crop bounding box and can extend outside the incoming bounding box." -STARTLINE}
 CE_intersect true
 addUserKnob {6 crop_blackoutside l blackoutside t "This renders as black pixels outside the image boundary, making it easier to layer the element over another. If you uncheck this control, the outside area is filled with the outermost pixels of the image sequence. \nIn most cases, you should keep black outside checked. However, you may want to turn this off for camera shake, or if you want to texture-map or intersect the output with a similar shape." -STARTLINE}
 addUserKnob {26 space001_1 l "" +STARTLINE T " \t"}
 addUserKnob {22 generate_crop l "<span style=\"color:#a57aaa\">Safety Crop</a>\n" t "This button Creates a Safety Crop Setup.\n\nTwo Crops will be generated with expressions\n\n1. First one will be used a container box information. which you can plug into input bounding box/format you want to store.\n\n2. Second one will make sure you maintain the format/bounding box from the first one.\n\nYou can then apply nodes between the nodes." T "#############################\n\n#creates nodes outside of group\n\ngrp = nuke.thisNode()\nwith nuke.thisParent():\n\n#############################\n\n\n\n\n# Creates Safety Crop input\n\n t = nuke.nodes.Crop(name = 'SAFETY_INPUT_DATA',reformat = 0, intersect = 1, crop = 0)\n\n#############################\n\n\n\n\n# Creates Dot node\n\n d = nuke.nodes.Dot(label = 'Place nodes between the crops nodes',note_font_size = 35,note_font_color = 16777215)\n\n#############################\n\n\n\n# Creates Minamal Crop\n\n c = nuke.nodes.Crop(name = 'MIN_CROP',reformat = 0, intersect = 1, crop = 0)\n\n#############################\n\n\n\n\n# Safety Crop Expression baked in when created\n\n t\['box'].setExpression(\"min(input.bbox.x,box.x)\",0)\n t\['box'].setExpression(\"min(input.bbox.y,box.y)\",1)\n t\['box'].setExpression(\"max(input.bbox.r,width)\",2)\n t\['box'].setExpression(\"max(input.bbox.t,height)\",3)\n\n#############################\n\n\n\n#Creating Minamal Crop with Expression baked in\n\n\n c\['box'].setExpression(\"min(SC_bbx.x,box.x)\",0)\n c\['box'].setExpression(\"min(SC_bbx.y,box.y)\",1)\n c\['box'].setExpression(\"max(SC_bbx.r,width)\",2)\n c\['box'].setExpression(\"max(SC_bbx.t,height)\",3)\n\n\n\n#############################\n\n\n\n\n# Position of the node placement when created\n\n t.setXpos(grp.xpos() + 100)\n t.setYpos(grp.ypos() + 100)\n\n d.setXpos(grp.xpos() + 134)\n d.setYpos(grp.ypos() + 200)\n\n c.setXpos(grp.xpos() + 100)\n c.setYpos(grp.ypos() + 300)\n\n\n#############################\n\n\n\n#connection of the nodes when created\n\n d.connectInput(1,t)\n c.connectInput(1,d)\n\n###################\n\n#Additional Parameters\n\ntab=nuke.Tab_Knob (\"helptab\", \"Connection Tab\")\n\n\nk=nuke.String_Knob (\"SC_input\", \"Safety Input Crop\")\n\n\nl=nuke.PyScript_Knob (\"findParent\", \"find\")\n\nbb=nuke.BBox_Knob (\"SC_bbx\", \"bbox\")\n\n\n#adding paremters to certain node\nc.addKnob(tab)\nc.addKnob(k)\nc.addKnob(l)\nc.addKnob(bb)\n\n\n# settings on those paremters knobs\nc\['SC_input'].setValue('SAFETY_INPUT_DATA')\n\nc\['findParent'].setValue(\"\"\"SC_inputNode = nuke.toNode(nuke.thisNode().knob(\"SC_input\").value())\nnuke.zoom( 2, \[SC_inputNode.xpos(), SC_inputNode.ypos()])\"\"\")\n\n\nc\['SC_bbx'].setExpression(\"\[value SC_input].bbox.x\",0)\nc\['SC_bbx'].setExpression(\"\[value SC_input].bbox.y\",1)\nc\['SC_bbx'].setExpression(\"\[value SC_input].bbox.r\",2)\nc\['SC_bbx'].setExpression(\"\[value SC_input].bbox.t\",3)\nc\['SC_bbx'].setVisible(False)" +STARTLINE}
 addUserKnob {26 title l "" +STARTLINE T "<br><br><font size='5'>\nCrop Extra\n</font><font color=#a57aaa> v1.1<br>\n"}
 addUserKnob {20 hwlptab l Help}
 addUserKnob {26 guide l "" +STARTLINE T "<br><font size='5'>Basic Setup</font>"}
 addUserKnob {26 ""}
 addUserKnob {26 steps l "" +STARTLINE T "<br><strong>1. </br> \n<b>Crop Extra</b> is exactly the same as a <br> normal crop node, with baked in expression <br>to quickly crop with overscan limitation, format<br> & bounding box.\n<br><strong>2. </br> <b>Safety Crop</b> will be created<br> which you will be able to sue in your compositing<br> needs with no worries of accidently creating <br>a big bbox.\n\n</font><font color=#a57aaa>\n<br><br><b>John Toth © 2021 <br>"}
 addUserKnob {26 link l "" +STARTLINE T "<a href=\"https://johntothvfx.com\"><span style=\"color:#a57aaa\">johntothvfx.com</a>\n"}
 addUserKnob {26 space001 l "" -STARTLINE T " \t\t"}
 addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#a57aaa\">Version Log</a>\n" -STARTLINE T "nuke.message(\"<i><b>Version Log:</i></b><br><br><b>v 1.0</b><br><i>- creation of the tool</i></b><br><br><b>v 1.1</b><br><i>- Settings are automatically toggled on depending on what is selected.<br>- Safety Crop button was created.</i><br><br><b>John Toth © 2021\")\n"}
}
 Input {
  inputs 0
  name Input
  xpos -123
  ypos -34
 }
set Na720a400 [stack 0]
 Crop {
  box {{"operation==0 ? padding_crop : operation==1 ?  0 : operation==2 ? input.bbox.x:1000"} {"operation==0 ? padding_crop : operation==1 ?  0 : operation==2 ? input.bbox.y :1000"} {"operation==0 ? padding_crop : operation==1 ?  input.width : operation==2 ? input.bbox.r :1000"} {"operation==0 ? padding_crop : operation==1 ?  input.height : operation==2 ? input.bbox.t :1000"}}
  reformat {{CE_reformat}}
  intersect {{CE_intersect}}
  crop false
  name Crop1
  knobChanged "\n"
  xpos -123
  ypos 14
  addUserKnob {20 Setingstab}
  addUserKnob {7 overscan R 1 1.5}
  overscan {{CE_overscan}}
  addUserKnob {15 padding_crop l padding}
  padding_crop {{floor(boundingbox_crop-(boundingbox_crop.r-boundingbox_crop.x)*(overscan-1))} {floor(boundingbox_crop-(boundingbox_crop.t-boundingbox_crop.y)*(overscan-1))} {floor(boundingbox_crop+(boundingbox_crop.r-boundingbox_crop.x)*(overscan-1))} {floor(boundingbox_crop+(boundingbox_crop.t-boundingbox_crop.y)*(overscan-1))}}
  addUserKnob {15 boundingbox_crop l bbox}
  boundingbox_crop {0 0 {input.width} {input.height}}
  addUserKnob {26 ""}
 }
 BlackOutside {
  name BlackOutside1
  xpos -123
  ypos 62
  disable {{crop_blackoutside}}
 }
 Output {
  name Output1
  xpos -123
  ypos 110
 }
push $Na720a400
 Crop {
  box {{min(input.bbox.x,box.x)} {min(input.bbox.y,box.y)} {max(input.bbox.r,width)} {max(input.bbox.t,height)}}
  intersect true
  crop false
  name INPUT_CROP
  selected true
  xpos -13
  ypos -34
 }
 Crop {
  box {{min(INPUT_CROP.bbox.x,box.x)} {min(INPUT_CROP.bbox.y,box.y)} {max(INPUT_CROP.bbox.r,width)} {max(INPUT_CROP.bbox.t,height)}}
  intersect true
  crop false
  name MIN_CROP
  xpos -13
  ypos 14
 }
end_group