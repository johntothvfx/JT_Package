Group {
name AOVSlice1
help "uses the Position information to creates a matte slice along a certain axis."
tile_color 0x184789ff
selected true
addUserKnob {20 aovslice l "AOV slice"}
addUserKnob {26 ""}
addUserKnob {41 output l channel t "Select your layer you which to apply the effect on." T shuffe.in}
addUserKnob {26 ""}
addUserKnob {41 operation t "Sets how the pixel values from generated slice are calculated with the pixel values from input alpha to create the new pixel values that are output as the merged image: \n? absminus abs(A-B) - how much the pixels differ. \n? b if not a A?A:B - shows A wherever A exists; otherwise shows B. \n? divide A/B, 0 if A<0 and B<0 - divides the values but stops two negative values from becoming a positive number. \n? from (B-A) - subtracts A from B. \n? in Ab - only shows the areas of image A that overlap with the alpha of B. \n? max (max(A,B)) - selects the lighter of the two colors as the resulting color. Only areas darker than B are replaced, while areas lighter than B do not change. \n? min (min(A,B)) - selects the darker of the two colors as the resulting color. Any parts that are lighter than B are substituted. Any parts of the image that are darker than B don?t change. \n? minus (A-B) - subtracts B from A. \n? multiply (AB, A if A<0 and B<0) - multiplies A by B. The result is always darker. Blending with black gives black and with white returns the color unchanged. \n? out A(1-b) - only shows the areas of image A that do not overlap with the alpha of B. \n? plus A+B - the sum of the two colors. Increases brightness to lighten A and reflect B. \n? stencil B(1-a) - this is the reverse of the out operation. Only shows the areas of image B that do not overlap with the alpha of A. \n? union A+B-AB - shows both image A and B. \n? xor A+B-2AB - shows both image A and B where the images do not overlap." T ChannelMerge2.operation}
addUserKnob {4 alphafalloff l "Alpha falloff" t "how the falloff of the alpha get applied mathmatically." M {Linear Cubic Smoothstep exponent "" "" "" ""}}
alphafalloff Cubic
addUserKnob {26 aa l "" -STARTLINE T "\t"}
addUserKnob {41 disable_1 l "Disable alpha oversampling" t "Upscales the generated Slice and then scales it back down for better samples for the edges." -STARTLINE T Copy2.disable}
addUserKnob {41 mix t "Dissolves between the slice and input alpha and the full merge effect at 1.\n" T ChannelMerge2.mix}
addUserKnob {26 ""}
addUserKnob {4 axis t "Direction of axis to slice in." M {X Y Z "" ""}}
addUserKnob {41 min t "The colour picker is used to select the start of the position in the image." T Color_Picker.min}
addUserKnob {41 max t "The colour picker is used to select the end of the position in the image." T Color_Picker.max}
addUserKnob {26 aaa_1 l "" +STARTLINE T "\t"}
addUserKnob {7 inner_radius l gain t "Sets the amount by which slice multiplies the alpha."}
addUserKnob {26 ""}
addUserKnob {20 Rotation n 1}
Rotation 0
addUserKnob {4 rotationorder l "rotation order" t "Specifies the order to apply euler angles to the rotation.\n" M {XYZ XZY YXZ YZX ZXY ZYX "" "" ""}}
addUserKnob {7 rotateX l "rotate X" t "Rotates the matte around the X axis based on the position of the max point" R -180 180}
addUserKnob {7 rotateY l "rotate Y" t "Rotates the matte around the Y axis based on the position of the max point" R -180 180}
addUserKnob {7 rotateZ l "rotate Z" t "Rotates the matte around the Z axis based on the position of the max point" R -180 180}
addUserKnob {20 endGroup n -1}
addUserKnob {26 ""}
addUserKnob {20 noise n 1}
noise 0
addUserKnob {83 noiseactive l noise: t "Actives the noise pattern" M {on off}}
noiseactive off
addUserKnob {26 ""}
addUserKnob {4 noisetype l type t "Choose the type of noise to use: \n? fBm (fractional Brownian motion) - runs noise() octave times at different scales to get random numbers between -1 and +1 and adds them up. \n? turbulence - similar to fBm except it uses the absolute value of the noise function so the values it sums up are all between 0 and 1" M {fBm turbulence "" "" ""}}
addUserKnob {41 operation_1 l operation t "Sets how the pixel values from generated noise are calculated with the pixel values from input alpha to create the new pixel values that are output as the merged image: \n? absminus abs(A-B) - how much the pixels differ. \n? b if not a A?A:B - shows A wherever A exists; otherwise shows B. \n? divide A/B, 0 if A<0 and B<0 - divides the values but stops two negative values from becoming a positive number. \n? from (B-A) - subtracts A from B. \n? in Ab - only shows the areas of image A that overlap with the alpha of B. \n? max (max(A,B)) - selects the lighter of the two colors as the resulting color. Only areas darker than B are replaced, while areas lighter than B do not change. \n? min (min(A,B)) - selects the darker of the two colors as the resulting color. Any parts that are lighter than B are substituted. Any parts of the image that are darker than B don?t change. \n? minus (A-B) - subtracts B from A. \n? multiply (AB, A if A<0 and B<0) - multiplies A by B. The result is always darker. Blending with black gives black and with white returns the color unchanged. \n? out A(1-b) - only shows the areas of image A that do not overlap with the alpha of B. \n? plus A+B - the sum of the two colors. Increases brightness to lighten A and reflect B. \n? stencil B(1-a) - this is the reverse of the out operation. Only shows the areas of image B that do not overlap with the alpha of A. \n? union A+B-AB - shows both image A and B. \n? xor A+B-2AB - shows both image A and B where the images do not overlap." T ChannelMerge1.operation}
addUserKnob {7 noisemix l mix t "Dissolves between the noise and slice matte and the full merge effect at 1.\n"}
noisemix 1
addUserKnob {13 noisesize l size t "scale the noise based on the XYZ axis."}
noisesize {1 1 1}
addUserKnob {13 noiseoffset l offset t "\n\nOffsets the noise to create new patterns.\n"}
addUserKnob {26 ""}
addUserKnob {7 nrx l "rotate x" t "Rotates the noise around the X axis based on the position of the max point" R -180 180}
addUserKnob {7 nry l "rotate y" t "Rotates the noise around the Y axis based on the position of the max point" R -180 180}
addUserKnob {7 nrz l "rotate z" t "Rotates the noise around the Z axis based on the position of the max point" R -180 180}
addUserKnob {26 ""}
addUserKnob {3 octaves t "Sets the number of Perlin noise functions to add to the noise frequency."}
octaves 10
addUserKnob {7 lacunarity t "\n\nSets the amount by which octaves multiply noise frequency. Lower values produce smoother noise and higher values produce more granular noise.\n" R 0 5}
lacunarity 2
addUserKnob {7 gain t "Sets the amount by which octaves multiply noise amplitude."}
gain 0.5
addUserKnob {7 gamma t "Sets the gamma output for the noise."}
gamma 0.5
addUserKnob {20 endGroup_2 l endGroup n -1}
addUserKnob {26 ""}
addUserKnob {20 Visualize n 1}
Visualize 0
addUserKnob {83 overlay2D l "2D overlay" t "Turns on the visual 2D overlay over the image" M {on off}}
addUserKnob {18 occ l "overlay Color" t "Colour of overlay"}
occ {1 0 0}
addUserKnob {6 occ_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 color_rgb_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {7 ccmix l mix t "Dissolves between the overlay between a value of 0-1 and the full merge effect at 1.\n"}
ccmix 1
addUserKnob {26 ""}
addUserKnob {83 overlay3D l "View in 3D" t "Turns on 3D position to points.\nRed is selected area\nblack is emty." M {on off}}
overlay3D off
addUserKnob {41 detail l "Point detail" t "\n\nControls the number of available points to display in the Viewer. A value of 0 means no points are displayed. A value of 1 displays all available points.\n" T PositionToPoints1.detail}
addUserKnob {41 pointSize l "Point size" t "Controls the display size of the points in the Viewer." T PositionToPoints1.pointSize}
addUserKnob {20 endGroup_1 l endGroup n -1}
addUserKnob {26 ""}
addUserKnob {26 title l "" +STARTLINE T "<br><font size='5'>AOV Slice</font><font color=#194d95> v1.1<br>"}
addUserKnob {20 Help}
addUserKnob {26 ""}
addUserKnob {26 guide l "" +STARTLINE T "<br><font size='5'>Basic Setup</font>"}
addUserKnob {26 ""}
addUserKnob {26 steps l "" +STARTLINE T "<br><strong>1. </br> \nA simple tool to slice a section of certain AOV layers in XYZ to create a matte.\n<br><strong>2. </br> </b>\n<b>Features:<br>\n<i>a.</b> <i> Rotation\n<br>\n<b><i>b.</b> Visual view both 2D & 3D point cloud\n<br>\n<b><i>c.</b>Alpha falloff, combining incoming alpha\n<br><br>\n<b>Note:</b> This node stacks with AOV matte.\n\n</i>\n<br><br><i><strong>Special Thanks:</i> This node is based off N depthslice<br> as a learning curve. I would Like to Thank Daniel Velikov.\n\n<br><br><b>John Toth  2020 <br>"}
addUserKnob {26 link l "" +STARTLINE T "<a href=\"https://johntothvfx.com\"><span style=\"color:#194d95\">johntothvfx.com</a>\n"}
addUserKnob {26 aaa l "" -STARTLINE T " \t\t"}
addUserKnob {22 log l "<a href=\"https://johntothvfx.com\"><span style=\"color:#194d95\">Version Log</a>\n" -STARTLINE T "nuke.message(\"<i><b>Version Log:</i></b><br><br><b>v 1.0</b><br><i>- creation of the tool</i><br><br><b>v 1.1</b><br><i>- 2D visual overlay was added<br>-  cube was added as the selectable shape<br>- noise was added <br><br><b> Special Thanks to Daniel Velikov</i><br><br></i><b>John Toth  2020\")\n"}
}
BackdropNode {
inputs 0
name BackdropNode1
tile_color 0x23232301
label "<center><font size='5'></font><font color=#ee453c> Pixel QC\n</center><font size='1'>\n- Checks for Nan and Inf values and makes them black"
note_font "Source Code Pro Light"
note_font_size 40
xpos 615
ypos 1346
bdwidth 571
bdheight 404
}
BackdropNode {
inputs 0
name BackdropNode10
tile_color 0x23232301
label "<center><font size='5'></font><font color=#ee453c> Noise generated\n</center><font size='1'>\n- Noise being generated and alpha from pmatte being applied in\n"
note_font "Source Code Pro Light"
note_font_size 40
xpos 731
ypos 852
bdwidth 989
bdheight 391
}
BackdropNode {
inputs 0
name BackdropNode2
tile_color 0x23232301
label "<center><font size='5'></font><font color=#ee453c> Rotation\n</center><font size='1'>\n- XYZ orientation\n- rotate"
note_font "Source Code Pro Light"
note_font_size 40
xpos 463
ypos -723
bdwidth 821
bdheight 499
}
BackdropNode {
inputs 0
name BackdropNode3
tile_color 0x23232301
label "<center>channel in"
note_font "Source Code Pro Light"
note_font_size 40
xpos 733
ypos -1035
bdwidth 260
bdheight 238
}
BackdropNode {
inputs 0
name BackdropNode4
tile_color 0x23232301
label "<center><font size='5'></font><font color=#ee453c> Falloff filter can be applied\n</center><font size='1'>\n- falloff of the matte\n"
note_font "Source Code Pro Light"
note_font_size 40
xpos 603
ypos 209
bdwidth 776
bdheight 537
}
BackdropNode {
inputs 0
name BackdropNode5
tile_color 0x23232301
label "<center><font size='5'></font><font color=#ee453c> 3D visualization\n</center><font size='1'>\n- Pos to Points from input \n- Mate selected matte RED to view what is selected (expression)"
note_font "Source Code Pro Light"
note_font_size 40
xpos -191
ypos 2276
bdwidth 684
bdheight 559
}
BackdropNode {
inputs 0
name BackdropNode6
tile_color 0x23232301
label "<center><font size='5'></font><font color=#ee453c> matte upscaling\n</center><font size='1'>\n- upscale then rescale back down for better result"
note_font "Source Code Pro Light"
note_font_size 40
xpos 618
ypos 1766
bdwidth 571
bdheight 404
}
BackdropNode {
inputs 0
name BackdropNode7
tile_color 0x23232301
label "<center><font size='5'></font><font color=#ee453c> Matte Combining\n</center><font size='1'>\n- Pos to Points from input \n- Mate selected matte RED to view what is selected (expression)"
note_font "Source Code Pro Light"
note_font_size 40
xpos 621
ypos 2191
bdwidth 815
bdheight 441
}
BackdropNode {
inputs 0
name BackdropNode8
tile_color 0x23232301
label "<center><font size='5'></font><font color=#ee453c> 2D visualization\n</center><font size='1'>\n- Creates a 2D overlay visualization for viewer"
note_font "Source Code Pro Light"
note_font_size 40
xpos 619
ypos 2659
bdwidth 815
bdheight 441
}
BackdropNode {
inputs 0
name BackdropNode9
tile_color 0x23232301
label "<center><font size='5'></font><font color=#ee453c> Axis selection\n</center><font size='1'>\n- AXIS\n"
note_font "Source Code Pro Light"
note_font_size 40
xpos 472
ypos -188
bdwidth 817
bdheight 376
}
Input {
inputs 0
name Input
xpos 824
ypos -1193
}
Dot {
name Dot4
note_font_size 35
note_font_color 0xffffff
xpos 858
ypos -1058
}
set Nd88db200 [stack 0]
Shuffle {
in none
alpha black
name shuffe
label "<b>\[value in]</b> &rarr; \[value out]"
note_font "source code pro lighty"
xpos 824
ypos -928
}
Dot {
name Dot11
note_font_size 35
note_font_color 0xffffff
xpos 858
ypos -770
}
set Nd88da400 [stack 0]
Add {
value {{-(parent.Color_Picker.max.r+parent.Color_Picker.min.r)/2} {-(parent.Color_Picker.max.g+parent.Color_Picker.min.g)/2} {-(parent.Color_Picker.max.b+parent.Color_Picker.min.b)/2} 0}
name Add1
xpos 824
ypos -639
}
set Nd88d9d00 [stack 0]
ColorMatrix {
matrix {
    {{cos(radians(angle))} {-sin(radians(angle))} 1.224646799e-16}
    {{sin(radians(angle))} {cos(radians(angle))} 0}
    {0 0 1}
  }
name ColorMatrixRotateZ5
xpos 1102
ypos -506
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateZ}}
}
ColorMatrix {
matrix {
    {{cos(radians(angle))} 0 {sin(radians(angle))}}
    {0 1 0}
    {{-sin(radians(angle))} 0 {cos(radians(angle)) x1001 1}}
  }
name ColorMatrixRotateY5
xpos 1102
ypos -478
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateY}}
}
ColorMatrix {
matrix {
    {1 0 0}
    {0 {cos(radians(angle))} {-sin(radians(angle))}}
    {0 {sin(radians(angle))} {cos(radians(angle))}}
  }
name ColorMatrixRotateX5
xpos 1102
ypos -450
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateX}}
}
push $Nd88d9d00
ColorMatrix {
matrix {
    {{cos(radians(angle))} {-sin(radians(angle))} 1.224646799e-16}
    {{sin(radians(angle))} {cos(radians(angle))} 0}
    {0 0 1}
  }
name ColorMatrixRotateZ4
xpos 988
ypos -505
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateZ}}
}
ColorMatrix {
matrix {
    {1 0 0}
    {0 {cos(radians(angle))} {-sin(radians(angle))}}
    {0 {sin(radians(angle))} {cos(radians(angle))}}
  }
name ColorMatrixRotateX4
xpos 988
ypos -477
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateX}}
}
ColorMatrix {
matrix {
    {{cos(radians(angle))} 0 {sin(radians(angle))}}
    {0 1 0}
    {{-sin(radians(angle))} 0 {cos(radians(angle)) x1001 1}}
  }
name ColorMatrixRotateY4
xpos 988
ypos -449
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateY}}
}
push $Nd88d9d00
ColorMatrix {
matrix {
    {{cos(radians(angle))} 0 {sin(radians(angle))}}
    {0 1 0}
    {{-sin(radians(angle))} 0 {cos(radians(angle)) x1001 1}}
  }
name ColorMatrixRotateY3
xpos 876
ypos -510
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateY}}
}
ColorMatrix {
matrix {
    {{cos(radians(angle))} {-sin(radians(angle))} 1.224646799e-16}
    {{sin(radians(angle))} {cos(radians(angle))} 0}
    {0 0 1}
  }
name ColorMatrixRotateZ3
xpos 876
ypos -482
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateZ}}
}
ColorMatrix {
matrix {
    {1 0 0}
    {0 {cos(radians(angle))} {-sin(radians(angle))}}
    {0 {sin(radians(angle))} {cos(radians(angle))}}
  }
name ColorMatrixRotateX3
xpos 876
ypos -454
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateX}}
}
push $Nd88d9d00
ColorMatrix {
matrix {
    {{cos(radians(angle))} 0 {sin(radians(angle))}}
    {0 1 0}
    {{-sin(radians(angle))} 0 {cos(radians(angle)) x1001 1}}
  }
name ColorMatrixRotateY2
xpos 766
ypos -509
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateY}}
}
ColorMatrix {
matrix {
    {1 0 0}
    {0 {cos(radians(angle))} {-sin(radians(angle))}}
    {0 {sin(radians(angle))} {cos(radians(angle))}}
  }
name ColorMatrixRotateX2
xpos 766
ypos -481
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateX}}
}
ColorMatrix {
matrix {
    {{cos(radians(angle))} {-sin(radians(angle))} 1.224646799e-16}
    {{sin(radians(angle))} {cos(radians(angle))} 0}
    {0 0 1}
  }
name ColorMatrixRotateZ2
xpos 766
ypos -453
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateZ}}
}
push $Nd88d9d00
ColorMatrix {
matrix {
    {1 0 0}
    {0 {cos(radians(angle))} {-sin(radians(angle))}}
    {0 {sin(radians(angle))} {cos(radians(angle))}}
  }
name ColorMatrixRotateX1
xpos 651
ypos -510
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateX}}
}
ColorMatrix {
matrix {
    {{cos(radians(angle))} {-sin(radians(angle))} 1.224646799e-16}
    {{sin(radians(angle))} {cos(radians(angle))} 0}
    {0 0 1}
  }
name ColorMatrixRotateZ1
xpos 651
ypos -482
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateZ}}
}
ColorMatrix {
matrix {
    {{cos(radians(angle))} 0 {sin(radians(angle))}}
    {0 1 0}
    {{-sin(radians(angle))} 0 {cos(radians(angle)) x1001 1}}
  }
name ColorMatrixRotateY1
xpos 651
ypos -454
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateY}}
}
push $Nd88d9d00
ColorMatrix {
matrix {
    {1 0 0}
    {0 {cos(radians(angle))} {-sin(radians(angle))}}
    {0 {sin(radians(angle))} {cos(radians(angle))}}
  }
name ColorMatrixRotateX
xpos 547
ypos -510
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateX}}
}
ColorMatrix {
matrix {
    {{cos(radians(angle))} 0 {sin(radians(angle))}}
    {0 1 0}
    {{-sin(radians(angle))} 0 {cos(radians(angle)) x1001 1}}
  }
name ColorMatrixRotateY
xpos 547
ypos -482
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateY}}
}
ColorMatrix {
matrix {
    {{cos(radians(angle))} {-sin(radians(angle))} 1.224646799e-16}
    {{sin(radians(angle))} {cos(radians(angle))} 0}
    {0 0 1}
  }
name ColorMatrixRotateZ
xpos 547
ypos -454
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{parent.rotateZ}}
}
Switch {
inputs 6
which {{parent.rotationorder i}}
name Switch1
xpos 824
ypos -329
}
Add {
value {{(parent.Color_Picker.max.r+parent.Color_Picker.min.r)/2} {(parent.Color_Picker.max.g+parent.Color_Picker.min.g)/2} {(parent.Color_Picker.max.b+parent.Color_Picker.min.b)/2} 0}
name Add3
xpos 824
ypos -94
}
NoOp {
name Color_Picker
xpos 824
ypos -12
addUserKnob {20 User}
addUserKnob {18 min}
min {0 0 0}
addUserKnob {6 min_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 min_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 min_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {18 max}
max {0 0 0}
addUserKnob {6 max_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 max_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
addUserKnob {6 max_panelDropped_1_1 l "panel dropped state" -STARTLINE +HIDDEN}
}
set Nd883b900 [stack 0]
Expression {
expr3 clamp((b-input.min.b)/(input.max.b-input.min.b),0,1)
name Z
xpos 929
ypos 61
}
push $Nd883b900
Expression {
expr3 clamp((g-input.min.g)/(input.max.g-input.min.g),0,1)
name Y
xpos 824
ypos 62
}
push $Nd883b900
Expression {
expr3 clamp((r-input.min.r)/(input.max.r-input.min.r),0,1)
name X
xpos 709
ypos 60
}
Switch {
inputs 3
which {{axis i}}
name Switch2
xpos 824
ypos 135
}
Grade {
channels alpha
whitepoint {{-inner_radius+1}}
white_clamp true
name Core
xpos 824
ypos 297
}
Dot {
name Dot1
xpos 858
ypos 472
}
set Nd8820f00 [stack 0]
Dot {
name Dot16
note_font_size 35
note_font_color 0xffffff
xpos 984
ypos 472
}
set Nd8820800 [stack 0]
Dot {
name Dot14
note_font_size 35
note_font_color 0xffffff
xpos 1127
ypos 472
}
set Nd8820100 [stack 0]
Dot {
name Dot15
note_font_size 35
note_font_color 0xffffff
xpos 1287
ypos 472
}
Expression {
channel0 none
channel1 none
channel2 none
channel3 {{{parent.Cubic.channel3}}}
expr3 clamp(pow(pow,2))
maskChannelMask {{{parent.Cubic.maskChannelMask}}}
name Exponent
xpos 1253
ypos 541
addUserKnob {20 User}
addUserKnob {7 mult R 1 10}
}
Dot {
name Dot20
note_font_size 35
note_font_color 0xffffff
xpos 1287
ypos 690
}
push $Nd8820800
Expression {
expr3 "clamp(pow(a, 2))"
name Cubic
xpos 950
ypos 541
}
Dot {
name Dot18
note_font_size 35
note_font_color 0xffffff
xpos 984
ypos 592
}
push $Nd8820100
Expression {
expr3 "clamp(smoothstep(0, 1, a))"
name Smoothstep
xpos 1093
ypos 541
}
Dot {
name Dot19
note_font_size 35
note_font_color 0xffffff
xpos 1127
ypos 616
}
push $Nd8820f00
Switch {
inputs 4
which {{alphafalloff}}
name Switch3
xpos 824
ypos 687
}
Dot {
name Dot22
note_font_size 35
note_font_color 0xffffff
xpos 858
ypos 1050
}
set Nd8810100 [stack 0]
push $Nd88da400
Dot {
name Dot12
note_font_size 35
note_font_color 0xffffff
xpos 1397
ypos -770
}
ColorMatrix {
matrix {
    {1 0 0}
    {0 {cos(radians(angle))} {-sin(radians(angle))}}
    {0 {sin(radians(angle))} {cos(radians(angle))}}
  }
name X1
xpos 1363
ypos 927
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{nrx}}
}
ColorMatrix {
matrix {
    {{cos(radians(angle))} 0 {sin(radians(angle))}}
    {0 1 0}
    {{-sin(radians(angle))} 0 {cos(radians(angle)) x1001 1}}
  }
name Y1
xpos 1363
ypos 951
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{nry}}
}
ColorMatrix {
matrix {
    {{cos(radians(angle))} {-sin(radians(angle))} 1.224646799e-16}
    {{sin(radians(angle))} {cos(radians(angle))} 0}
    {0 0 1}
  }
name Z1
xpos 1363
ypos 975
addUserKnob {20 User}
addUserKnob {7 angle R 0 360}
angle {{nrz}}
}
Expression {
temp_name0 fBmNoise
temp_expr0 fBm((r+offset.x)*1/size.x,(g+offset.y)*1/size.y,(b+offset.z)*1/size.z,octaves,lacunarity,gain)*.5+0.5
temp_name1 turbNoise
temp_expr1 turbulence((r+offset.x)*1/size.x,(g+offset.y)*1/size.y,(b+offset.z)*1/size.z,octaves,lacunarity,gain)
channel0 rgba
expr0 noisetype==0?fBmNoise:noisetype==1?turbNoise:0
name Expression2
xpos 1363
ypos 1040
addUserKnob {20 User}
addUserKnob {13 size}
size {{noisesize.x} {noisesize.y} {noisesize.z}}
addUserKnob {13 offset}
offset {{noiseoffset.x} {noiseoffset.y} {noiseoffset.z}}
addUserKnob {3 octaves}
octaves {{parent.octaves}}
addUserKnob {7 lacunarity R 0 5}
lacunarity {{parent.lacunarity}}
addUserKnob {7 gain}
gain {{parent.gain}}
}
Gamma {
channels rgba
value {{gamma}}
name Gamma1
xpos 1363
ypos 1064
}
Expression {
expr0 isinf(r)?0:r
expr1 isinf(g)?0:g
expr2 isinf(b)?0:b
expr3 isinf(a)?0:a
name Expression3
label "infinity To Black"
xpos 1363
ypos 1101
}
Expression {
expr0 isnan(r)?0:r
expr1 isnan(g)?0:g
expr2 isnan(b)?0:b
expr3 isnan(a)?0:a
name Expression6
label nan_To_Black
xpos 1363
ypos 1137
}
push $Nd8810100
ChannelMerge {
inputs 2
operation in
mix {{noisemix}}
name ChannelMerge1
xpos 924
ypos 1130
}
Switch {
inputs 2
which {{noiseactive}}
name Switch6
xpos 824
ypos 1215
}
Expression {
expr0 isinf(r)?0:r
expr1 isinf(g)?0:g
expr2 isinf(b)?0:b
expr3 isinf(a)?0:a
name Expression5
label "infinity To Black"
xpos 824
ypos 1593
}
Expression {
expr0 isnan(r)?0:r
expr1 isnan(g)?0:g
expr2 isnan(b)?0:b
expr3 isnan(a)?0:a
name Expression4
label nan_To_Black
xpos 824
ypos 1629
}
Dot {
name Dot8
note_font_size 35
note_font_color 0xffffff
xpos 858
ypos 1842
}
Dot {
name Dot10
xpos 858
ypos 2010
}
set Nd87a9600 [stack 0]
Reformat {
type scale
scale 5
center false
filter notch
pbb true
name Oversample3
xpos 968
ypos 2007
}
Expression {
name Expression10
xpos 968
ypos 2055
}
Reformat {
type scale
scale {{1.0/Oversample3.scale}}
resize distort
center false
filter sinc4
pbb true
name Oversample6
xpos 968
ypos 2103
}
push $Nd87a9600
Copy {
inputs 2
from0 rgba.alpha
to0 rgba.alpha
name Copy2
xpos 824
ypos 2097
}
push $Nd88db200
Dot {
name Dot3
note_font_size 35
note_font_color 0xffffff
xpos 2057
ypos -1058
}
Dot {
name Dot5
xpos 2057
ypos 2358
}
set Nd8772b00 [stack 0]
ChannelMerge {
inputs 2
operation in
name ChannelMerge2
xpos 824
ypos 2342
}
set Nd8772400 [stack 0]
Dot {
name Dot6
xpos 255
ypos 2358
}
Expression {
channel0 {rgba.red -rgba.green -rgba.blue none}
expr0 a
channel1 {-rgba.red rgba.green rgba.blue none}
expr1 0
channel2 {-rgba.red -rgba.green -rgba.blue rgba.alpha}
expr2 1
channel3 none
name Expression1
xpos 221
ypos 2578
}
push $Nd88da400
Dot {
name Dot9
note_font_size 35
note_font_color 0xffffff
xpos 35
ypos -770
}
Dot {
name Dot2
xpos 35
ypos 2700
}
PositionToPoints {
inputs 2
display textured
selectable false
render_mode off
cast_shadow false
receive_shadow false
detail 0.025
name PositionToPoints1
xpos 221
ypos 2697
disable {{overlay3D}}
}
Dot {
name Dot7
xpos 255
ypos 3438
}
push $Nd8772400
push $Nd8772b00
Dot {
name Dot23
note_font_size 35
note_font_color 0xffffff
xpos 2057
ypos 2495
}
Copy {
inputs 2
from0 rgba.alpha
to0 rgba.alpha
name Copy3
xpos 824
ypos 2486
}
Dot {
name Dot21
note_font_size 35
note_font_color 0xffffff
xpos 858
ypos 2874
}
set Nd874e400 [stack 0]
push $Nd874e400
Dot {
name Dot24
note_font_size 35
note_font_color 0xffffff
xpos 1016
ypos 2874
}
set Nd874dd00 [stack 0]
Shuffle {
red alpha
green alpha
blue alpha
name Shuffle3
label "<b>\[value in]</b> &rarr; \[value out]"
xpos 1143
ypos 2858
}
Grade {
multiply {{occ} {occ} {occ} {curve}}
white_clamp true
name Grade1
xpos 1143
ypos 3046
}
push $Nd874dd00
Merge2 {
inputs 2
output rgb
mix {{ccmix}}
name Merge2
label "mix: \[value mix] (\[value bbox])"
xpos 982
ypos 3040
}
Switch {
inputs 2
which {{overlay2D}}
name Switch4
xpos 824
ypos 3046
}
Switch {
inputs 2
which {{!overlay3D}}
name Switch5
selected true
xpos 824
ypos 3434
}
Output {
name Output1
xpos 824
ypos 3735
}
end_group

